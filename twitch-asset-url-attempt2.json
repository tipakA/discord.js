{"meta":{"generator":"0.9.0","format":20,"date":1577699373845},"custom":{"general":{"name":"General","files":{"welcome":{"name":"Welcome","type":"md","content":"<div align=\"center\">\n  <br />\n  <p>\n    <a href=\"https://discord.js.org\"><img src=\"/static/logo.svg\" width=\"546\" alt=\"discord.js\" id=\"djs-logo\" /></a>\n  </p>\n  <br />\n  <p>\n    <a href=\"https://discord.gg/bRCvFy9\"><img src=\"https://discordapp.com/api/guilds/222078108977594368/embed.png\" alt=\"Discord server\" /></a>\n    <a href=\"https://www.npmjs.com/package/discord.js\"><img src=\"https://img.shields.io/npm/v/discord.js.svg?maxAge=3600\" alt=\"NPM version\" /></a>\n    <a href=\"https://www.npmjs.com/package/discord.js\"><img src=\"https://img.shields.io/npm/dt/discord.js.svg?maxAge=3600\" alt=\"NPM downloads\" /></a>\n    <a href=\"https://travis-ci.org/discordjs/discord.js\"><img src=\"https://travis-ci.org/discordjs/discord.js.svg\" alt=\"Build status\" /></a>\n    <a href=\"https://david-dm.org/discordjs/discord.js\"><img src=\"https://img.shields.io/david/discordjs/discord.js.svg?maxAge=3600\" alt=\"Dependencies\" /></a>\n    <a href=\"https://www.patreon.com/discordjs\"><img src=\"https://img.shields.io/badge/donate-patreon-F96854.svg\" alt=\"Patreon\" /></a>\n  </p>\n  <p>\n    <a href=\"https://nodei.co/npm/discord.js/\"><img src=\"https://nodei.co/npm/discord.js.png?downloads=true&stars=true\" alt=\"NPM info\" /></a>\n  </p>\n</div>\n\n# Welcome!\nWelcome to the discord.js v12 documentation.\n\nv12 is still very much a work-in-progress, as we're aiming to make it the best it can possibly be before releasing.\nOnly use it if you are fond of living life on the bleeding edge.\n\n## About\ndiscord.js is a powerful [Node.js](https://nodejs.org) module that allows you to easily interact with the\n[Discord API](https://discordapp.com/developers/docs/intro).\n\n- Object-oriented\n- Predictable abstractions\n- Performant\n- 100% coverage of the Discord API\n\n## Installation\n**Node.js 10.0.0 or newer is required.**  \nIgnore any warnings about unmet peer dependencies, as they're all optional.\n\nWithout voice support: `npm install discordjs/discord.js`  \nWith voice support ([node-opus](https://www.npmjs.com/package/node-opus)): `npm install discordjs/discord.js node-opus`  \nWith voice support ([opusscript](https://www.npmjs.com/package/opusscript)): `npm install discordjs/discord.js opusscript`\n\n### Audio engines\nThe preferred audio engine is node-opus, as it performs significantly better than opusscript. When both are available, discord.js will automatically choose node-opus.\nUsing opusscript is only recommended for development environments where node-opus is tough to get working.\nFor production bots, using node-opus should be considered a necessity, especially if they're going to be running on multiple servers.\n\n### Optional packages\n- [zlib-sync](https://www.npmjs.com/package/zlib-sync) for faster WebSocket data inflation (`npm install zlib-sync`)\n- [erlpack](https://github.com/discordapp/erlpack) for significantly faster WebSocket data (de)serialisation (`npm install discordapp/erlpack`)\n- One of the following packages can be installed for faster voice packet encryption and decryption:\n    - [sodium](https://www.npmjs.com/package/sodium) (`npm install sodium`)\n    - [libsodium.js](https://www.npmjs.com/package/libsodium-wrappers) (`npm install libsodium-wrappers`)\n- [bufferutil](https://www.npmjs.com/package/bufferutil) for a much faster WebSocket connection (`npm install bufferutil`)\n- [utf-8-validate](https://www.npmjs.com/package/utf-8-validate) in combination with `bufferutil` for much faster WebSocket processing (`npm install utf-8-validate`)\n\n## Example usage\n```js\nconst Discord = require('discord.js');\nconst client = new Discord.Client();\n\nclient.on('ready', () => {\n  console.log(`Logged in as ${client.user.tag}!`);\n});\n\nclient.on('message', msg => {\n  if (msg.content === 'ping') {\n    msg.reply('pong');\n  }\n});\n\nclient.login('token');\n```\n\n## Links\n* [Website](https://discord.js.org/) ([source](https://github.com/discordjs/website))\n* [Documentation](https://discord.js.org/#/docs/main/master/general/welcome)\n* [Guide](https://discordjs.guide/) ([source](https://github.com/discordjs/guide)) - this is still for stable  \n  See also the WIP [Update Guide](https://discordjs.guide/additional-info/changes-in-v12.html) also including updated and removed items in the library.\n* [Discord.js Discord server](https://discord.gg/bRCvFy9)\n* [Discord API Discord server](https://discord.gg/discord-api)\n* [GitHub](https://github.com/discordjs/discord.js)\n* [NPM](https://www.npmjs.com/package/discord.js)\n* [Related libraries](https://discordapi.com/unofficial/libs.html)\n\n### Extensions\n* [RPC](https://www.npmjs.com/package/discord-rpc) ([source](https://github.com/discordjs/RPC))\n\n## Contributing\nBefore creating an issue, please ensure that it hasn't already been reported/suggested, and double-check the\n[documentation](https://discord.js.org/#/docs).  \nSee [the contribution guide](https://github.com/discordjs/discord.js/blob/master/.github/CONTRIBUTING.md) if you'd like to submit a PR.\n\n## Help\nIf you don't understand something in the documentation, you are experiencing problems, or you just need a gentle\nnudge in the right direction, please don't hesitate to join our official [Discord.js Server](https://discord.gg/bRCvFy9).\n","path":"docs/general/welcome.md"},"updating":{"name":"Updating your code","type":"md","content":"# Version 11.1.0\nv11.1.0 features improved voice and gateway stability, as well as support for new features such as audit logs and searching for messages.\nSee [the changelog](https://github.com/discordjs/discord.js/releases/tag/11.1.0) for a full list of changes, including\ninformation about deprecations.\n\n# Version 11\nVersion 11 contains loads of new and improved features, optimisations, and bug fixes.\nSee [the changelog](https://github.com/discordjs/discord.js/releases/tag/11.0.0) for a full list of changes.\n\n## Significant additions\n* Message Reactions and Embeds (rich text)\n* Support for uws and erlpack for better performance\n* OAuthApplication support\n* Web distributions\n\n## Breaking changes\n### Client.login() no longer supports logging in with email + password\nLogging in with an email and password has always been heavily discouraged since the advent of proper token support, but in v11 we have made the decision to completely remove the functionality, since Hammer & Chisel have [officially stated](https://github.com/hammerandchisel/discord-api-docs/issues/69#issuecomment-223886862) it simply shouldn't be done.\n\nUser accounts can still log in with tokens just like bot accounts. To obtain the token for a user account, you can log in to Discord with that account, and use Ctrl + Shift + I to open the developer tools. In the console tab, evaluating `localStorage.token` will give you the token for that account.\n\n### ClientUser.setEmail()/setPassword() now require the current password, as well as setUsername() on user accounts\nSince you can no longer log in with email and password, you must provide the current account password to the `setEmail()`, `setPassword()`, and `setUsername()` methods for user accounts (self-bots).\n\n### Removed TextBasedChannel.sendTTSMessage()\nThis method was deemed to be an entirely pointless shortcut that virtually nobody even used.\nThe same results can be achieved by passing options to `send()` or `sendMessage()`.\n\nExample:\n```js\nchannel.send('Hi there', { tts: true });\n```\n\n### Using Collection.find()/exists() with IDs will throw an error\nThis is simply to help prevent a common mistake that is made frequently.\nTo find something or check its existence using an ID, you should use `.get()` and `.has()` which are part of the [ES6 Map class](https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Map), which Collection is an extension of.\n\n# Version 10\nVersion 10's non-BC changes focus on cleaning up some inconsistencies that exist in previous versions.\nUpgrading from v9 should be quick and painless.\n\n## Client options\nAll client options have been converted to camelCase rather than snake_case, and `max_message_cache` was renamed to `messageCacheMaxSize`.\n\nv9 code example:\n```js\nconst client = new Discord.Client({\n  disable_everyone: true,\n  max_message_cache: 500,\n  message_cache_lifetime: 120,\n  message_sweep_interval: 60\n});\n```\n\nv10 code example:\n```js\nconst client = new Discord.Client({\n  disableEveryone: true,\n  messageCacheMaxSize: 500,\n  messageCacheLifetime: 120,\n  messageSweepInterval: 60\n});\n```\n\n## Presences\nPresences have been completely restructured.\nPrevious versions of discord.js assumed that users had the same presence amongst all guilds - with the introduction of sharding, however, this is no longer the case.\n\nv9 discord.js code may look something like this:\n```js\nUser.status; // the status of the user\nUser.game; // the game that the user is playing\nClientUser.setStatus(status, game, url); // set the new status for the user\n```\n\nv10 moves presences to GuildMember instances. For the sake of simplicity, though, User classes also expose presences.\nWhen accessing a presence on a User object, it simply finds the first GuildMember for the user, and uses its presence.\nAdditionally, the introduction of the Presence class keeps all of the presence data organised.\n\n**It is strongly recommended that you use a GuildMember's presence where available, rather than a User.\nA user may have an entirely different presence between two different guilds.**\n\nv10 code:\n```js\nMemberOrUser.presence.status; // the status of the member or user\nMemberOrUser.presence.game; // the game that the member or user is playing\nClientUser.setStatus(status); // online, idle, dnd, offline\nClientUser.setGame(game, streamingURL); // a game\nClientUser.setPresence(fullPresence); // status and game combined\n```\n\n## Voice\nVoice has been rewritten internally, but in a backwards-compatible manner.\nThere is only one breaking change here; the `disconnected` event was renamed to `disconnect`.\nSeveral more events have been made available to a VoiceConnection, so see the documentation.\n\n## Events\nMany events have been renamed or had their arguments change.\n\n### Client events\n|    Version   9                                       |    Version   10                               |\n|------------------------------------------------------|-----------------------------------------------|\n|    guildMemberAdd(guild, member)                     |    guildMemberAdd(member)                     |\n|    guildMemberAvailable(guild, member)               |    guildMemberAvailable(member)               |\n|    guildMemberRemove(guild, member)                  |    guildMemberRemove(member)                  |\n|    guildMembersChunk(guild, members)                 |    guildMembersChunk(members)                 |\n|    guildMemberUpdate(guild, oldMember, newMember)    |    guildMemberUpdate(oldMember, newMember)    |\n|    guildRoleCreate(guild, role)                      |    roleCreate(role)                           |\n|    guildRoleDelete(guild, role)                      |    roleDelete(role)                           |\n|    guildRoleUpdate(guild, oldRole, newRole)          |    roleUpdate(oldRole, newRole)               |\n\nThe guild parameter that has been dropped from the guild-related events can still be derived using `member.guild` or `role.guild`.\n\n### VoiceConnection events\n| Version 9    | Version 10 |\n|--------------|------------|\n| disconnected | disconnect |\n\n## Dates and timestamps\nAll dates/timestamps on the structures have been refactored to have a consistent naming scheme and availability.\nAll of them are named similarly to this:  \n**Date:** `Message.createdAt`  \n**Timestamp:** `Message.createdTimestamp`  \nSee the docs for each structure to see which date/timestamps are available on them.\n\n\n# Version 9\nThe version 9 (v9) rewrite takes a much more object-oriented approach than previous versions,\nwhich allows your code to be much more readable and manageable.\nIt's been rebuilt from the ground up and should be much more stable, fixing caching issues that affected\nolder versions. It also has support for newer Discord Features, such as emojis.\n\nVersion 9, while containing a sizable number of breaking changes, does not require much change in your code's logic -\nmost of the concepts are still the same, but loads of functions have been moved around.\nThe vast majority of methods you're used to using have been moved out of the Client class,\ninto other more relevant classes where they belong.\nBecause of this, you will need to convert most of your calls over to the new methods.\n\nHere are a few examples of methods that have changed:\n* `Client.sendMessage(channel, message)` ==> `TextChannel.sendMessage(message)`\n  * `Client.sendMessage(user, message)` ==> `User.sendMessage(message)`\n* `Client.updateMessage(message, \"New content\")` ==> `Message.edit(\"New Content\")`\n* `Client.getChannelLogs(channel, limit)` ==> `TextChannel.fetchMessages({options})`\n* `Server.detailsOfUser(User)` ==> `Server.members.get(User).properties` (retrieving a member gives a GuildMember object)\n* `Client.joinVoiceChannel(voicechannel)` => `VoiceChannel.join()`\n\nA couple more important details:\n* `Client.loginWithToken(\"token\")` ==> `client.login(\"token\")`\n* `Client.servers.length` ==> `client.guilds.size` (all instances of `server` are now `guild`)\n\n## No more callbacks!\nVersion 9 eschews callbacks in favour of Promises. This means all code relying on callbacks must be changed.  \nFor example, the following code:\n\n```js\nclient.getChannelLogs(channel, 100, function(messages) {\n  console.log(`${messages.length} messages found`);\n});\n```\n\n```js\nchannel.fetchMessages({limit: 100}).then(messages => {\n  console.log(`${messages.size} messages found`);\n});\n```\n","path":"docs/general/updating.md"},"faq":{"name":"FAQ","type":"md","content":"# Frequently Asked Questions\nThese questions are some of the most frequently asked.\n\n\n## No matter what, I get `SyntaxError: Block-scoped declarations (let, const, function, class) not yet supported outside strict mode`‽\nUpdate to Node.js 10.0.0 or newer.\n\n## How do I get voice working?\n- Install FFMPEG.\n- Install either the `node-opus` package or the `opusscript` package.\n  node-opus is greatly preferred, due to it having significantly better performance.\n\n## How do I install FFMPEG?\n- **npm:** `npm install ffmpeg-binaries`\n- **Ubuntu 16.04:** `sudo apt install ffmpeg`\n- **Ubuntu 14.04:** `sudo apt-get install libav-tools`\n- **Windows:** `npm install ffmpeg-binaries` or see the [FFMPEG section of AoDude's guide](https://github.com/bdistin/OhGodMusicBot/blob/master/README.md#download-ffmpeg).\n\n## How do I set up node-opus?\n- **Ubuntu:** Simply run `npm install node-opus`, and it's done. Congrats!\n- **Windows:** Run `npm install --global --production windows-build-tools` in an admin command prompt or PowerShell.\n  Then, running `npm install node-opus` in your bot's directory should successfully build it. Woo!\n\nOther questions can be found at the [official Discord.js guide](https://discordjs.guide/popular-topics/common-questions.html)\nIf you have issues not listed here or on the guide, feel free to ask in the [official Discord.js server](https://discord.gg/bRCvFy9).\nAlways make sure to read the [documentation](https://discord.js.org/#/docs/main/stable/general/welcome).\n","path":"docs/general/faq.md"}}},"topics":{"name":"Topics","files":{"voice":{"name":"Voice","type":"md","content":"# Introduction to Voice\nVoice in discord.js can be used for many things, such as music bots, recording or relaying audio.\n\nIn discord.js, you can use voice by connecting to a `VoiceChannel` to obtain a `VoiceConnection`, where you can start streaming and receiving audio.\n\nTo get started, make sure you have:\n* FFmpeg - `npm install ffmpeg-binaries`\n* an opus encoder, choose one from below:\n  * `npm install node-opus` (better performance)\n  * `npm install opusscript`\n* a good network connection\n\nThe preferred opus engine is node-opus, as it performs significantly better than opusscript. When both are available, discord.js will automatically choose node-opus.\nUsing opusscript is only recommended for development environments where node-opus is tough to get working.\nFor production bots, using node-opus should be considered a necessity, especially if they're going to be running on multiple servers.\n\n## Joining a voice channel\nThe example below reacts to a message and joins the sender's voice channel, catching any errors. This is important\nas it allows us to obtain a `VoiceConnection` that we can start to stream audio with.\n\n```js\nconst Discord = require('discord.js');\nconst client = new Discord.Client();\n\nclient.login('token here');\n\nclient.on('message', async message => {\n  // Voice only works in guilds, if the message does not come from a guild,\n  // we ignore it\n  if (!message.guild) return;\n\n  if (message.content === '/join') {\n    // Only try to join the sender's voice channel if they are in one themselves\n    if (message.member.voice.channel) {\n      const connection = await message.member.voice.channel.join();\n    } else {\n      message.reply('You need to join a voice channel first!');\n    }\n  }\n});\n```\n\n## Streaming to a Voice Channel\nIn the previous example, we looked at how to join a voice channel in order to obtain a `VoiceConnection`. Now that we\nhave obtained a voice connection, we can start streaming audio to it.\n\n### Introduction to playing on voice connections\nThe most basic example of playing audio over a connection would be playing a local file:\n\n```js\nconst dispatcher = connection.play('/home/discord/audio.mp3');\n```\n\nThe `dispatcher` in this case is a `StreamDispatcher` - here you can control the volume and playback of the stream:\n\n```js\ndispatcher.pause();\ndispatcher.resume();\n\ndispatcher.setVolume(0.5); // half the volume\n\ndispatcher.on('finish', () => {\n  console.log('Finished playing!');\n});\n\ndispatcher.destroy(); // end the stream\n```\n\nWe can also pass in options when we first play the stream:\n\n```js\nconst dispatcher = connection.play('/home/discord/audio.mp3', {\n  volume: 0.5\n});\n```\n\n### What can I play?\n\nDiscord.js allows you to play a lot of things:\n\n```js\n// ReadableStreams, in this example YouTube audio\nconst ytdl = require('ytdl-core');\nconnection.play(ytdl(\n  'https://www.youtube.com/watch?v=ZlAU_w7-Xp8',\n  { filter: 'audioonly' }));\n\n// Files on the internet\nconnection.play('http://www.sample-videos.com/audio/mp3/wave.mp3');\n\n// Local files\nconnection.play('/home/discord/audio.mp3');\n```\n\nNew to v12 is the ability to play OggOpus and WebmOpus streams with much better performance by skipping out Ffmpeg. Note this comes at the cost of no longer having volume control over the stream:\n\n```js\nconnection.play(fs.createReadStream('./media.webm'), {\n  type: 'webm/opus'\n});\n\nconnection.play(fs.createReadStream('./media.ogg'), {\n  type: 'ogg/opus'\n});\n```\n\nMake sure to consult the documentation for a full list of what you can play - there's too much to cover here!\n\n## Voice Broadcasts\n\nA voice broadcast is very useful for \"radio\" bots, that play the same audio across multiple channels. It means audio is only transcoded once, and is much better on performance.\n\n```js\nconst broadcast = client.voice.createBroadcast();\n\nbroadcast.on('subscribe', dispatcher => {\n  console.log('New broadcast subscriber!');\n});\n\nbroadcast.on('unsubscribe', dispatcher => {\n  console.log('Channel unsubscribed from broadcast :(');\n})\n```\n\n`broadcast` is an instance of `VoiceBroadcast`, which has the same `play` method you are used to with regular VoiceConnections:\n\n```js\nconst dispatcher = broadcast.play('./audio.mp3');\n\nconnection.play(broadcast);\n```\n\nIt's important to note that the `dispatcher` stored above is a `BroadcastDispatcher` - it controls all the dispatcher subscribed to the broadcast, e.g. setting the volume of this dispatcher affects the volume of all subscribers.\n\n## Voice Receive\ncoming soon&trade;\n","path":"docs/topics/voice.md"},"web":{"name":"Web builds","type":"md","content":"# Web builds\nIn addition to your usual Node applications, discord.js has special distributions available that are capable of running in web browsers.\nThis is useful for client-side web apps that need to interact with the Discord API.\n[Webpack 3](https://webpack.js.org/) is used to build these.\n\n## Restrictions\n- Any voice-related functionality is unavailable, as there is currently no audio encoding/decoding capabilities without external native libraries,\n  which web browsers do not support.\n- The ShardingManager cannot be used, since it relies on being able to spawn child processes for shards.\n- None of the native optional packages are usable.\n\n### Require Library\nIf you are making your own webpack project, you can require `discord.js/browser` wherever you need to use discord.js, like so:\n```js\nconst Discord = require('discord.js/browser');\n// do something with Discord like you normally would\n```\n\n### Webpack File\nYou can obtain your desired version of discord.js' web build from the [webpack branch](https://github.com/discordjs/discord.js/tree/webpack) of the GitHub repository.\nThere is a file for each branch and version of the library, and the ones ending in `.min.js` are minified to substantially reduce the size of the source code.\n\nInclude the file on the page just as you would any other JS library, like so:\n```html\n<script type=\"text/javascript\" src=\"discord.VERSION.min.js\"></script>\n```\n\nRather than importing discord.js with `require('discord.js')`, the entire `Discord` object is available as a global (on the `window`) object.\nThe usage of the API isn't any different from using it in Node.js.\n\n#### Example\n```html\n<script type=\"text/javascript\" src=\"discord.11.1.0.min.js\"></script>\n<script type=\"text/javascript\">\n  const client = new Discord.Client();\n\n  client.on('message', msg => {\n    const guildTag = msg.channel.type === 'text' ? `[${msg.guild.name}]` : '[DM]';\n    const channelTag = msg.channel.type === 'text' ? `[#${msg.channel.name}]` : '';\n    console.log(`${guildTag}${channelTag} ${msg.author.tag}: ${msg.content}`);\n  });\n\n  client.login('some crazy token');\n</script>\n```\n","path":"docs/topics/web.md"},"partials":{"name":"Partials","type":"md","content":"# Partials\n\nPartials allow you to receive events that contain uncached instances, providing structures that contain very minimal\ndata. For example, if you were to receive a `messageDelete` event with an uncached message, normally Discord.js would\ndiscard the event. With partials, you're able to receive the event, with a Message object that contains just an ID.\n\n## Opting in\n\nPartials are opt-in, and you can enable them in the Client options by specifying [PartialTypes](/#/docs/main/master/typedef/PartialType):\n\n```js\n// Accept partial messages and DM channels when emitting events\nnew Client({ partials: ['MESSAGE', 'CHANNEL'] });\n```\n\n## Usage & warnings\n\n<warn>The only guaranteed data a partial structure can store is its ID. All other properties/methods should be\nconsidered invalid/defunct while accessing a partial structure.</warn>\n\nAfter opting-in with the above, you begin to allow partial messages and channels in your caches, so it's important\nto check whether they're safe to access whenever you encounter them, whether it be in events or through normal cache\nusage.\n\nAll instance of structures that you opted-in for will have a `partial` property. As you'd expect, this value is `true`\nwhen the instance is partial. Partial structures are only guaranteed to contain an ID, any other properties and methods\nno longer carry their normal type guarantees.\n\nThis means you have to take time to consider possible parts of your program that might need checks put in place to\nprevent accessing partial data:\n\n```js\nclient.on('messageDelete', message => {\n  console.log(`${message.id} was deleted!`);\n  // Partial messages do not contain any content so skip them\n  if (!message.partial) {\n    console.log(`It had content: \"${message.content}\"`);\n  }\n})\n\n// You can also try to upgrade partials to full instances:\nclient.on('messageReactionAdd', async (reaction, user) => {\n  // If a message gains a reaction and it is uncached, fetch and cache the message\n  // You should account for any errors while fetching, it could return API errors if the resource is missing\n  if (reaction.message.partial) await reaction.message.fetch();\n  // Now the message has been cached and is fully available:\n  console.log(`${reaction.message.author}'s message \"${reaction.message.content}\" gained a reaction!`);\n});\n```\n\n<info>If a message is deleted and both the message and channel are uncached, you must enable both 'MESSAGE' and\n'CHANNEL' in the client options to receive the messageDelete event.</info>\n\n## Why?\n\nThis allows developers to listen to events that contain uncached data, which is useful if you're running a moderation\nbot or any bot that relies on still receiving updates to resources you don't have cached -- message reactions are a\ngood example.\n\nCurrently, the only type of channel that can be uncached is a DM channel, there is no reason why guild channels should\nnot be cached.\n","path":"docs/topics/partials.md"}}},"examples":{"name":"Examples","files":{"ping":{"name":"Ping","type":"js","content":"/**\n * A ping pong bot, whenever you send \"ping\", it replies \"pong\".\n */\n\n// Import the discord.js module\nconst Discord = require('discord.js');\n\n// Create an instance of a Discord client\nconst client = new Discord.Client();\n\n/**\n * The ready event is vital, it means that only _after_ this will your bot start reacting to information\n * received from Discord\n */\nclient.on('ready', () => {\n  console.log('I am ready!');\n});\n\n// Create an event listener for messages\nclient.on('message', message => {\n  // If the message is \"ping\"\n  if (message.content === 'ping') {\n    // Send \"pong\" to the same channel\n    message.channel.send('pong');\n  }\n});\n\n// Log our bot in using the token from https://discordapp.com/developers/applications/me\nclient.login('your token here');\n","path":"docs/examples/ping.js"},"avatars":{"name":"Avatars","type":"js","content":"/**\n * Send a user a link to their avatar\n */\n\n// Import the discord.js module\nconst Discord = require('discord.js');\n\n// Create an instance of a Discord client\nconst client = new Discord.Client();\n\n/**\n * The ready event is vital, it means that only _after_ this will your bot start reacting to information\n * received from Discord\n */\nclient.on('ready', () => {\n  console.log('I am ready!');\n});\n\n// Create an event listener for messages\nclient.on('message', message => {\n  // If the message is \"what is my avatar\"\n  if (message.content === 'what is my avatar') {\n    // Send the user's avatar URL\n    message.reply(message.author.displayAvatarURL());\n  }\n});\n\n// Log our bot in using the token from https://discordapp.com/developers/applications/me\nclient.login('your token here');\n","path":"docs/examples/avatars.js"},"attachments":{"name":"Attachments","type":"md","content":"# Sending Attachments\n\nIn here you'll see a few examples showing how you can send an attachment using discord.js.\n\n## Sending an attachment using a URL\n\nThere are a few ways you can do this, but we'll show you the easiest.\n\nThe following examples use [MessageAttachment](/#/docs/main/master/class/MessageAttachment).\n\n```js\n// Extract the required classes from the discord.js module\nconst { Client, MessageAttachment } = require('discord.js');\n\n// Create an instance of a Discord client\nconst client = new Client();\n\n/**\n * The ready event is vital, it means that only _after_ this will your bot start reacting to information\n * received from Discord\n */\nclient.on('ready', () => {\n  console.log('I am ready!');\n});\n\nclient.on('message', message => {\n\t// If the message is '!rip'\n\tif (message.content === '!rip') {\n\t\t// Create the attachment using MessageAttachment\n\t\tconst attachment = new MessageAttachment('https://i.imgur.com/w3duR07.png');\n\t\t// Send the attachment in the message channel\n\t\tmessage.channel.send(attachment);\n\t}\n});\n\n// Log our bot in using the token from https://discordapp.com/developers/applications/me\nclient.login('your token here');\n```\n\nAnd here is the result:\n\n![Image showing the result](/static/attachment-example1.png)\n\nBut what if you want to send an attachment with a message content? Fear not, for it is easy to do that too! We'll recommend reading [the TextChannel's \"send\" function documentation](/#/docs/main/master/class/TextChannel?scrollTo=send) to see what other options are available.\n\n```js\n// Extract the required classes from the discord.js module\nconst { Client, MessageAttachment } = require('discord.js');\n\n// Create an instance of a Discord client\nconst client = new Client();\n\n/**\n * The ready event is vital, it means that only _after_ this will your bot start reacting to information\n * received from Discord\n */\nclient.on('ready', () => {\n  console.log('I am ready!');\n});\n\nclient.on('message', message => {\n\t// If the message is '!rip'\n\tif (message.content === '!rip') {\n\t\t// Create the attachment using MessageAttachment\n\t\tconst attachment = new MessageAttachment('https://i.imgur.com/w3duR07.png');\n\t\t// Send the attachment in the message channel with a content\n\t\tmessage.channel.send(`${message.author},`, attachment);\n\t}\n});\n\n// Log our bot in using the token from https://discordapp.com/developers/applications/me\nclient.login('your token here');\n```\n\nAnd here's the result of this one:\n\n![Image showing the result](/static/attachment-example2.png)\n\n## Sending a local file or buffer\n\nSending a local file isn't hard either! We'll be using [MessageAttachment](/#/docs/main/master/class/MessageAttachment) for these examples too.\n\n```js\n// Extract the required classes from the discord.js module\nconst { Client, MessageAttachment } = require('discord.js');\n\n// Create an instance of a Discord client\nconst client = new Client();\n\n/**\n * The ready event is vital, it means that only _after_ this will your bot start reacting to information\n * received from Discord\n */\nclient.on('ready', () => {\n  console.log('I am ready!');\n});\n\nclient.on('message', message => {\n\t// If the message is '!rip'\n\tif (message.content === '!rip') {\n\t\t// Create the attachment using MessageAttachment\n\t\tconst attachment = new MessageAttachment('./rip.png');\n\t\t// Send the attachment in the message channel with a content\n\t\tmessage.channel.send(`${message.author},`, attachment);\n\t}\n});\n\n// Log our bot in using the token from https://discordapp.com/developers/applications/me\nclient.login('your token here');\n```\n\nThe results are the same as the URL examples:\n\n![Image showing result](/static/attachment-example1.png)\n\nBut what if you have a buffer from an image? Or a text document? Well, it's the same as sending a local file or a URL!\n\nIn the following example, we'll be getting the buffer from a `memes.txt` file, and send it in the message channel.\nYou can use any buffer you want, and send it. Just make sure to overwrite the filename if it isn't an image!\n\n```js\n// Extract the required classes from the discord.js module\nconst { Client, MessageAttachment } = require('discord.js');\n\n// Import the native fs module\nconst fs = require('fs');\n\n// Create an instance of a Discord client\nconst client = new Client();\n\n/**\n * The ready event is vital, it means that only _after_ this will your bot start reacting to information\n * received from Discord\n */\nclient.on('ready', () => {\n  console.log('I am ready!');\n});\n\nclient.on('message', message => {\n\t// If the message is '!memes'\n\tif (message.content === '!memes') {\n\t\t// Get the buffer from the 'memes.txt', assuming that the file exists\n\t\tconst buffer = fs.readFileSync('./memes.txt');\n\n\t\t/**\n\t\t * Create the attachment using MessageAttachment,\n\t\t * overwritting the default file name to 'memes.txt'\n\t\t * Read more about it over at\n\t\t * http://discord.js.org/#/docs/main/master/class/MessageAttachment\n\t\t */\n\t\tconst attachment = new MessageAttachment(buffer, 'memes.txt');\n\t\t// Send the attachment in the message channel with a content\n\t\tmessage.channel.send(`${message.author}, here are your memes!`, attachment);\n\t}\n});\n\n// Log our bot in using the token from https://discordapp.com/developers/applications/me\nclient.login('your token here');\n```\n\nAnd of course, the results are:\n\n![Attachment File example 3](/static/attachment-example3.png)\n","path":"docs/examples/attachments.md"},"greeting":{"name":"Server greeting","type":"js","content":"/**\n * A bot that welcomes new guild members when they join\n */\n\n// Import the discord.js module\nconst Discord = require('discord.js');\n\n// Create an instance of a Discord client\nconst client = new Discord.Client();\n\n/**\n * The ready event is vital, it means that only _after_ this will your bot start reacting to information\n * received from Discord\n */\nclient.on('ready', () => {\n  console.log('I am ready!');\n});\n\n// Create an event listener for new guild members\nclient.on('guildMemberAdd', member => {\n  // Send the message to a designated channel on a server:\n  const channel = member.guild.channels.find(ch => ch.name === 'member-log');\n  // Do nothing if the channel wasn't found on this server\n  if (!channel) return;\n  // Send the message, mentioning the member\n  channel.send(`Welcome to the server, ${member}`);\n});\n\n// Log our bot in using the token from https://discordapp.com/developers/applications/me\nclient.login('your token here');\n","path":"docs/examples/greeting.js"},"embed":{"name":"Message Embed","type":"js","content":"/**\n * An example of how you can send embeds\n */\n\n// Extract the required classes from the discord.js module\nconst { Client, MessageEmbed } = require('discord.js');\n\n// Create an instance of a Discord client\nconst client = new Client();\n\n/**\n * The ready event is vital, it means that only _after_ this will your bot start reacting to information\n * received from Discord\n */\nclient.on('ready', () => {\n  console.log('I am ready!');\n});\n\nclient.on('message', message => {\n  // If the message is \"how to embed\"\n  if (message.content === 'how to embed') {\n    // We can create embeds using the MessageEmbed constructor\n    // Read more about all that you can do with the constructor\n    // over at https://discord.js.org/#/docs/main/master/class/MessageEmbed\n    const embed = new MessageEmbed()\n      // Set the title of the field\n      .setTitle('A slick little embed')\n      // Set the color of the embed\n      .setColor(0xFF0000)\n      // Set the main content of the embed\n      .setDescription('Hello, this is a slick embed!');\n    // Send the embed to the same channel as the message\n    message.channel.send(embed);\n  }\n});\n\n// Log our bot in using the token from https://discordapp.com/developers/applications/me\nclient.login('your token here');\n","path":"docs/examples/embed.js"},"moderation":{"name":"Moderation","type":"md","content":"# Moderation\n\nIn here, you'll see some basic examples for kicking and banning a member.\n\n## Kicking a member\n\nLet's say you have a member that you'd like to kick. Here is an example of how you *can* do it.\n\n```js\n// Import the discord.js module\nconst Discord = require('discord.js');\n\n// Create an instance of a Discord client\nconst client = new Discord.Client();\n\n/**\n * The ready event is vital, it means that only _after_ this will your bot start reacting to information\n * received from Discord\n */\nclient.on('ready', () => {\n  console.log('I am ready!');\n});\n\nclient.on('message', message => {\n  // Ignore messages that aren't from a guild\n  if (!message.guild) return;\n\n  // If the message content starts with \"!kick\"\n  if (message.content.startsWith('!kick')) {\n    // Assuming we mention someone in the message, this will return the user\n    // Read more about mentions over at https://discord.js.org/#/docs/main/master/class/MessageMentions\n    const user = message.mentions.users.first();\n    // If we have a user mentioned\n    if (user) {\n      // Now we get the member from the user\n      const member = message.guild.member(user);\n      // If the member is in the guild\n      if (member) {\n        /**\n         * Kick the member\n         * Make sure you run this on a member, not a user!\n         * There are big differences between a user and a member\n         */\n        member.kick('Optional reason that will display in the audit logs').then(() => {\n          // We let the message author know we were able to kick the person\n          message.reply(`Successfully kicked ${user.tag}`);\n        }).catch(err => {\n          // An error happened\n          // This is generally due to the bot not being able to kick the member,\n          // either due to missing permissions or role hierarchy\n          message.reply('I was unable to kick the member');\n          // Log the error\n          console.error(err);\n        });\n      } else {\n        // The mentioned user isn't in this guild\n        message.reply('That user isn\\'t in this guild!');\n      }\n    // Otherwise, if no user was mentioned\n    } else {\n      message.reply('You didn\\'t mention the user to kick!');\n    }\n  }\n});\n\n// Log our bot in using the token from https://discordapp.com/developers/applications/me\nclient.login('your token here');\n```\n\nAnd the result is:\n\n![Image showing the result](/static/kick-example.png)\n\n## Banning a member\n\nBanning works the same way as kicking, but it has slightly more options that can be changed.\n\n```js\n// Import the discord.js module\nconst Discord = require('discord.js');\n\n// Create an instance of a Discord client\nconst client = new Discord.Client();\n\n/**\n * The ready event is vital, it means that only _after_ this will your bot start reacting to information\n * received from Discord\n */\nclient.on('ready', () => {\n  console.log('I am ready!');\n});\n\nclient.on('message', message => {\n  // Ignore messages that aren't from a guild\n  if (!message.guild) return;\n\n  // if the message content starts with \"!ban\"\n  if (message.content.startsWith('!ban')) {\n    // Assuming we mention someone in the message, this will return the user\n    // Read more about mentions over at https://discord.js.org/#/docs/main/master/class/MessageMentions\n    const user = message.mentions.users.first();\n    // If we have a user mentioned\n    if (user) {\n      // Now we get the member from the user\n      const member = message.guild.member(user);\n      // If the member is in the guild\n      if (member) {\n        /**\n         * Ban the member\n         * Make sure you run this on a member, not a user!\n         * There are big differences between a user and a member\n         * Read more about what ban options there are over at\n         * https://discord.js.org/#/docs/main/master/class/GuildMember?scrollTo=ban\n         */\n        member.ban({\n          reason: 'They were bad!',\n        }).then(() => {\n          // We let the message author know we were able to ban the person\n          message.reply(`Successfully banned ${user.tag}`);\n        }).catch(err => {\n          // An error happened\n          // This is generally due to the bot not being able to ban the member,\n          // either due to missing permissions or role hierarchy\n          message.reply('I was unable to ban the member');\n          // Log the error\n          console.error(err);\n        });\n      } else {\n        // The mentioned user isn't in this guild\n        message.reply('That user isn\\'t in this guild!');\n      }\n    } else {\n    // Otherwise, if no user was mentioned\n      message.reply('You didn\\'t mention the user to ban!');\n    }\n  }\n});\n\n// Log our bot in using the token from https://discordapp.com/developers/applications/me\nclient.login('your token here');\n```\n\nAnd the result is:\n\n![Image showing the result](/static/ban-example.png)\n","path":"docs/examples/moderation.md"},"webhook":{"name":"Webhook","type":"js","content":"/**\n * Send a message using a webhook\n */\n\n// Import the discord.js module\nconst Discord = require('discord.js');\n\n// Create a new webhook\nconst hook = new Discord.WebhookClient('webhook id', 'webhook token');\n\n// Send a message using the webhook\nhook.send('I am now alive!');\n","path":"docs/examples/webhook.js"}}}},"classes":[{"name":"BaseClient","description":"The base class for all clients.","extends":[[["EventEmitter"]]],"props":[{"name":"_timeouts","description":"Timeouts set by {@link BaseClient#setTimeout} that are still active","access":"private","type":[[["Set","<"],["Timeout",">"]]],"meta":{"line":22,"file":"BaseClient.js","path":"src/client"}},{"name":"_intervals","description":"Intervals set by {@link BaseClient#setInterval} that are still active","access":"private","type":[[["Set","<"],["Timeout",">"]]],"meta":{"line":29,"file":"BaseClient.js","path":"src/client"}},{"name":"_immediates","description":"Intervals set by {@link BaseClient#setImmediate} that are still active","access":"private","type":[[["Set","<"],["Immediate",">"]]],"meta":{"line":36,"file":"BaseClient.js","path":"src/client"}},{"name":"options","description":"The options the client was instantiated with","type":[[["ClientOptions"]]],"meta":{"line":42,"file":"BaseClient.js","path":"src/client"}},{"name":"rest","description":"The REST manager of the client","access":"private","type":[[["RESTManager"]]],"meta":{"line":49,"file":"BaseClient.js","path":"src/client"}},{"name":"api","description":"API shortcut","access":"private","readonly":true,"type":[[["Object"]]],"meta":{"line":58,"file":"BaseClient.js","path":"src/client"}}],"methods":[{"name":"destroy","description":"Destroys all assets used by the base client.","meta":{"line":65,"file":"BaseClient.js","path":"src/client"}},{"name":"setTimeout","description":"Sets a timeout that will be automatically cancelled if the client is destroyed.","params":[{"name":"fn","description":"Function to execute","type":[[["function"]]]},{"name":"delay","description":"Time to wait before executing (in milliseconds)","type":[[["number"]]]},{"name":"args","description":"Arguments for the function","variable":true,"type":[["*"]]}],"returns":[[["Timeout"]]],"meta":{"line":81,"file":"BaseClient.js","path":"src/client"}},{"name":"clearTimeout","description":"Clears a timeout.","params":[{"name":"timeout","description":"Timeout to cancel","type":[[["Timeout"]]]}],"meta":{"line":94,"file":"BaseClient.js","path":"src/client"}},{"name":"setInterval","description":"Sets an interval that will be automatically cancelled if the client is destroyed.","params":[{"name":"fn","description":"Function to execute","type":[[["function"]]]},{"name":"delay","description":"Time to wait between executions (in milliseconds)","type":[[["number"]]]},{"name":"args","description":"Arguments for the function","variable":true,"type":[["*"]]}],"returns":[[["Timeout"]]],"meta":{"line":106,"file":"BaseClient.js","path":"src/client"}},{"name":"clearInterval","description":"Clears an interval.","params":[{"name":"interval","description":"Interval to cancel","type":[[["Timeout"]]]}],"meta":{"line":116,"file":"BaseClient.js","path":"src/client"}},{"name":"setImmediate","description":"Sets an immediate that will be automatically cancelled if the client is destroyed.","params":[{"name":"fn","description":"Function to execute","type":[[["function"]]]},{"name":"args","description":"Arguments for the function","variable":true,"type":[["*"]]}],"returns":[[["Immediate"]]],"meta":{"line":127,"file":"BaseClient.js","path":"src/client"}},{"name":"clearImmediate","description":"Clears an immediate.","params":[{"name":"immediate","description":"Immediate to cancel","type":[[["Immediate"]]]}],"meta":{"line":137,"file":"BaseClient.js","path":"src/client"}}],"meta":{"line":14,"file":"BaseClient.js","path":"src/client"}},{"name":"Client","description":"The main hub for interacting with the Discord API, and the starting point for any bot.","extends":[[["BaseClient"]]],"construct":{"name":"Client","params":[{"name":"options","description":"Options for the client","optional":true,"type":[[["ClientOptions"]]]}]},"props":[{"name":"ws","description":"The WebSocket manager of the client","type":[[["WebSocketManager"]]],"meta":{"line":77,"file":"Client.js","path":"src/client"}},{"name":"actions","description":"The action manager of the client","access":"private","type":[[["ActionsManager"]]],"meta":{"line":84,"file":"Client.js","path":"src/client"}},{"name":"voice","description":"The voice manager of the client (`null` in browsers)","nullable":true,"type":[[["ClientVoiceManager"]]],"meta":{"line":90,"file":"Client.js","path":"src/client"}},{"name":"shard","description":"Shard helpers for the client (only if the process was spawned from a {@link ShardingManager})","nullable":true,"type":[[["ShardClientUtil"]]],"meta":{"line":96,"file":"Client.js","path":"src/client"}},{"name":"users","description":"All of the {@link User} objects that have been cached at any point, mapped by their IDs","type":[[["UserStore","<"],["Snowflake",", "],["User",">"]]],"meta":{"line":104,"file":"Client.js","path":"src/client"}},{"name":"guilds","description":"All of the guilds the client is currently handling, mapped by their IDs -\nas long as sharding isn't being used, this will be *every* guild the bot is a member of","type":[[["GuildStore","<"],["Snowflake",", "],["Guild",">"]]],"meta":{"line":111,"file":"Client.js","path":"src/client"}},{"name":"channels","description":"All of the {@link Channel}s that the client is currently handling, mapped by their IDs -\nas long as sharding isn't being used, this will be *every* channel in *every* guild the bot\nis a member of. Note that DM channels will not be initially cached, and thus not be present\nin the store without their explicit fetching or use.","type":[[["ChannelStore","<"],["Snowflake",", "],["Channel",">"]]],"meta":{"line":120,"file":"Client.js","path":"src/client"}},{"name":"presence","description":"The presence of the Client","access":"private","type":[[["ClientPresence"]]],"meta":{"line":128,"file":"Client.js","path":"src/client"}},{"name":"token","description":"Authorization token for the logged in bot\n<warn>This should be kept private at all times.</warn>","nullable":true,"type":[[["string"]]],"meta":{"line":137,"file":"Client.js","path":"src/client"}},{"name":"user","description":"User that the client is logged in as","nullable":true,"type":[[["ClientUser"]]],"meta":{"line":146,"file":"Client.js","path":"src/client"}},{"name":"readyAt","description":"Time at which the client was last regarded as being in the `READY` state\n(each time the client disconnects and successfully reconnects, this will be overwritten)","nullable":true,"type":[[["Date"]]],"meta":{"line":153,"file":"Client.js","path":"src/client"}},{"name":"emojis","description":"All custom emojis that the client has access to, mapped by their IDs","readonly":true,"type":[[["GuildEmojiStore","<"],["Snowflake",", "],["GuildEmoji",">"]]],"meta":{"line":165,"file":"Client.js","path":"src/client"}},{"name":"readyTimestamp","description":"Timestamp of the time the client was last `READY` at","readonly":true,"nullable":true,"type":[[["number"]]],"meta":{"line":178,"file":"Client.js","path":"src/client"}},{"name":"uptime","description":"How long it has been since the client last entered the `READY` state in milliseconds","readonly":true,"nullable":true,"type":[[["number"]]],"meta":{"line":187,"file":"Client.js","path":"src/client"}},{"name":"_timeouts","description":"Timeouts set by {@link BaseClient#setTimeout} that are still active","access":"private","type":[[["Set","<"],["Timeout",">"]]],"meta":{"line":22,"file":"BaseClient.js","path":"src/client"}},{"name":"_intervals","description":"Intervals set by {@link BaseClient#setInterval} that are still active","access":"private","type":[[["Set","<"],["Timeout",">"]]],"meta":{"line":29,"file":"BaseClient.js","path":"src/client"}},{"name":"_immediates","description":"Intervals set by {@link BaseClient#setImmediate} that are still active","access":"private","type":[[["Set","<"],["Immediate",">"]]],"meta":{"line":36,"file":"BaseClient.js","path":"src/client"}},{"name":"options","description":"The options the client was instantiated with","type":[[["ClientOptions"]]],"meta":{"line":42,"file":"BaseClient.js","path":"src/client"}},{"name":"rest","description":"The REST manager of the client","access":"private","type":[[["RESTManager"]]],"meta":{"line":49,"file":"BaseClient.js","path":"src/client"}},{"name":"api","description":"API shortcut","access":"private","readonly":true,"type":[[["Object"]]],"meta":{"line":58,"file":"BaseClient.js","path":"src/client"}}],"methods":[{"name":"login","description":"Logs the client in, establishing a websocket connection to Discord.","examples":["client.login('my token');"],"params":[{"name":"token","description":"Token of the account to log in with","type":[[["string"]]]}],"async":true,"returns":{"types":[[["Promise","<"],["string",">"]]],"description":"Token of the account used"},"meta":{"line":198,"file":"Client.js","path":"src/client"}},{"name":"destroy","description":"Logs out, terminates the connection to Discord, and destroys the client.","returns":[[["void"]]],"meta":{"line":224,"file":"Client.js","path":"src/client"}},{"name":"fetchInvite","description":"Obtains an invite from Discord.","examples":["client.fetchInvite('https://discord.gg/bRCvFy9')\n  .then(invite => console.log(`Obtained invite with code: ${invite.code}`))\n  .catch(console.error);"],"params":[{"name":"invite","description":"Invite code or URL","type":[[["InviteResolvable"]]]}],"returns":[[["Promise","<"],["Invite",">"]]],"meta":{"line":239,"file":"Client.js","path":"src/client"}},{"name":"fetchWebhook","description":"Obtains a webhook from Discord.","examples":["client.fetchWebhook('id', 'token')\n  .then(webhook => console.log(`Obtained webhook with name: ${webhook.name}`))\n  .catch(console.error);"],"params":[{"name":"id","description":"ID of the webhook","type":[[["Snowflake"]]]},{"name":"token","description":"Token for the webhook","optional":true,"type":[[["string"]]]}],"returns":[[["Promise","<"],["Webhook",">"]]],"meta":{"line":255,"file":"Client.js","path":"src/client"}},{"name":"fetchVoiceRegions","description":"Obtains the available voice regions from Discord.","examples":["client.fetchVoiceRegions()\n  .then(regions => console.log(`Available regions are: ${regions.map(region => region.name).join(', ')}`))\n  .catch(console.error);"],"returns":[[["Promise","<"],["Collection","<"],["string",", "],["VoiceRegion",">>"]]],"meta":{"line":267,"file":"Client.js","path":"src/client"}},{"name":"sweepMessages","description":"Sweeps all text-based channels' messages and removes the ones older than the max message lifetime.\nIf the message has been edited, the time of the edit is used rather than the time of the original message.","examples":["// Remove all messages older than 1800 seconds from the messages cache\nconst amount = client.sweepMessages(1800);\nconsole.log(`Successfully removed ${amount} messages from the cache.`);"],"params":[{"name":"lifetime","description":"Messages that are older than this (in seconds)\nwill be removed from the caches. The default is based on {@link ClientOptions#messageCacheLifetime}","optional":true,"default":"this.options.messageCacheLifetime","type":[[["number"]]]}],"returns":{"types":[[["number"]]],"description":"Amount of messages that were removed from the caches,\nor -1 if the message cache lifetime is unlimited"},"meta":{"line":287,"file":"Client.js","path":"src/client"}},{"name":"fetchApplication","description":"Obtains the OAuth Application of this bot from Discord.","returns":[[["Promise","<"],["ClientApplication",">"]]],"meta":{"line":319,"file":"Client.js","path":"src/client"}},{"name":"generateInvite","description":"Generates a link that can be used to invite the bot to a guild.","examples":["client.generateInvite(['SEND_MESSAGES', 'MANAGE_GUILD', 'MENTION_EVERYONE'])\n  .then(link => console.log(`Generated bot invite link: ${link}`))\n  .catch(console.error);"],"params":[{"name":"permissions","description":"Permissions to request","optional":true,"type":[[["PermissionResolvable"]]]}],"async":true,"returns":[[["Promise","<"],["string",">"]]],"meta":{"line":333,"file":"Client.js","path":"src/client"}},{"name":"_eval","description":"Calls {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/eval} on a script\nwith the client as `this`.","access":"private","params":[{"name":"script","description":"Script to eval","type":[[["string"]]]}],"returns":[["*"]],"meta":{"line":358,"file":"Client.js","path":"src/client"}},{"name":"_validateOptions","description":"Validates the client options.","access":"private","params":[{"name":"options","description":"Options to validate","optional":true,"default":"this.options","type":[[["ClientOptions"]]]}],"meta":{"line":367,"file":"Client.js","path":"src/client"}},{"name":"setTimeout","description":"Sets a timeout that will be automatically cancelled if the client is destroyed.","inherits":"BaseClient#setTimeout","inherited":true,"params":[{"name":"fn","description":"Function to execute","type":[[["function"]]]},{"name":"delay","description":"Time to wait before executing (in milliseconds)","type":[[["number"]]]},{"name":"args","description":"Arguments for the function","variable":true,"type":[["*"]]}],"returns":[[["Timeout"]]],"meta":{"line":81,"file":"BaseClient.js","path":"src/client"}},{"name":"clearTimeout","description":"Clears a timeout.","inherits":"BaseClient#clearTimeout","inherited":true,"params":[{"name":"timeout","description":"Timeout to cancel","type":[[["Timeout"]]]}],"meta":{"line":94,"file":"BaseClient.js","path":"src/client"}},{"name":"setInterval","description":"Sets an interval that will be automatically cancelled if the client is destroyed.","inherits":"BaseClient#setInterval","inherited":true,"params":[{"name":"fn","description":"Function to execute","type":[[["function"]]]},{"name":"delay","description":"Time to wait between executions (in milliseconds)","type":[[["number"]]]},{"name":"args","description":"Arguments for the function","variable":true,"type":[["*"]]}],"returns":[[["Timeout"]]],"meta":{"line":106,"file":"BaseClient.js","path":"src/client"}},{"name":"clearInterval","description":"Clears an interval.","inherits":"BaseClient#clearInterval","inherited":true,"params":[{"name":"interval","description":"Interval to cancel","type":[[["Timeout"]]]}],"meta":{"line":116,"file":"BaseClient.js","path":"src/client"}},{"name":"setImmediate","description":"Sets an immediate that will be automatically cancelled if the client is destroyed.","inherits":"BaseClient#setImmediate","inherited":true,"params":[{"name":"fn","description":"Function to execute","type":[[["function"]]]},{"name":"args","description":"Arguments for the function","variable":true,"type":[["*"]]}],"returns":[[["Immediate"]]],"meta":{"line":127,"file":"BaseClient.js","path":"src/client"}},{"name":"clearImmediate","description":"Clears an immediate.","inherits":"BaseClient#clearImmediate","inherited":true,"params":[{"name":"immediate","description":"Immediate to cancel","type":[[["Immediate"]]]}],"meta":{"line":137,"file":"BaseClient.js","path":"src/client"}}],"events":[{"name":"channelCreate","description":"Emitted whenever a channel is created.","params":[{"name":"channel","description":"The channel that was created","type":[[["DMChannel"]],[["GuildChannel"]]]}],"meta":{"line":12,"file":"ChannelCreate.js","path":"src/client/actions"}},{"name":"channelDelete","description":"Emitted whenever a channel is deleted.","params":[{"name":"channel","description":"The channel that was deleted","type":[[["DMChannel"]],[["GuildChannel"]]]}],"meta":{"line":25,"file":"ChannelDelete.js","path":"src/client/actions"}},{"name":"guildBanRemove","description":"Emitted whenever a member is unbanned from a guild.","params":[{"name":"guild","description":"The guild that the unban occurred in","type":[[["Guild"]]]},{"name":"user","description":"The user that was unbanned","type":[[["User"]]]}],"meta":{"line":11,"file":"GuildBanRemove.js","path":"src/client/actions"}},{"name":"guildUnavailable","description":"Emitted whenever a guild becomes unavailable, likely due to a server outage.","params":[{"name":"guild","description":"The guild that has become unavailable","type":[[["Guild"]]]}],"meta":{"line":25,"file":"GuildDelete.js","path":"src/client/actions"}},{"name":"guildDelete","description":"Emitted whenever a guild kicks the client or the guild is deleted/left.","params":[{"name":"guild","description":"The guild that was deleted","type":[[["Guild"]]]}],"meta":{"line":46,"file":"GuildDelete.js","path":"src/client/actions"}},{"name":"emojiCreate","description":"Emitted whenever a custom emoji is created in a guild.","params":[{"name":"emoji","description":"The emoji that was created","type":[[["GuildEmoji"]]]}],"meta":{"line":9,"file":"GuildEmojiCreate.js","path":"src/client/actions"}},{"name":"emojiDelete","description":"Emitted whenever a custom emoji is deleted in a guild.","params":[{"name":"emoji","description":"The emoji that was deleted","type":[[["GuildEmoji"]]]}],"meta":{"line":10,"file":"GuildEmojiDelete.js","path":"src/client/actions"}},{"name":"emojiUpdate","description":"Emitted whenever a custom emoji is updated in a guild.","params":[{"name":"oldEmoji","description":"The old emoji","type":[[["GuildEmoji"]]]},{"name":"newEmoji","description":"The new emoji","type":[[["GuildEmoji"]]]}],"meta":{"line":9,"file":"GuildEmojiUpdate.js","path":"src/client/actions"}},{"name":"guildIntegrationsUpdate","description":"Emitted whenever a guild integration is updated","params":[{"name":"guild","description":"The guild whose integrations were updated","type":[[["Guild"]]]}],"meta":{"line":10,"file":"GuildIntegrationsUpdate.js","path":"src/client/actions"}},{"name":"guildMemberRemove","description":"Emitted whenever a member leaves a guild, or is kicked.","params":[{"name":"member","description":"The member that has left/been kicked from the guild","type":[[["GuildMember"]]]}],"meta":{"line":17,"file":"GuildMemberRemove.js","path":"src/client/actions"}},{"name":"roleCreate","description":"Emitted whenever a role is created.","params":[{"name":"role","description":"The role that was created","type":[[["Role"]]]}],"meta":{"line":14,"file":"GuildRoleCreate.js","path":"src/client/actions"}},{"name":"roleDelete","description":"Emitted whenever a guild role is deleted.","params":[{"name":"role","description":"The role that was deleted","type":[[["Role"]]]}],"meta":{"line":17,"file":"GuildRoleDelete.js","path":"src/client/actions"}},{"name":"roleUpdate","description":"Emitted whenever a guild role is updated.","params":[{"name":"oldRole","description":"The role before the update","type":[[["Role"]]]},{"name":"newRole","description":"The role after the update","type":[[["Role"]]]}],"meta":{"line":17,"file":"GuildRoleUpdate.js","path":"src/client/actions"}},{"name":"guildUpdate","description":"Emitted whenever a guild is updated - e.g. name change.","params":[{"name":"oldGuild","description":"The guild before the update","type":[[["Guild"]]]},{"name":"newGuild","description":"The guild after the update","type":[[["Guild"]]]}],"meta":{"line":13,"file":"GuildUpdate.js","path":"src/client/actions"}},{"name":"message","description":"Emitted whenever a message is created.","params":[{"name":"message","description":"The created message","type":[[["Message"]]]}],"meta":{"line":26,"file":"MessageCreate.js","path":"src/client/actions"}},{"name":"messageDelete","description":"Emitted whenever a message is deleted.","params":[{"name":"message","description":"The deleted message","type":[[["Message"]]]}],"meta":{"line":16,"file":"MessageDelete.js","path":"src/client/actions"}},{"name":"messageDeleteBulk","description":"Emitted whenever messages are deleted in bulk.","params":[{"name":"messages","description":"The deleted messages, mapped by their ID","type":[[["Collection","<"],["Snowflake",", "],["Message",">"]]]}],"meta":{"line":27,"file":"MessageDeleteBulk.js","path":"src/client/actions"}},{"name":"messageReactionAdd","description":"Emitted whenever a reaction is added to a cached message.","params":[{"name":"messageReaction","description":"The reaction object","type":[[["MessageReaction"]]]},{"name":"user","description":"The user that applied the guild or reaction emoji","type":[[["User"]]]}],"meta":{"line":35,"file":"MessageReactionAdd.js","path":"src/client/actions"}},{"name":"messageReactionRemove","description":"Emitted whenever a reaction is removed from a cached message.","params":[{"name":"messageReaction","description":"The reaction object","type":[[["MessageReaction"]]]},{"name":"user","description":"The user whose emoji or reaction emoji was removed","type":[[["User"]]]}],"meta":{"line":32,"file":"MessageReactionRemove.js","path":"src/client/actions"}},{"name":"messageReactionRemoveAll","description":"Emitted whenever all reactions are removed from a cached message.","params":[{"name":"message","description":"The message the reactions were removed from","type":[[["Message"]]]}],"meta":{"line":23,"file":"MessageReactionRemoveAll.js","path":"src/client/actions"}},{"name":"presenceUpdate","description":"Emitted whenever a guild member's presence (e.g. status, activity) is changed.","params":[{"name":"oldPresence","description":"The presence before the update, if one at all","nullable":true,"type":[[["Presence"]]]},{"name":"newPresence","description":"The presence after the update","type":[[["Presence"]]]}],"meta":{"line":33,"file":"PresenceUpdate.js","path":"src/client/actions"}},{"name":"userUpdate","description":"Emitted whenever a user's details (e.g. username) are changed.","params":[{"name":"oldUser","description":"The user before the update","type":[[["User"]]]},{"name":"newUser","description":"The user after the update","type":[[["User"]]]}],"meta":{"line":14,"file":"UserUpdate.js","path":"src/client/actions"}},{"name":"voiceStateUpdate","description":"Emitted whenever a member changes voice state - e.g. joins/leaves a channel, mutes/unmutes.","params":[{"name":"oldState","description":"The voice state before the update","type":[[["VoiceState"]]]},{"name":"newState","description":"The voice state after the update","type":[[["VoiceState"]]]}],"meta":{"line":33,"file":"VoiceStateUpdate.js","path":"src/client/actions"}},{"name":"webhookUpdate","description":"Emitted whenever a guild text channel has its webhooks changed.","params":[{"name":"channel","description":"The channel that had a webhook update","type":[[["TextChannel"]]]}],"meta":{"line":10,"file":"WebhooksUpdate.js","path":"src/client/actions"}},{"name":"warn","description":"Emitted for general warnings.","params":[{"name":"info","description":"The warning","type":[[["string"]]]}],"meta":{"line":415,"file":"Client.js","path":"src/client"}},{"name":"debug","description":"Emitted for general debugging information.","params":[{"name":"info","description":"The debug information","type":[[["string"]]]}],"meta":{"line":421,"file":"Client.js","path":"src/client"}},{"name":"guildMemberSpeaking","description":"Emitted once a guild member changes speaking state.","params":[{"name":"member","description":"The member that started/stopped speaking","type":[[["GuildMember"]]]},{"name":"speaking","description":"The speaking state of the member","type":[[["Readonly","<"],["Speaking",">"]]]}],"meta":{"line":499,"file":"VoiceConnection.js","path":"src/client/voice"}},{"name":"channelPinsUpdate","description":"Emitted whenever the pins of a channel are updated. Due to the nature of the WebSocket event,\nnot much information can be provided easily here - you need to manually check the pins yourself.","params":[{"name":"channel","description":"The channel that the pins update occurred in","type":[[["DMChannel"]],[["TextChannel"]]]},{"name":"time","description":"The time of the pins update","type":[[["Date"]]]}],"meta":{"line":13,"file":"CHANNEL_PINS_UPDATE.js","path":"src/client/websocket/handlers"}},{"name":"channelUpdate","description":"Emitted whenever a channel is updated - e.g. name change, topic change, channel type change.","params":[{"name":"oldChannel","description":"The channel before the update","type":[[["DMChannel"]],[["GuildChannel"]]]},{"name":"newChannel","description":"The channel after the update","type":[[["DMChannel"]],[["GuildChannel"]]]}],"meta":{"line":8,"file":"CHANNEL_UPDATE.js","path":"src/client/websocket/handlers"}},{"name":"guildBanAdd","description":"Emitted whenever a member is banned from a guild.","params":[{"name":"guild","description":"The guild that the ban occurred in","type":[[["Guild"]]]},{"name":"user","description":"The user that was banned","type":[[["User"]]]}],"meta":{"line":9,"file":"GUILD_BAN_ADD.js","path":"src/client/websocket/handlers"}},{"name":"guildCreate","description":"Emitted whenever the client joins a guild.","params":[{"name":"guild","description":"The created guild","type":[[["Guild"]]]}],"meta":{"line":23,"file":"GUILD_CREATE.js","path":"src/client/websocket/handlers"}},{"name":"guildMemberAdd","description":"Emitted whenever a user joins a guild.","params":[{"name":"member","description":"The member that has joined a guild","type":[[["GuildMember"]]]}],"meta":{"line":11,"file":"GUILD_MEMBER_ADD.js","path":"src/client/websocket/handlers"}},{"name":"guildMemberUpdate","description":"Emitted whenever a guild member changes - i.e. new role, removed role, nickname.","params":[{"name":"oldMember","description":"The member before the update","type":[[["GuildMember"]]]},{"name":"newMember","description":"The member after the update","type":[[["GuildMember"]]]}],"meta":{"line":12,"file":"GUILD_MEMBER_UPDATE.js","path":"src/client/websocket/handlers"}},{"name":"guildMembersChunk","description":"Emitted whenever a chunk of guild members is received (all members come from the same guild).","params":[{"name":"members","description":"The members in the chunk","type":[[["Collection","<"],["Snowflake",", "],["GuildMember",">"]]]},{"name":"guild","description":"The guild related to the member chunk","type":[[["Guild"]]]}],"meta":{"line":12,"file":"GUILD_MEMBERS_CHUNK.js","path":"src/client/websocket/handlers"}},{"name":"messageUpdate","description":"Emitted whenever a message is updated - e.g. embed or content change.","params":[{"name":"oldMessage","description":"The message before the update","type":[[["Message"]]]},{"name":"newMessage","description":"The message after the update","type":[[["Message"]]]}],"meta":{"line":8,"file":"MESSAGE_UPDATE.js","path":"src/client/websocket/handlers"}},{"name":"shardResume","description":"Emitted when a shard resumes successfully.","params":[{"name":"id","description":"The shard ID that resumed","type":[[["number"]]]},{"name":"replayedEvents","description":"The amount of replayed events","type":[[["number"]]]}],"meta":{"line":7,"file":"RESUMED.js","path":"src/client/websocket/handlers"}},{"name":"typingStart","description":"Emitted whenever a user starts typing in a channel.","params":[{"name":"channel","description":"The channel the user started typing in","type":[[["Channel"]]]},{"name":"user","description":"The user that started typing","type":[[["User"]]]}],"meta":{"line":10,"file":"TYPING_START.js","path":"src/client/websocket/handlers"}},{"name":"shardReady","description":"Emitted when a shard turns ready.","params":[{"name":"id","description":"The shard ID that turned ready","type":[[["number"]]]},{"name":"unavailableGuilds","description":"Set of unavailable guild IDs, if any","nullable":true,"type":[[["Set","<"],["string",">"]]]}],"meta":{"line":195,"file":"WebSocketManager.js","path":"src/client/websocket"}},{"name":"shardDisconnect","description":"Emitted when a shard's WebSocket disconnects and will no longer reconnect.","params":[{"name":"event","description":"The WebSocket close event","type":[[["CloseEvent"]]]},{"name":"id","description":"The shard ID that disconnected","type":[[["number"]]]}],"meta":{"line":209,"file":"WebSocketManager.js","path":"src/client/websocket"}},{"name":"shardReconnecting","description":"Emitted when a shard is attempting to reconnect or re-identify.","params":[{"name":"id","description":"The shard ID that is attempting to reconnect","type":[[["number"]]]}],"meta":{"line":225,"file":"WebSocketManager.js","path":"src/client/websocket"}},{"name":"invalidated","description":"Emitted when the client's session becomes invalidated.\nYou are expected to handle closing the process gracefully and preventing a boot loop\nif you are listening to this event.","meta":{"line":307,"file":"WebSocketManager.js","path":"src/client/websocket"}},{"name":"ready","description":"Emitted when the client becomes ready to start working.","meta":{"line":434,"file":"WebSocketManager.js","path":"src/client/websocket"}},{"name":"shardError","description":"Emitted whenever a shard's WebSocket encounters a connection error.","params":[{"name":"error","description":"The encountered error","type":[[["Error"]]]},{"name":"shardID","description":"The shard that encountered this error","type":[[["number"]]]}],"meta":{"line":299,"file":"WebSocketShard.js","path":"src/client/websocket"}},{"name":"rateLimit","description":"Emitted when the client hits a rate limit while making a request","params":[{"name":"rateLimitInfo","description":"Object containing the rate limit info","type":[[["Object"]]]},{"name":"rateLimitInfo.timeout","description":"Timeout in ms","type":[[["number"]]]},{"name":"rateLimitInfo.limit","description":"Number of requests that can be made to this endpoint","type":[[["number"]]]},{"name":"rateLimitInfo.method","description":"HTTP method used for request that triggered this event","type":[[["string"]]]},{"name":"rateLimitInfo.path","description":"Path used for request that triggered this event","type":[[["string"]]]},{"name":"rateLimitInfo.route","description":"Route used for request that triggered this event","type":[[["string"]]]}],"meta":{"line":71,"file":"RequestHandler.js","path":"src/rest"}},{"name":"error","description":"Emitted when the client encounters an error.","params":[{"name":"error","description":"The error encountered","type":[[["Error"]]]}],"meta":{"line":185,"file":"ShardClientUtil.js","path":"src/sharding"}}],"meta":{"line":31,"file":"Client.js","path":"src/client"}},{"name":"ClientVoiceManager","description":"Manages voice connections for the client","props":[{"name":"client","description":"The client that instantiated this voice manager","readonly":true,"type":[[["Client"]]],"meta":{"line":13,"file":"ClientVoiceManager.js","path":"src/client/voice"}},{"name":"connections","description":"A collection mapping connection IDs to the Connection objects","type":[[["Collection","<"],["Snowflake",", "],["VoiceConnection",">"]]],"meta":{"line":25,"file":"ClientVoiceManager.js","path":"src/client/voice"}},{"name":"broadcasts","description":"Active voice broadcasts that have been created","type":[[["Array","<"],["VoiceBroadcast",">"]]],"meta":{"line":31,"file":"ClientVoiceManager.js","path":"src/client/voice"}}],"methods":[{"name":"createBroadcast","description":"Creates a voice broadcast.","returns":[[["VoiceBroadcast"]]],"meta":{"line":38,"file":"ClientVoiceManager.js","path":"src/client/voice"}},{"name":"joinChannel","description":"Sets up a request to join a voice channel.","access":"private","params":[{"name":"channel","description":"The voice channel to join","type":[[["VoiceChannel"]]]}],"returns":[[["Promise","<"],["VoiceConnection",">"]]],"meta":{"line":69,"file":"ClientVoiceManager.js","path":"src/client/voice"}}],"meta":{"line":12,"file":"ClientVoiceManager.js","path":"src/client/voice"}},{"name":"BroadcastDispatcher","description":"The class that sends voice packet data to the voice connection.","extends":[[["StreamDispatcher"]]],"implements":[[["VolumeInterface"]]],"props":[{"name":"player","description":"The Audio Player that controls this dispatcher","type":[[["AudioPlayer"]]],"meta":{"line":44,"file":"StreamDispatcher.js","path":"src/client/voice/dispatcher"}},{"name":"pausedSince","description":"The time that the stream was paused at (null if not paused)","nullable":true,"type":[[["number"]]],"meta":{"line":56,"file":"StreamDispatcher.js","path":"src/client/voice/dispatcher"}},{"name":"broadcast","description":"The broadcast controlling this dispatcher, if any","nullable":true,"type":[[["VoiceBroadcast"]]],"meta":{"line":63,"file":"StreamDispatcher.js","path":"src/client/voice/dispatcher"}},{"name":"paused","description":"Whether or not playback is paused","readonly":true,"type":[[["boolean"]]],"meta":{"line":151,"file":"StreamDispatcher.js","path":"src/client/voice/dispatcher"}},{"name":"pausedTime","description":"Total time that this dispatcher has been paused in milliseconds","readonly":true,"type":[[["number"]]],"meta":{"line":158,"file":"StreamDispatcher.js","path":"src/client/voice/dispatcher"}},{"name":"streamTime","description":"The time (in milliseconds) that the dispatcher has actually been playing audio for","readonly":true,"type":[[["number"]]],"meta":{"line":184,"file":"StreamDispatcher.js","path":"src/client/voice/dispatcher"}},{"name":"totalStreamTime","description":"The time (in milliseconds) that the dispatcher has been playing audio for, taking into account skips and pauses","readonly":true,"type":[[["number"]]],"meta":{"line":193,"file":"StreamDispatcher.js","path":"src/client/voice/dispatcher"}},{"name":"bitrateEditable","description":"Whether or not the Opus bitrate of this stream is editable","readonly":true,"type":[[["boolean"]]],"meta":{"line":328,"file":"StreamDispatcher.js","path":"src/client/voice/dispatcher"}},{"name":"volumeEditable","description":"Whether or not the volume of this stream is editable","readonly":true,"type":[[["boolean"]]],"meta":{"line":20,"file":"VolumeInterface.js","path":"src/client/voice/util"}},{"name":"volume","description":"The current volume of the stream","readonly":true,"type":[[["number"]]],"meta":{"line":29,"file":"VolumeInterface.js","path":"src/client/voice/util"}},{"name":"volumeDecibels","description":"The current volume of the stream in decibels","readonly":true,"type":[[["number"]]],"meta":{"line":38,"file":"VolumeInterface.js","path":"src/client/voice/util"}},{"name":"volumeLogarithmic","description":"The current volume of the stream from a logarithmic scale","readonly":true,"type":[[["number"]]],"meta":{"line":47,"file":"VolumeInterface.js","path":"src/client/voice/util"}}],"methods":[{"name":"setBitrate","description":"Set the bitrate of the current Opus encoder if using a compatible Opus stream.","params":[{"name":"value","description":"New bitrate, in kbps\nIf set to 'auto', 48kbps will be used","type":[[["number"]]]}],"returns":{"types":[[["boolean"]]],"description":"true if the bitrate has been successfully changed."},"meta":{"line":38,"file":"BroadcastDispatcher.js","path":"src/client/voice/dispatcher"}},{"name":"pause","description":"Pauses playback","inherits":"StreamDispatcher#pause","inherited":true,"params":[{"name":"silence","description":"Whether to play silence while paused to prevent audio glitches","optional":true,"default":false,"type":[[["boolean"]]]}],"meta":{"line":134,"file":"StreamDispatcher.js","path":"src/client/voice/dispatcher"}},{"name":"resume","description":"Resumes playback","inherits":"StreamDispatcher#resume","inherited":true,"meta":{"line":165,"file":"StreamDispatcher.js","path":"src/client/voice/dispatcher"}},{"name":"setPLP","description":"Sets the expected packet loss percentage if using a compatible Opus stream.","inherits":"StreamDispatcher#setPLP","inherited":true,"params":[{"name":"value","description":"between 0 and 1","type":[[["number"]]]}],"returns":{"types":[[["boolean"]]],"description":"Returns true if it was successfully set."},"meta":{"line":215,"file":"StreamDispatcher.js","path":"src/client/voice/dispatcher"}},{"name":"setFEC","description":"Enables or disables forward error correction if using a compatible Opus stream.","inherits":"StreamDispatcher#setFEC","inherited":true,"params":[{"name":"enabled","description":"true to enable","type":[[["boolean"]]]}],"returns":{"types":[[["boolean"]]],"description":"Returns true if it was successfully set."},"meta":{"line":226,"file":"StreamDispatcher.js","path":"src/client/voice/dispatcher"}},{"name":"setVolume","description":"Sets the volume relative to the input stream - i.e. 1 is normal, 0.5 is half, 2 is double.","inherits":"StreamDispatcher#setVolume","inherited":true,"implements":["VolumeInterface#setVolume"],"params":[{"name":"volume","description":"The volume that you want to set","type":[[["number"]]]}],"meta":{"line":69,"file":"VolumeInterface.js","path":"src/client/voice/util"}},{"name":"setVolumeDecibels","description":"Sets the volume in decibels.","inherits":"StreamDispatcher#setVolumeDecibels","inherited":true,"implements":["VolumeInterface#setVolumeDecibels"],"params":[{"name":"db","description":"The decibels","type":[[["number"]]]}],"meta":{"line":84,"file":"VolumeInterface.js","path":"src/client/voice/util"}},{"name":"setVolumeLogarithmic","description":"Sets the volume so that a perceived value of 0.5 is half the perceived volume etc.","inherits":"StreamDispatcher#setVolumeLogarithmic","inherited":true,"implements":["VolumeInterface#setVolumeLogarithmic"],"params":[{"name":"value","description":"The value for the volume","type":[[["number"]]]}],"meta":{"line":92,"file":"VolumeInterface.js","path":"src/client/voice/util"}}],"events":[{"name":"error","description":"Emitted when the dispatcher encounters an error.","meta":{"line":82,"file":"StreamDispatcher.js","path":"src/client/voice/dispatcher"}},{"name":"start","description":"Emitted once the stream has started to play.","meta":{"line":106,"file":"StreamDispatcher.js","path":"src/client/voice/dispatcher"}},{"name":"debug","description":"Emitted whenever the dispatcher has debug information.","params":[{"name":"info","description":"The debug info","type":[[["string"]]]}],"meta":{"line":292,"file":"StreamDispatcher.js","path":"src/client/voice/dispatcher"}},{"name":"speaking","description":"Emitted when the dispatcher starts/stops speaking.","params":[{"name":"value","description":"Whether or not the dispatcher is speaking","type":[[["boolean"]]]}],"meta":{"line":313,"file":"StreamDispatcher.js","path":"src/client/voice/dispatcher"}},{"name":"volumeChange","description":"Emitted when the volume of this dispatcher changes.","params":[{"name":"oldVolume","description":"The old volume of this dispatcher","type":[[["number"]]]},{"name":"newVolume","description":"The new volume of this dispatcher","type":[[["number"]]]}],"meta":{"line":337,"file":"StreamDispatcher.js","path":"src/client/voice/dispatcher"}}],"meta":{"line":11,"file":"BroadcastDispatcher.js","path":"src/client/voice/dispatcher"}},{"name":"StreamDispatcher","description":"The class that sends voice packet data to the voice connection.\n```js\n// Obtained using:\nvoiceChannel.join().then(connection => {\n  // You can play a file or a stream here:\n  const dispatcher = connection.play('/home/hydrabolt/audio.mp3');\n});\n```","extends":[[["WritableStream"]]],"implements":[[["VolumeInterface"]]],"props":[{"name":"player","description":"The Audio Player that controls this dispatcher","type":[[["AudioPlayer"]]],"meta":{"line":44,"file":"StreamDispatcher.js","path":"src/client/voice/dispatcher"}},{"name":"pausedSince","description":"The time that the stream was paused at (null if not paused)","nullable":true,"type":[[["number"]]],"meta":{"line":56,"file":"StreamDispatcher.js","path":"src/client/voice/dispatcher"}},{"name":"broadcast","description":"The broadcast controlling this dispatcher, if any","nullable":true,"type":[[["VoiceBroadcast"]]],"meta":{"line":63,"file":"StreamDispatcher.js","path":"src/client/voice/dispatcher"}},{"name":"paused","description":"Whether or not playback is paused","readonly":true,"type":[[["boolean"]]],"meta":{"line":151,"file":"StreamDispatcher.js","path":"src/client/voice/dispatcher"}},{"name":"pausedTime","description":"Total time that this dispatcher has been paused in milliseconds","readonly":true,"type":[[["number"]]],"meta":{"line":158,"file":"StreamDispatcher.js","path":"src/client/voice/dispatcher"}},{"name":"streamTime","description":"The time (in milliseconds) that the dispatcher has actually been playing audio for","readonly":true,"type":[[["number"]]],"meta":{"line":184,"file":"StreamDispatcher.js","path":"src/client/voice/dispatcher"}},{"name":"totalStreamTime","description":"The time (in milliseconds) that the dispatcher has been playing audio for, taking into account skips and pauses","readonly":true,"type":[[["number"]]],"meta":{"line":193,"file":"StreamDispatcher.js","path":"src/client/voice/dispatcher"}},{"name":"bitrateEditable","description":"Whether or not the Opus bitrate of this stream is editable","readonly":true,"type":[[["boolean"]]],"meta":{"line":328,"file":"StreamDispatcher.js","path":"src/client/voice/dispatcher"}},{"name":"volumeEditable","description":"Whether or not the volume of this stream is editable","readonly":true,"type":[[["boolean"]]],"meta":{"line":20,"file":"VolumeInterface.js","path":"src/client/voice/util"}},{"name":"volume","description":"The current volume of the stream","readonly":true,"type":[[["number"]]],"meta":{"line":29,"file":"VolumeInterface.js","path":"src/client/voice/util"}},{"name":"volumeDecibels","description":"The current volume of the stream in decibels","readonly":true,"type":[[["number"]]],"meta":{"line":38,"file":"VolumeInterface.js","path":"src/client/voice/util"}},{"name":"volumeLogarithmic","description":"The current volume of the stream from a logarithmic scale","readonly":true,"type":[[["number"]]],"meta":{"line":47,"file":"VolumeInterface.js","path":"src/client/voice/util"}}],"methods":[{"name":"pause","description":"Pauses playback","params":[{"name":"silence","description":"Whether to play silence while paused to prevent audio glitches","optional":true,"default":false,"type":[[["boolean"]]]}],"meta":{"line":134,"file":"StreamDispatcher.js","path":"src/client/voice/dispatcher"}},{"name":"resume","description":"Resumes playback","meta":{"line":165,"file":"StreamDispatcher.js","path":"src/client/voice/dispatcher"}},{"name":"setBitrate","description":"Set the bitrate of the current Opus encoder if using a compatible Opus stream.","params":[{"name":"value","description":"New bitrate, in kbps\nIf set to 'auto', the voice channel's bitrate will be used","type":[[["number"]]]}],"returns":{"types":[[["boolean"]]],"description":"true if the bitrate has been successfully changed."},"meta":{"line":203,"file":"StreamDispatcher.js","path":"src/client/voice/dispatcher"}},{"name":"setPLP","description":"Sets the expected packet loss percentage if using a compatible Opus stream.","params":[{"name":"value","description":"between 0 and 1","type":[[["number"]]]}],"returns":{"types":[[["boolean"]]],"description":"Returns true if it was successfully set."},"meta":{"line":215,"file":"StreamDispatcher.js","path":"src/client/voice/dispatcher"}},{"name":"setFEC","description":"Enables or disables forward error correction if using a compatible Opus stream.","params":[{"name":"enabled","description":"true to enable","type":[[["boolean"]]]}],"returns":{"types":[[["boolean"]]],"description":"Returns true if it was successfully set."},"meta":{"line":226,"file":"StreamDispatcher.js","path":"src/client/voice/dispatcher"}},{"name":"setVolume","description":"Sets the volume relative to the input stream - i.e. 1 is normal, 0.5 is half, 2 is double.","implements":["VolumeInterface#setVolume"],"params":[{"name":"volume","description":"The volume that you want to set","type":[[["number"]]]}],"meta":{"line":69,"file":"VolumeInterface.js","path":"src/client/voice/util"}},{"name":"setVolumeDecibels","description":"Sets the volume in decibels.","implements":["VolumeInterface#setVolumeDecibels"],"params":[{"name":"db","description":"The decibels","type":[[["number"]]]}],"meta":{"line":84,"file":"VolumeInterface.js","path":"src/client/voice/util"}},{"name":"setVolumeLogarithmic","description":"Sets the volume so that a perceived value of 0.5 is half the perceived volume etc.","implements":["VolumeInterface#setVolumeLogarithmic"],"params":[{"name":"value","description":"The value for the volume","type":[[["number"]]]}],"meta":{"line":92,"file":"VolumeInterface.js","path":"src/client/voice/util"}}],"events":[{"name":"error","description":"Emitted when the dispatcher encounters an error.","meta":{"line":82,"file":"StreamDispatcher.js","path":"src/client/voice/dispatcher"}},{"name":"start","description":"Emitted once the stream has started to play.","meta":{"line":106,"file":"StreamDispatcher.js","path":"src/client/voice/dispatcher"}},{"name":"debug","description":"Emitted whenever the dispatcher has debug information.","params":[{"name":"info","description":"The debug info","type":[[["string"]]]}],"meta":{"line":292,"file":"StreamDispatcher.js","path":"src/client/voice/dispatcher"}},{"name":"speaking","description":"Emitted when the dispatcher starts/stops speaking.","params":[{"name":"value","description":"Whether or not the dispatcher is speaking","type":[[["boolean"]]]}],"meta":{"line":313,"file":"StreamDispatcher.js","path":"src/client/voice/dispatcher"}},{"name":"volumeChange","description":"Emitted when the volume of this dispatcher changes.","params":[{"name":"oldVolume","description":"The old volume of this dispatcher","type":[[["number"]]]},{"name":"newVolume","description":"The new volume of this dispatcher","type":[[["number"]]]}],"meta":{"line":337,"file":"StreamDispatcher.js","path":"src/client/voice/dispatcher"}}],"meta":{"line":34,"file":"StreamDispatcher.js","path":"src/client/voice/dispatcher"}},{"name":"VoiceConnectionUDPClient","description":"Represents a UDP client for a Voice Connection.","extends":[[["EventEmitter"]]],"access":"private","props":[{"name":"voiceConnection","description":"The voice connection that this UDP client serves","type":[[["VoiceConnection"]]],"meta":{"line":21,"file":"VoiceUDPClient.js","path":"src/client/voice/networking"}},{"name":"socket","description":"The UDP socket","nullable":true,"type":[[["Socket"]]],"meta":{"line":27,"file":"VoiceUDPClient.js","path":"src/client/voice/networking"}},{"name":"discordAddress","description":"The address of the Discord voice server","nullable":true,"type":[[["string"]]],"meta":{"line":33,"file":"VoiceUDPClient.js","path":"src/client/voice/networking"}},{"name":"localAddress","description":"The local IP address","nullable":true,"type":[[["string"]]],"meta":{"line":39,"file":"VoiceUDPClient.js","path":"src/client/voice/networking"}},{"name":"localPort","description":"The local port","nullable":true,"type":[[["string"]]],"meta":{"line":45,"file":"VoiceUDPClient.js","path":"src/client/voice/networking"}},{"name":"discordPort","description":"The port of the Discord voice server","readonly":true,"type":[[["number"]]],"meta":{"line":67,"file":"VoiceUDPClient.js","path":"src/client/voice/networking"}}],"methods":[{"name":"send","description":"Send a packet to the UDP client.","params":[{"name":"packet","description":"The packet to send","type":[[["Object"]]]}],"returns":[[["Promise","<"],["Object",">"]]],"meta":{"line":76,"file":"VoiceUDPClient.js","path":"src/client/voice/networking"}}],"meta":{"line":14,"file":"VoiceUDPClient.js","path":"src/client/voice/networking"}},{"name":"VoiceWebSocket","description":"Represents a Voice Connection's WebSocket.","extends":[[["EventEmitter"]]],"access":"private","props":[{"name":"connection","description":"The Voice Connection that this WebSocket serves","type":[[["VoiceConnection"]]],"meta":{"line":20,"file":"VoiceWebSocket.js","path":"src/client/voice/networking"}},{"name":"attempts","description":"How many connection attempts have been made","type":[[["number"]]],"meta":{"line":26,"file":"VoiceWebSocket.js","path":"src/client/voice/networking"}},{"name":"client","description":"The client of this voice WebSocket","readonly":true,"type":[[["Client"]]],"meta":{"line":37,"file":"VoiceWebSocket.js","path":"src/client/voice/networking"}},{"name":"ws","description":"The actual WebSocket used to connect to the Voice WebSocket Server.","type":[[["WebSocket"]]],"meta":{"line":77,"file":"VoiceWebSocket.js","path":"src/client/voice/networking"}}],"methods":[{"name":"reset","description":"Resets the current WebSocket.","meta":{"line":50,"file":"VoiceWebSocket.js","path":"src/client/voice/networking"}},{"name":"connect","description":"Starts connecting to the Voice WebSocket Server.","meta":{"line":62,"file":"VoiceWebSocket.js","path":"src/client/voice/networking"}},{"name":"send","description":"Sends data to the WebSocket if it is open.","params":[{"name":"data","description":"The data to send to the WebSocket","type":[[["string"]]]}],"returns":[[["Promise","<"],["string",">"]]],"meta":{"line":90,"file":"VoiceWebSocket.js","path":"src/client/voice/networking"}},{"name":"sendPacket","description":"JSON.stringify's a packet and then sends it to the WebSocket Server.","params":[{"name":"packet","description":"The packet to send","type":[[["Object"]]]}],"returns":[[["Promise","<"],["string",">"]]],"meta":{"line":105,"file":"VoiceWebSocket.js","path":"src/client/voice/networking"}},{"name":"onOpen","description":"Called whenever the WebSocket opens.","meta":{"line":117,"file":"VoiceWebSocket.js","path":"src/client/voice/networking"}},{"name":"onMessage","description":"Called whenever a message is received from the WebSocket.","params":[{"name":"event","description":"The message event that was received","type":[[["MessageEvent"]]]}],"returns":[[["void"]]],"meta":{"line":137,"file":"VoiceWebSocket.js","path":"src/client/voice/networking"}},{"name":"onClose","description":"Called whenever the connection to the WebSocket server is lost.","meta":{"line":148,"file":"VoiceWebSocket.js","path":"src/client/voice/networking"}},{"name":"onError","description":"Called whenever an error occurs with the WebSocket.","params":[{"name":"error","description":"The error that occurred","type":[[["Error"]]]}],"meta":{"line":157,"file":"VoiceWebSocket.js","path":"src/client/voice/networking"}},{"name":"onPacket","description":"Called whenever a valid packet is received from the WebSocket.","params":[{"name":"packet","description":"The received packet","type":[[["Object"]]]}],"meta":{"line":166,"file":"VoiceWebSocket.js","path":"src/client/voice/networking"}},{"name":"setHeartbeat","description":"Sets an interval at which to send a heartbeat packet to the WebSocket.","params":[{"name":"interval","description":"The interval at which to send a heartbeat packet","type":[[["number"]]]}],"meta":{"line":223,"file":"VoiceWebSocket.js","path":"src/client/voice/networking"}},{"name":"clearHeartbeat","description":"Clears a heartbeat interval, if one exists.","meta":{"line":243,"file":"VoiceWebSocket.js","path":"src/client/voice/networking"}},{"name":"sendHeartbeat","description":"Sends a heartbeat packet.","meta":{"line":255,"file":"VoiceWebSocket.js","path":"src/client/voice/networking"}}],"events":[{"name":"ready","description":"Emitted once the voice WebSocket receives the ready packet.","params":[{"name":"packet","description":"The received packet","type":[[["Object"]]]}],"meta":{"line":173,"file":"VoiceWebSocket.js","path":"src/client/voice/networking"}},{"name":"sessionDescription","description":"Emitted once the Voice Websocket receives a description of this voice session.","params":[{"name":"packet","description":"The received packet","type":[[["Object"]]]}],"meta":{"line":183,"file":"VoiceWebSocket.js","path":"src/client/voice/networking"}},{"name":"startSpeaking","description":"Emitted whenever a speaking packet is received.","params":[{"name":"data","type":[[["Object"]]]}],"meta":{"line":201,"file":"VoiceWebSocket.js","path":"src/client/voice/networking"}},{"name":"unknownPacket","description":"Emitted when an unhandled packet is received.","params":[{"name":"packet","type":[[["Object"]]]}],"meta":{"line":209,"file":"VoiceWebSocket.js","path":"src/client/voice/networking"}},{"name":"warn","description":"Emitted whenever the voice WebSocket encounters a non-fatal error.","params":[{"name":"warn","description":"The warning","type":[[["string"]]]}],"meta":{"line":229,"file":"VoiceWebSocket.js","path":"src/client/voice/networking"}}],"meta":{"line":14,"file":"VoiceWebSocket.js","path":"src/client/voice/networking"}},{"name":"AudioPlayer","description":"An Audio Player for a Voice Connection.","extends":[[["BasePlayer"]]],"access":"private","props":[{"name":"voiceConnection","description":"The voice connection that the player serves","type":[[["VoiceConnection"]]],"meta":{"line":17,"file":"AudioPlayer.js","path":"src/client/voice/player"}},{"name":"broadcast","description":"The broadcast that the player serves","type":[[["VoiceBroadcast"]]],"meta":{"line":18,"file":"BroadcastAudioPlayer.js","path":"src/client/voice/player"}}],"meta":{"line":12,"file":"BroadcastAudioPlayer.js","path":"src/client/voice/player"}},{"name":"BasePlayer","description":"An Audio Player for a Voice Connection.","extends":[[["EventEmitter"]]],"access":"private","meta":{"line":22,"file":"BasePlayer.js","path":"src/client/voice/player"}},{"name":"VoiceReceiver","description":"Receives audio packets from a voice connection.","methods":[{"name":"createStream","description":"Creates a new audio receiving stream. If a stream already exists for a user, then that stream will be returned\nrather than generating a new one.","params":[{"name":"user","description":"The user to start listening to.","type":[[["UserResolvable"]]]},{"name":"options","description":"Options.","type":[[["ReceiveStreamOptions"]]]}],"returns":[[["ReadableStream"]]],"meta":{"line":45,"file":"Receiver.js","path":"src/client/voice/receiver"}}],"events":[{"name":"debug","description":"Emitted whenever there is a warning","params":[{"name":"error","description":"The error or message to debug","type":[[["Error"]],[["string"]]]}],"meta":{"line":20,"file":"Receiver.js","path":"src/client/voice/receiver"}}],"meta":{"line":16,"file":"Receiver.js","path":"src/client/voice/receiver"}},{"name":"PlayInterface","description":"An interface class to allow you to play audio over VoiceConnections and VoiceBroadcasts.","methods":[{"name":"play","description":"Play an audio resource.","examples":["// Play a local audio file\nconnection.play('/home/hydrabolt/audio.mp3', { volume: 0.5 });","// Play a ReadableStream\nconnection.play(ytdl('https://www.youtube.com/watch?v=ZlAU_w7-Xp8', { quality: 'highestaudio' }));","// Play a voice broadcast\nconst broadcast = client.createVoiceBroadcast();\nbroadcast.play('/home/hydrabolt/audio.mp3');\nconnection.play(broadcast);","// Using different protocols: https://ffmpeg.org/ffmpeg-protocols.html\nconnection.play('http://www.sample-videos.com/audio/mp3/wave.mp3');"],"params":[{"name":"resource","description":"The resource to play.","type":[[["VoiceBroadcast"]],[["ReadableStream"]],[["string"]]]},{"name":"options","description":"The options to play.","optional":true,"type":[[["StreamOptions"]]]}],"returns":[[["StreamDispatcher"]]],"meta":{"line":62,"file":"PlayInterface.js","path":"src/client/voice/util"}}],"meta":{"line":38,"file":"PlayInterface.js","path":"src/client/voice/util"}},{"name":"VolumeInterface","description":"An interface class for volume transformation.","extends":[[["EventEmitter"]]],"props":[{"name":"volumeEditable","description":"Whether or not the volume of this stream is editable","readonly":true,"type":[[["boolean"]]],"meta":{"line":20,"file":"VolumeInterface.js","path":"src/client/voice/util"}},{"name":"volume","description":"The current volume of the stream","readonly":true,"type":[[["number"]]],"meta":{"line":29,"file":"VolumeInterface.js","path":"src/client/voice/util"}},{"name":"volumeDecibels","description":"The current volume of the stream in decibels","readonly":true,"type":[[["number"]]],"meta":{"line":38,"file":"VolumeInterface.js","path":"src/client/voice/util"}},{"name":"volumeLogarithmic","description":"The current volume of the stream from a logarithmic scale","readonly":true,"type":[[["number"]]],"meta":{"line":47,"file":"VolumeInterface.js","path":"src/client/voice/util"}}],"methods":[{"name":"setVolume","description":"Sets the volume relative to the input stream - i.e. 1 is normal, 0.5 is half, 2 is double.","params":[{"name":"volume","description":"The volume that you want to set","type":[[["number"]]]}],"meta":{"line":69,"file":"VolumeInterface.js","path":"src/client/voice/util"}},{"name":"setVolumeDecibels","description":"Sets the volume in decibels.","params":[{"name":"db","description":"The decibels","type":[[["number"]]]}],"meta":{"line":84,"file":"VolumeInterface.js","path":"src/client/voice/util"}},{"name":"setVolumeLogarithmic","description":"Sets the volume so that a perceived value of 0.5 is half the perceived volume etc.","params":[{"name":"value","description":"The value for the volume","type":[[["number"]]]}],"meta":{"line":92,"file":"VolumeInterface.js","path":"src/client/voice/util"}}],"events":[{"name":"volumeChange","description":"Emitted when the volume of this interface changes.","params":[{"name":"oldVolume","description":"The old volume of this interface","type":[[["number"]]]},{"name":"newVolume","description":"The new volume of this interface","type":[[["number"]]]}],"meta":{"line":70,"file":"VolumeInterface.js","path":"src/client/voice/util"}}],"meta":{"line":10,"file":"VolumeInterface.js","path":"src/client/voice/util"}},{"name":"VoiceBroadcast","description":"A voice broadcast can be played across multiple voice connections for improved shared-stream efficiency.\n\nExample usage:\n```js\nconst broadcast = client.voice.createBroadcast();\nbroadcast.play('./music.mp3');\n// Play \"music.mp3\" in all voice connections that the client is in\nfor (const connection of client.voice.connections.values()) {\n  connection.play(broadcast);\n}\n```","implements":[[["PlayInterface"]]],"props":[{"name":"client","description":"The client that created the broadcast","type":[[["Client"]]],"meta":{"line":29,"file":"VoiceBroadcast.js","path":"src/client/voice"}},{"name":"subscribers","description":"The subscribed StreamDispatchers of this broadcast","type":[[["Array","<"],["StreamDispatcher",">"]]],"meta":{"line":34,"file":"VoiceBroadcast.js","path":"src/client/voice"}},{"name":"dispatcher","description":"The current master dispatcher, if any. This dispatcher controls all that is played by subscribed dispatchers.","readonly":true,"nullable":true,"type":[[["BroadcastDispatcher"]]],"meta":{"line":43,"file":"VoiceBroadcast.js","path":"src/client/voice"}}],"methods":[{"name":"play","description":"Play an audio resource.","implements":["PlayInterface#play"],"examples":["// Play a local audio file\nbroadcast.play('/home/hydrabolt/audio.mp3', { volume: 0.5 });","// Play a ReadableStream\nbroadcast.play(ytdl('https://www.youtube.com/watch?v=ZlAU_w7-Xp8', { filter: 'audioonly' }));","// Using different protocols: https://ffmpeg.org/ffmpeg-protocols.html\nbroadcast.play('http://www.sample-videos.com/audio/mp3/wave.mp3');"],"params":[{"name":"resource","description":"The resource to play.","type":[[["ReadableStream"]],[["string"]]]},{"name":"options","description":"The options to play.","optional":true,"type":[[["StreamOptions"]]]}],"returns":[[["BroadcastDispatcher"]]],"meta":{"line":62,"file":"VoiceBroadcast.js","path":"src/client/voice"}},{"name":"end","description":"Ends the broadcast, unsubscribing all subscribed channels and deleting the broadcast","meta":{"line":68,"file":"VoiceBroadcast.js","path":"src/client/voice"}}],"events":[{"name":"subscribe","description":"Emitted whenever a stream dispatcher subscribes to the broadcast.","params":[{"name":"subscriber","description":"The subscribed dispatcher","type":[[["StreamDispatcher"]]]}],"meta":{"line":78,"file":"VoiceBroadcast.js","path":"src/client/voice"}},{"name":"unsubscribe","description":"Emitted whenever a stream dispatcher unsubscribes to the broadcast.","params":[{"name":"dispatcher","description":"The unsubscribed dispatcher","type":[[["StreamDispatcher"]]]}],"meta":{"line":95,"file":"VoiceBroadcast.js","path":"src/client/voice"}}],"meta":{"line":23,"file":"VoiceBroadcast.js","path":"src/client/voice"}},{"name":"VoiceConnection","description":"Represents a connection to a guild's voice server.\n```js\n// Obtained using:\nvoiceChannel.join()\n  .then(connection => {\n\n  });\n```","extends":[[["EventEmitter"]]],"implements":[[["PlayInterface"]]],"props":[{"name":"voiceManager","description":"The voice manager that instantiated this connection","type":[[["ClientVoiceManager"]]],"meta":{"line":49,"file":"VoiceConnection.js","path":"src/client/voice"}},{"name":"channel","description":"The voice channel this connection is currently serving","type":[[["VoiceChannel"]]],"meta":{"line":55,"file":"VoiceConnection.js","path":"src/client/voice"}},{"name":"status","description":"The current status of the voice connection","type":[[["VoiceStatus"]]],"meta":{"line":61,"file":"VoiceConnection.js","path":"src/client/voice"}},{"name":"speaking","description":"Our current speaking state","type":[[["Readonly","<"],["Speaking",">"]]],"meta":{"line":67,"file":"VoiceConnection.js","path":"src/client/voice"}},{"name":"authentication","description":"The authentication data needed to connect to the voice server","access":"private","type":[[["Object"]]],"meta":{"line":74,"file":"VoiceConnection.js","path":"src/client/voice"}},{"name":"player","description":"The audio player for this voice connection","type":[[["AudioPlayer"]]],"meta":{"line":80,"file":"VoiceConnection.js","path":"src/client/voice"}},{"name":"ssrcMap","description":"Map SSRC values to user IDs","access":"private","type":[[["Map","<"],["number",", "],["Snowflake",">"]]],"meta":{"line":107,"file":"VoiceConnection.js","path":"src/client/voice"}},{"name":"_speaking","description":"Tracks which users are talking","access":"private","type":[[["Map","<"],["Snowflake",", "],["Readonly","<"],["Speaking",">>"]]],"meta":{"line":114,"file":"VoiceConnection.js","path":"src/client/voice"}},{"name":"sockets","description":"Object that wraps contains the `ws` and `udp` sockets of this voice connection","access":"private","type":[[["Object"]]],"meta":{"line":121,"file":"VoiceConnection.js","path":"src/client/voice"}},{"name":"receiver","description":"The voice receiver of this connection","type":[[["VoiceReceiver"]]],"meta":{"line":127,"file":"VoiceConnection.js","path":"src/client/voice"}},{"name":"client","description":"The client that instantiated this connection","readonly":true,"type":[[["Client"]]],"meta":{"line":135,"file":"VoiceConnection.js","path":"src/client/voice"}},{"name":"dispatcher","description":"The current stream dispatcher (if any)","readonly":true,"nullable":true,"type":[[["StreamDispatcher"]]],"meta":{"line":144,"file":"VoiceConnection.js","path":"src/client/voice"}},{"name":"voice","description":"The voice state of this connection","type":[[["VoiceState"]]],"meta":{"line":173,"file":"VoiceConnection.js","path":"src/client/voice"}}],"methods":[{"name":"setSpeaking","description":"Sets whether the voice connection should display as \"speaking\", \"soundshare\" or \"none\".","access":"private","params":[{"name":"value","description":"The new speaking state","type":[[["BitFieldResolvable"]]]}],"meta":{"line":153,"file":"VoiceConnection.js","path":"src/client/voice"}},{"name":"sendVoiceStateUpdate","description":"Sends a request to the main gateway to join a voice channel.","access":"private","params":[{"name":"options","description":"The options to provide","optional":true,"type":[[["Object"]]]}],"returns":[[["Promise","<"],["Shard",">"]]],"meta":{"line":183,"file":"VoiceConnection.js","path":"src/client/voice"}},{"name":"setTokenAndEndpoint","description":"Set the token and endpoint required to connect to the voice servers.","access":"private","params":[{"name":"token","description":"The voice token","type":[[["string"]]]},{"name":"endpoint","description":"The voice endpoint","type":[[["string"]]]}],"returns":[[["void"]]],"meta":{"line":206,"file":"VoiceConnection.js","path":"src/client/voice"}},{"name":"setSessionID","description":"Sets the Session ID for the connection.","access":"private","params":[{"name":"sessionID","description":"The voice session ID","type":[[["string"]]]}],"meta":{"line":240,"file":"VoiceConnection.js","path":"src/client/voice"}},{"name":"checkAuthenticated","description":"Checks whether the voice connection is authenticated.","access":"private","meta":{"line":265,"file":"VoiceConnection.js","path":"src/client/voice"}},{"name":"authenticateFailed","description":"Invoked when we fail to initiate a voice connection.","access":"private","params":[{"name":"reason","description":"The reason for failure","type":[[["string"]]]}],"meta":{"line":284,"file":"VoiceConnection.js","path":"src/client/voice"}},{"name":"updateChannel","description":"Move to a different voice channel in the same guild.","access":"private","params":[{"name":"channel","description":"The channel to move to","type":[[["VoiceChannel"]]]}],"meta":{"line":310,"file":"VoiceConnection.js","path":"src/client/voice"}},{"name":"authenticate","description":"Attempts to authenticate to the voice server.","access":"private","meta":{"line":319,"file":"VoiceConnection.js","path":"src/client/voice"}},{"name":"reconnect","description":"Attempts to reconnect to the voice server (typically after a region change).","access":"private","params":[{"name":"token","description":"The voice token","type":[[["string"]]]},{"name":"endpoint","description":"The voice endpoint","type":[[["string"]]]}],"meta":{"line":331,"file":"VoiceConnection.js","path":"src/client/voice"}},{"name":"disconnect","description":"Disconnects the voice connection, causing a disconnect and closing event to be emitted.","meta":{"line":348,"file":"VoiceConnection.js","path":"src/client/voice"}},{"name":"_disconnect","description":"Internally disconnects (doesn't send disconnect packet).","access":"private","meta":{"line":364,"file":"VoiceConnection.js","path":"src/client/voice"}},{"name":"cleanup","description":"Cleans up after disconnect.","access":"private","meta":{"line":379,"file":"VoiceConnection.js","path":"src/client/voice"}},{"name":"connect","description":"Connect the voice connection.","access":"private","meta":{"line":404,"file":"VoiceConnection.js","path":"src/client/voice"}},{"name":"onReady","description":"Invoked when the voice websocket is ready.","access":"private","params":[{"name":"data","description":"The received data","type":[[["Object"]]]}],"meta":{"line":435,"file":"VoiceConnection.js","path":"src/client/voice"}},{"name":"onSessionDescription","description":"Invoked when a session description is received.","access":"private","params":[{"name":"data","description":"The received data","type":[[["Object"]]]}],"meta":{"line":452,"file":"VoiceConnection.js","path":"src/client/voice"}},{"name":"onSpeaking","description":"Invoked when a speaking event is received.","access":"private","params":[{"name":"data","description":"The received data","type":[[["Object"]]]}],"meta":{"line":477,"file":"VoiceConnection.js","path":"src/client/voice"}},{"name":"play","description":"Play an audio resource.","implements":["PlayInterface#play"],"examples":["// Play a local audio file\nconnection.play('/home/hydrabolt/audio.mp3', { volume: 0.5 });","// Play a ReadableStream\nconnection.play(ytdl('https://www.youtube.com/watch?v=ZlAU_w7-Xp8', { quality: 'highestaudio' }));","// Play a voice broadcast\nconst broadcast = client.createVoiceBroadcast();\nbroadcast.play('/home/hydrabolt/audio.mp3');\nconnection.play(broadcast);","// Using different protocols: https://ffmpeg.org/ffmpeg-protocols.html\nconnection.play('http://www.sample-videos.com/audio/mp3/wave.mp3');"],"params":[{"name":"resource","description":"The resource to play.","type":[[["VoiceBroadcast"]],[["ReadableStream"]],[["string"]]]},{"name":"options","description":"The options to play.","optional":true,"type":[[["StreamOptions"]]]}],"returns":[[["StreamDispatcher"]]],"meta":{"line":62,"file":"PlayInterface.js","path":"src/client/voice/util"}}],"events":[{"name":"debug","description":"Debug info from the connection.","params":[{"name":"message","description":"The debug message","type":[[["string"]]]}],"meta":{"line":83,"file":"VoiceConnection.js","path":"src/client/voice"}},{"name":"warn","description":"Warning info from the connection.","params":[{"name":"warning","description":"The warning","type":[[["string"]],[["Error"]]]}],"meta":{"line":92,"file":"VoiceConnection.js","path":"src/client/voice"}},{"name":"newSession","description":"Emitted when a new session ID is received.","meta":{"line":252,"file":"VoiceConnection.js","path":"src/client/voice"}},{"name":"authenticated","description":"Emitted when we successfully initiate a voice connection.","meta":{"line":270,"file":"VoiceConnection.js","path":"src/client/voice"}},{"name":"failed","description":"Emitted when we fail to initiate a voice connection.","params":[{"name":"error","description":"The encountered error","type":[[["Error"]]]}],"meta":{"line":288,"file":"VoiceConnection.js","path":"src/client/voice"}},{"name":"error","description":"Emitted whenever the connection encounters an error.","params":[{"name":"error","description":"The encountered error","type":[[["Error"]]]}],"meta":{"line":295,"file":"VoiceConnection.js","path":"src/client/voice"}},{"name":"reconnecting","description":"Emitted when the voice connection is reconnecting (typically after a region change).","meta":{"line":337,"file":"VoiceConnection.js","path":"src/client/voice"}},{"name":"disconnect","description":"Emitted when the voice connection disconnects.","meta":{"line":367,"file":"VoiceConnection.js","path":"src/client/voice"}},{"name":"ready","description":"Emitted once the connection is ready, when a promise to join a voice channel resolves,\nthe connection will already be ready.","meta":{"line":459,"file":"VoiceConnection.js","path":"src/client/voice"}},{"name":"speaking","description":"Emitted whenever a user changes speaking state.","params":[{"name":"user","description":"The user that has changed speaking state","type":[[["User"]]]},{"name":"speaking","description":"The speaking state of the user","type":[[["Readonly","<"],["Speaking",">"]]]}],"meta":{"line":483,"file":"VoiceConnection.js","path":"src/client/voice"}}],"meta":{"line":42,"file":"VoiceConnection.js","path":"src/client/voice"}},{"name":"WebhookClient","description":"The webhook client.","extends":[[["BaseClient"]]],"implements":[[["Webhook"]]],"construct":{"name":"WebhookClient","params":[{"name":"id","description":"ID of the webhook","type":[[["Snowflake"]]]},{"name":"token","description":"Token of the webhook","type":[[["string"]]]},{"name":"options","description":"Options for the client","optional":true,"type":[[["ClientOptions"]]]}]},"props":[{"name":"id","description":"The ID of the webhook","type":[[["Snowflake"]]],"meta":{"line":48,"file":"Webhook.js","path":"src/structures"}},{"name":"_timeouts","description":"Timeouts set by {@link BaseClient#setTimeout} that are still active","access":"private","type":[[["Set","<"],["Timeout",">"]]],"meta":{"line":22,"file":"BaseClient.js","path":"src/client"}},{"name":"_intervals","description":"Intervals set by {@link BaseClient#setInterval} that are still active","access":"private","type":[[["Set","<"],["Timeout",">"]]],"meta":{"line":29,"file":"BaseClient.js","path":"src/client"}},{"name":"_immediates","description":"Intervals set by {@link BaseClient#setImmediate} that are still active","access":"private","type":[[["Set","<"],["Immediate",">"]]],"meta":{"line":36,"file":"BaseClient.js","path":"src/client"}},{"name":"options","description":"The options the client was instantiated with","type":[[["ClientOptions"]]],"meta":{"line":42,"file":"BaseClient.js","path":"src/client"}},{"name":"rest","description":"The REST manager of the client","access":"private","type":[[["RESTManager"]]],"meta":{"line":49,"file":"BaseClient.js","path":"src/client"}},{"name":"api","description":"API shortcut","access":"private","readonly":true,"type":[[["Object"]]],"meta":{"line":58,"file":"BaseClient.js","path":"src/client"}}],"methods":[{"name":"destroy","description":"Destroys all assets used by the base client.","inherits":"BaseClient#destroy","inherited":true,"meta":{"line":65,"file":"BaseClient.js","path":"src/client"}},{"name":"setTimeout","description":"Sets a timeout that will be automatically cancelled if the client is destroyed.","inherits":"BaseClient#setTimeout","inherited":true,"params":[{"name":"fn","description":"Function to execute","type":[[["function"]]]},{"name":"delay","description":"Time to wait before executing (in milliseconds)","type":[[["number"]]]},{"name":"args","description":"Arguments for the function","variable":true,"type":[["*"]]}],"returns":[[["Timeout"]]],"meta":{"line":81,"file":"BaseClient.js","path":"src/client"}},{"name":"clearTimeout","description":"Clears a timeout.","inherits":"BaseClient#clearTimeout","inherited":true,"params":[{"name":"timeout","description":"Timeout to cancel","type":[[["Timeout"]]]}],"meta":{"line":94,"file":"BaseClient.js","path":"src/client"}},{"name":"setInterval","description":"Sets an interval that will be automatically cancelled if the client is destroyed.","inherits":"BaseClient#setInterval","inherited":true,"params":[{"name":"fn","description":"Function to execute","type":[[["function"]]]},{"name":"delay","description":"Time to wait between executions (in milliseconds)","type":[[["number"]]]},{"name":"args","description":"Arguments for the function","variable":true,"type":[["*"]]}],"returns":[[["Timeout"]]],"meta":{"line":106,"file":"BaseClient.js","path":"src/client"}},{"name":"clearInterval","description":"Clears an interval.","inherits":"BaseClient#clearInterval","inherited":true,"params":[{"name":"interval","description":"Interval to cancel","type":[[["Timeout"]]]}],"meta":{"line":116,"file":"BaseClient.js","path":"src/client"}},{"name":"setImmediate","description":"Sets an immediate that will be automatically cancelled if the client is destroyed.","inherits":"BaseClient#setImmediate","inherited":true,"params":[{"name":"fn","description":"Function to execute","type":[[["function"]]]},{"name":"args","description":"Arguments for the function","variable":true,"type":[["*"]]}],"returns":[[["Immediate"]]],"meta":{"line":127,"file":"BaseClient.js","path":"src/client"}},{"name":"clearImmediate","description":"Clears an immediate.","inherits":"BaseClient#clearImmediate","inherited":true,"params":[{"name":"immediate","description":"Immediate to cancel","type":[[["Immediate"]]]}],"meta":{"line":137,"file":"BaseClient.js","path":"src/client"}}],"meta":{"line":21,"file":"WebhookClient.js","path":"src/client"}},{"name":"WebSocketManager","description":"The WebSocket manager for this client.\n<info>This class forwards raw dispatch events,\nread more about it here {@link https://discordapp.com/developers/docs/topics/gateway}</info>","extends":[[["EventEmitter"]]],"props":[{"name":"client","description":"The client that instantiated this WebSocketManager","readonly":true,"type":[[["Client"]]],"meta":{"line":34,"file":"WebSocketManager.js","path":"src/client/websocket"}},{"name":"gateway","description":"The gateway this manager uses","nullable":true,"type":[[["string"]]],"meta":{"line":46,"file":"WebSocketManager.js","path":"src/client/websocket"}},{"name":"totalShards","description":"The amount of shards this manager handles","access":"private","type":[[["number"]]],"meta":{"line":53,"file":"WebSocketManager.js","path":"src/client/websocket"}},{"name":"shards","description":"A collection of all shards this manager handles","type":[[["Collection","<"],["number",", "],["WebSocketShard",">"]]],"meta":{"line":59,"file":"WebSocketManager.js","path":"src/client/websocket"}},{"name":"shardQueue","description":"An array of shards to be connected or that need to reconnect","access":"private","type":[[["Set","<"],["WebSocketShard",">"]]],"meta":{"line":61,"file":"WebSocketManager.js","path":"src/client/websocket"}},{"name":"packetQueue","description":"An array of queued events before this WebSocketManager became ready","access":"private","type":[[["Array","<"],["object",">"]]],"meta":{"line":69,"file":"WebSocketManager.js","path":"src/client/websocket"}},{"name":"status","description":"The current status of this WebSocketManager","type":[[["number"]]],"meta":{"line":81,"file":"WebSocketManager.js","path":"src/client/websocket"}},{"name":"destroyed","description":"If this manager was destroyed. It will prevent shards from reconnecting","access":"private","type":[[["boolean"]]],"meta":{"line":88,"file":"WebSocketManager.js","path":"src/client/websocket"}},{"name":"reconnecting","description":"If this manager is currently reconnecting one or multiple shards","access":"private","type":[[["boolean"]]],"meta":{"line":95,"file":"WebSocketManager.js","path":"src/client/websocket"}},{"name":"sessionStartLimit","description":"The current session limit of the client","access":"private","nullable":true,"type":[[["Object"]]],"props":[{"name":"total","description":"Total number of identifies available","type":[[["number"]]]},{"name":"remaining","description":"Number of identifies remaining","type":[[["number"]]]},{"name":"reset_after","description":"Number of milliseconds after which the limit resets","type":[[["number"]]]}],"meta":{"line":105,"file":"WebSocketManager.js","path":"src/client/websocket"}},{"name":"ping","description":"The average ping of all WebSocketShards","readonly":true,"type":[[["number"]]],"meta":{"line":113,"file":"WebSocketManager.js","path":"src/client/websocket"}}],"methods":[{"name":"debug","description":"Emits a debug message.","access":"private","params":[{"name":"message","description":"The debug message","type":[[["string"]]]},{"name":"shard","description":"The shard that emitted this message, if any","optional":true,"nullable":true,"type":[[["WebSocketShard"]]]}],"meta":{"line":124,"file":"WebSocketManager.js","path":"src/client/websocket"}},{"name":"connect","description":"Connects this manager to the gateway.","access":"private","async":true,"meta":{"line":132,"file":"WebSocketManager.js","path":"src/client/websocket"}},{"name":"createShards","description":"Handles the creation of a shard.","access":"private","async":true,"returns":[[["Promise","<"],["boolean",">"]]],"meta":{"line":185,"file":"WebSocketManager.js","path":"src/client/websocket"}},{"name":"reconnect","description":"Handles reconnects for this manager.","access":"private","params":[{"name":"skipLimit","description":"IF this reconnect should skip checking the session limit","optional":true,"default":false,"type":[[["boolean"]]]}],"async":true,"returns":[[["Promise","<"],["boolean",">"]]],"meta":{"line":291,"file":"WebSocketManager.js","path":"src/client/websocket"}},{"name":"broadcast","description":"Broadcasts a packet to every shard this manager handles.","access":"private","params":[{"name":"packet","description":"The packet to send","type":[[["Object"]]]}],"meta":{"line":330,"file":"WebSocketManager.js","path":"src/client/websocket"}},{"name":"destroy","description":"Destroys this manager and all its shards.","access":"private","meta":{"line":338,"file":"WebSocketManager.js","path":"src/client/websocket"}},{"name":"_handleSessionLimit","description":"Handles the timeout required if we cannot identify anymore.","access":"private","params":[{"name":"remaining","description":"The amount of remaining identify sessions that can be done today","optional":true,"type":[[["number"]]]},{"name":"resetAfter","description":"The amount of time in which the identify counter resets","optional":true,"type":[[["number"]]]}],"async":true,"meta":{"line":352,"file":"WebSocketManager.js","path":"src/client/websocket"}},{"name":"handlePacket","description":"Processes a packet and queues it if this WebSocketManager is not ready.","access":"private","params":[{"name":"packet","description":"The packet to be handled","optional":true,"type":[[["Object"]]]},{"name":"shard","description":"The shard that will handle this packet","optional":true,"type":[[["WebSocketShard"]]]}],"returns":[[["boolean"]]],"meta":{"line":375,"file":"WebSocketManager.js","path":"src/client/websocket"}},{"name":"checkShardsReady","description":"Checks whether the client is ready to be marked as ready.","access":"private","async":true,"meta":{"line":401,"file":"WebSocketManager.js","path":"src/client/websocket"}},{"name":"triggerClientReady","description":"Causes the client to be marked as ready and emits the ready event.","access":"private","meta":{"line":429,"file":"WebSocketManager.js","path":"src/client/websocket"}}],"meta":{"line":31,"file":"WebSocketManager.js","path":"src/client/websocket"}},{"name":"WebSocketShard","description":"Represents a Shard's WebSocket connection","props":[{"name":"manager","description":"The WebSocketManager of the shard","type":[[["WebSocketManager"]]],"meta":{"line":29,"file":"WebSocketShard.js","path":"src/client/websocket"}},{"name":"id","description":"The ID of the shard","type":[[["number"]]],"meta":{"line":35,"file":"WebSocketShard.js","path":"src/client/websocket"}},{"name":"status","description":"The current status of the shard","type":[[["Status"]]],"meta":{"line":41,"file":"WebSocketShard.js","path":"src/client/websocket"}},{"name":"sequence","description":"The current sequence of the shard","access":"private","type":[[["number"]]],"meta":{"line":48,"file":"WebSocketShard.js","path":"src/client/websocket"}},{"name":"closeSequence","description":"The sequence of the shard after close","access":"private","type":[[["number"]]],"meta":{"line":55,"file":"WebSocketShard.js","path":"src/client/websocket"}},{"name":"sessionID","description":"The current session ID of the shard","access":"private","type":[[["string"]]],"meta":{"line":62,"file":"WebSocketShard.js","path":"src/client/websocket"}},{"name":"ping","description":"The previous heartbeat ping of the shard","type":[[["number"]]],"meta":{"line":68,"file":"WebSocketShard.js","path":"src/client/websocket"}},{"name":"lastPingTimestamp","description":"The last time a ping was sent (a timestamp)","access":"private","type":[[["number"]]],"meta":{"line":75,"file":"WebSocketShard.js","path":"src/client/websocket"}},{"name":"lastHeartbeatAcked","description":"If we received a heartbeat ack back. Used to identify zombie connections","access":"private","type":[[["boolean"]]],"meta":{"line":82,"file":"WebSocketShard.js","path":"src/client/websocket"}}],"methods":[{"name":"debug","description":"Emits a debug event.","access":"private","params":[{"name":"message","description":"The debug message","type":[[["string"]]]}],"meta":{"line":159,"file":"WebSocketShard.js","path":"src/client/websocket"}},{"name":"connect","description":"Connects the shard to the gateway.","access":"private","returns":{"types":[[["Promise","<"],["void",">"]]],"description":"A promise that will resolve if the shard turns ready successfully,\nor reject if we couldn't connect"},"meta":{"line":169,"file":"WebSocketShard.js","path":"src/client/websocket"}},{"name":"onOpen","description":"Called whenever a connection is opened to the gateway.","access":"private","meta":{"line":251,"file":"WebSocketShard.js","path":"src/client/websocket"}},{"name":"onMessage","description":"Called whenever a message is received.","access":"private","params":[{"name":"event","description":"Event received","type":[[["MessageEvent"]]]}],"meta":{"line":261,"file":"WebSocketShard.js","path":"src/client/websocket"}},{"name":"onError","description":"Called whenever an error occurs with the WebSocket.","access":"private","params":[{"name":"event","description":"The error that occurred","type":[[["ErrorEvent"]]]}],"meta":{"line":295,"file":"WebSocketShard.js","path":"src/client/websocket"}},{"name":"onClose","description":"Called whenever a connection to the gateway is closed.","access":"private","params":[{"name":"event","description":"Close event that was received","type":[[["CloseEvent"]]]}],"meta":{"line":328,"file":"WebSocketShard.js","path":"src/client/websocket"}},{"name":"onPacket","description":"Called whenever a packet is received.","access":"private","params":[{"name":"packet","description":"The received packet","type":[[["Object"]]]}],"meta":{"line":356,"file":"WebSocketShard.js","path":"src/client/websocket"}},{"name":"checkReady","description":"Checks if the shard can be marked as ready","access":"private","meta":{"line":439,"file":"WebSocketShard.js","path":"src/client/websocket"}},{"name":"setHelloTimeout","description":"Sets the HELLO packet timeout.","access":"private","params":[{"name":"time","description":"If set to -1, it will clear the hello timeout timeout","optional":true,"type":[[["number"]]]}],"meta":{"line":479,"file":"WebSocketShard.js","path":"src/client/websocket"}},{"name":"setHeartbeatTimer","description":"Sets the heartbeat timer for this shard.","access":"private","params":[{"name":"time","description":"If -1, clears the interval, any other number sets an interval","type":[[["number"]]]}],"meta":{"line":500,"file":"WebSocketShard.js","path":"src/client/websocket"}},{"name":"sendHeartbeat","description":"Sends a heartbeat to the WebSocket.\nIf this shard didn't receive a heartbeat last time, it will destroy it and reconnect","access":"private","params":[{"name":"tag","description":"What caused this heartbeat to be sent","optional":true,"default":"'HeartbeatTimer'","type":[[["string"]]]},{"name":"ignoreHeartbeatAck","description":"If we should send the heartbeat forcefully.","optional":true,"type":[[["boolean"]]]}],"meta":{"line":522,"file":"WebSocketShard.js","path":"src/client/websocket"}},{"name":"ackHeartbeat","description":"Acknowledges a heartbeat.","access":"private","meta":{"line":547,"file":"WebSocketShard.js","path":"src/client/websocket"}},{"name":"identify","description":"Identifies the client on the connection.","access":"private","returns":[[["void"]]],"meta":{"line":559,"file":"WebSocketShard.js","path":"src/client/websocket"}},{"name":"identifyNew","description":"Identifies as a new connection on the gateway.","access":"private","meta":{"line":567,"file":"WebSocketShard.js","path":"src/client/websocket"}},{"name":"identifyResume","description":"Resumes a session on the gateway.","access":"private","meta":{"line":591,"file":"WebSocketShard.js","path":"src/client/websocket"}},{"name":"send","description":"Adds a packet to the queue to be sent to the gateway.\n<warn>If you use this method, make sure you understand that you need to provide\na full [Payload](https://discordapp.com/developers/docs/topics/gateway#commands-and-events-gateway-commands).\nDo not use this method if you don't know what you're doing.</warn>","params":[{"name":"data","description":"The full packet to send","type":[[["Object"]]]},{"name":"important","description":"If this packet should be added first in queue","optional":true,"default":false,"type":[[["boolean"]]]}],"meta":{"line":619,"file":"WebSocketShard.js","path":"src/client/websocket"}},{"name":"_send","description":"Sends data, bypassing the queue.","access":"private","params":[{"name":"data","description":"Packet to send","type":[[["Object"]]]}],"returns":[[["void"]]],"meta":{"line":630,"file":"WebSocketShard.js","path":"src/client/websocket"}},{"name":"processQueue","description":"Processes the current WebSocket queue.","access":"private","returns":[[["void"]]],"meta":{"line":646,"file":"WebSocketShard.js","path":"src/client/websocket"}},{"name":"destroy","description":"Destroys this shard and closes its WebSocket connection.","access":"private","params":[{"name":"closeCode","description":"The close code to use","optional":true,"default":1000,"type":[[["number"]]]},{"name":"cleanup","description":"If the shard should attempt a reconnect","optional":true,"default":false,"type":[[["boolean"]]]}],"meta":{"line":669,"file":"WebSocketShard.js","path":"src/client/websocket"}}],"events":[{"name":"close","description":"Emitted when a shard's WebSocket closes.","params":[{"name":"event","description":"The received event","type":[[["CloseEvent"]]]}],"meta":{"line":342,"file":"WebSocketShard.js","path":"src/client/websocket"}},{"name":"ready","description":"Emitted when the shard receives the READY payload and is now waiting for guilds","meta":{"line":364,"file":"WebSocketShard.js","path":"src/client/websocket"}},{"name":"resumed","description":"Emitted when the shard resumes successfully","meta":{"line":378,"file":"WebSocketShard.js","path":"src/client/websocket"}},{"name":"allReady","description":"Emitted when the shard is fully ready.\nThis event is emitted if:\n* all guilds were received by this shard\n* the ready timeout expired, and some guilds are unavailable","params":[{"name":"unavailableGuilds","description":"Set of unavailable guilds, if any","nullable":true,"type":[[["Set","<"],["string",">"]]]}],"meta":{"line":450,"file":"WebSocketShard.js","path":"src/client/websocket"}},{"name":"destroyed","description":"Emitted when a shard is destroyed, but no WebSocket connection was present.","meta":{"line":677,"file":"WebSocketShard.js","path":"src/client/websocket"}}],"meta":{"line":22,"file":"WebSocketShard.js","path":"src/client/websocket"}},{"name":"DiscordAPIError","description":"Represents an error from the Discord API.","extends":[[["Error"]]],"props":[{"name":"method","description":"The HTTP method used for the request","type":[[["string"]]],"meta":{"line":18,"file":"DiscordAPIError.js","path":"src/rest"}},{"name":"path","description":"The path of the request relative to the HTTP endpoint","type":[[["string"]]],"meta":{"line":24,"file":"DiscordAPIError.js","path":"src/rest"}},{"name":"code","description":"HTTP error code returned by Discord","type":[[["number"]]],"meta":{"line":30,"file":"DiscordAPIError.js","path":"src/rest"}},{"name":"httpStatus","description":"The HTTP status code","type":[[["number"]]],"meta":{"line":36,"file":"DiscordAPIError.js","path":"src/rest"}}],"methods":[{"name":"flattenErrors","description":"Flattens an errors object returned from the API into an array.","scope":"static","access":"private","params":[{"name":"obj","description":"Discord errors object","type":[[["Object"]]]},{"name":"key","description":"Used internally to determine key names of nested fields","optional":true,"type":[[["string"]]]}],"returns":[[["Array","<"],["string",">"]]],"meta":{"line":46,"file":"DiscordAPIError.js","path":"src/rest"}}],"meta":{"line":8,"file":"DiscordAPIError.js","path":"src/rest"}},{"name":"HTTPError","description":"Represents a HTTP error from a request.","extends":[[["Error"]]],"props":[{"name":"name","description":"The name of the error","type":[[["string"]]],"meta":{"line":15,"file":"HTTPError.js","path":"src/rest"}},{"name":"code","description":"HTTP error code returned from the request","type":[[["number"]]],"meta":{"line":21,"file":"HTTPError.js","path":"src/rest"}},{"name":"method","description":"The HTTP method used for the request","type":[[["string"]]],"meta":{"line":27,"file":"HTTPError.js","path":"src/rest"}},{"name":"path","description":"The path of the request relative to the HTTP endpoint","type":[[["string"]]],"meta":{"line":33,"file":"HTTPError.js","path":"src/rest"}}],"meta":{"line":8,"file":"HTTPError.js","path":"src/rest"}},{"name":"Shard","description":"A self-contained shard created by the {@link ShardingManager}. Each one has a {@link ChildProcess} that contains\nan instance of the bot and its {@link Client}. When its child process/worker exits for any reason, the shard will\nspawn a new one to replace it as necessary.","extends":[[["EventEmitter"]]],"construct":{"name":"Shard","params":[{"name":"manager","description":"Manager that is spawning this shard","type":[[["ShardingManager"]]]},{"name":"id","description":"ID of this shard","type":[[["number"]]]}]},"props":[{"name":"manager","description":"Manager that created the shard","type":[[["ShardingManager"]]],"meta":{"line":31,"file":"Shard.js","path":"src/sharding"}},{"name":"id","description":"ID of the shard in the manager","type":[[["number"]]],"meta":{"line":37,"file":"Shard.js","path":"src/sharding"}},{"name":"args","description":"Arguments for the shard's process (only when {@link ShardingManager#mode} is `process`)","type":[[["Array","<"],["string",">"]]],"meta":{"line":43,"file":"Shard.js","path":"src/sharding"}},{"name":"execArgv","description":"Arguments for the shard's process executable (only when {@link ShardingManager#mode} is `process`)","nullable":true,"type":[[["Array","<"],["string",">"]]],"meta":{"line":49,"file":"Shard.js","path":"src/sharding"}},{"name":"env","description":"Environment variables for the shard's process, or workerData for the shard's worker","type":[[["Object"]]],"meta":{"line":55,"file":"Shard.js","path":"src/sharding"}},{"name":"ready","description":"Whether the shard's {@link Client} is ready","type":[[["boolean"]]],"meta":{"line":66,"file":"Shard.js","path":"src/sharding"}},{"name":"process","description":"Process of the shard (if {@link ShardingManager#mode} is `process`)","nullable":true,"type":[[["ChildProcess"]]],"meta":{"line":72,"file":"Shard.js","path":"src/sharding"}},{"name":"worker","description":"Worker of the shard (if {@link ShardingManager#mode} is `worker`)","nullable":true,"type":[[["Worker"]]],"meta":{"line":78,"file":"Shard.js","path":"src/sharding"}},{"name":"_evals","description":"Ongoing promises for calls to {@link Shard#eval}, mapped by the `script` they were called with","access":"private","type":[[["Map","<"],["string",", "],["Promise",">"]]],"meta":{"line":85,"file":"Shard.js","path":"src/sharding"}},{"name":"_fetches","description":"Ongoing promises for calls to {@link Shard#fetchClientValue}, mapped by the `prop` they were called with","access":"private","type":[[["Map","<"],["string",", "],["Promise",">"]]],"meta":{"line":92,"file":"Shard.js","path":"src/sharding"}},{"name":"_exitListener","description":"Listener function for the {@link ChildProcess}' `exit` event","access":"private","type":[[["function"]]],"meta":{"line":99,"file":"Shard.js","path":"src/sharding"}}],"methods":[{"name":"spawn","description":"Forks a child process or creates a worker thread for the shard.\n<warn>You should not need to call this manually.</warn>","params":[{"name":"spawnTimeout","description":"The amount in milliseconds to wait until the {@link Client} has become ready\nbefore resolving. (-1 or Infinity for no wait)","optional":true,"default":30000,"type":[[["number"]]]}],"async":true,"returns":[[["Promise","<"],["ChildProcess",">"]]],"meta":{"line":109,"file":"Shard.js","path":"src/sharding"}},{"name":"kill","description":"Immediately kills the shard's process/worker and does not restart it.","meta":{"line":145,"file":"Shard.js","path":"src/sharding"}},{"name":"respawn","description":"Kills and restarts the shard's process/worker.","params":[{"name":"delay","description":"How long to wait between killing the process/worker and restarting it (in milliseconds)","optional":true,"default":500,"type":[[["number"]]]},{"name":"spawnTimeout","description":"The amount in milliseconds to wait until the {@link Client} has become ready\nbefore resolving. (-1 or Infinity for no wait)","optional":true,"default":30000,"type":[[["number"]]]}],"async":true,"returns":[[["Promise","<"],["ChildProcess",">"]]],"meta":{"line":164,"file":"Shard.js","path":"src/sharding"}},{"name":"send","description":"Sends a message to the shard's process/worker.","params":[{"name":"message","description":"Message to send to the shard","type":[["*"]]}],"returns":[[["Promise","<"],["Shard",">"]]],"meta":{"line":175,"file":"Shard.js","path":"src/sharding"}},{"name":"fetchClientValue","description":"Fetches a client property value of the shard.","examples":["shard.fetchClientValue('guilds.size')\n  .then(count => console.log(`${count} guilds in shard ${shard.id}`))\n  .catch(console.error);"],"params":[{"name":"prop","description":"Name of the client property to get, using periods for nesting","type":[[["string"]]]}],"returns":[[["Promise","<"],["*",">"]]],"meta":{"line":197,"file":"Shard.js","path":"src/sharding"}},{"name":"eval","description":"Evaluates a script or function on the shard, in the context of the {@link Client}.","params":[{"name":"script","description":"JavaScript to run on the shard","type":[[["string"]],[["function"]]]}],"returns":{"types":[[["Promise","<"],["*",">"]]],"description":"Result of the script execution"},"meta":{"line":227,"file":"Shard.js","path":"src/sharding"}},{"name":"_handleMessage","description":"Handles a message received from the child process/worker.","access":"private","params":[{"name":"message","description":"Message received","type":[["*"]]}],"meta":{"line":258,"file":"Shard.js","path":"src/sharding"}},{"name":"_handleExit","description":"Handles the shard's process/worker exiting.","access":"private","params":[{"name":"respawn","description":"Whether to spawn the shard again","optional":true,"default":"this.manager.respawn","type":[[["boolean"]]]}],"meta":{"line":334,"file":"Shard.js","path":"src/sharding"}}],"events":[{"name":"spawn","description":"Emitted upon the creation of the shard's child process/worker.","params":[{"name":"process","description":"Child process/worker that was created","type":[[["ChildProcess"]],[["Worker"]]]}],"meta":{"line":125,"file":"Shard.js","path":"src/sharding"}},{"name":"ready","description":"Emitted upon the shard's {@link Client#ready} event.","meta":{"line":263,"file":"Shard.js","path":"src/sharding"}},{"name":"disconnect","description":"Emitted upon the shard's {@link Client#disconnect} event.","meta":{"line":274,"file":"Shard.js","path":"src/sharding"}},{"name":"reconnecting","description":"Emitted upon the shard's {@link Client#reconnecting} event.","meta":{"line":285,"file":"Shard.js","path":"src/sharding"}},{"name":"message","description":"Emitted upon receiving a message from the child process/worker.","params":[{"name":"message","description":"Message that was received","type":[["*"]]}],"meta":{"line":321,"file":"Shard.js","path":"src/sharding"}},{"name":"death","description":"Emitted upon the shard's child process/worker exiting.","params":[{"name":"process","description":"Child process/worker that exited","type":[[["ChildProcess"]],[["Worker"]]]}],"meta":{"line":335,"file":"Shard.js","path":"src/sharding"}}],"meta":{"line":21,"file":"Shard.js","path":"src/sharding"}},{"name":"ShardClientUtil","description":"Helper class for sharded clients spawned as a child process/worker, such as from a {@link ShardingManager}.\nUtilises IPC to send and receive data to/from the master process and other shards.","construct":{"name":"ShardClientUtil","params":[{"name":"client","description":"Client of the current shard","type":[[["Client"]]]},{"name":"mode","description":"Mode the shard was spawned with","type":[[["ShardingManagerMode"]]]}]},"props":[{"name":"client","description":"Client for the shard","type":[[["Client"]]],"meta":{"line":20,"file":"ShardClientUtil.js","path":"src/sharding"}},{"name":"mode","description":"Mode the shard was spawned with","type":[[["ShardingManagerMode"]]],"meta":{"line":26,"file":"ShardClientUtil.js","path":"src/sharding"}},{"name":"parentPort","description":"Message port for the master process (only when {@link ShardClientUtil#mode} is `worker`)","nullable":true,"type":[[["MessagePort"]]],"meta":{"line":32,"file":"ShardClientUtil.js","path":"src/sharding"}},{"name":"ids","description":"Array of shard IDs of this client","readonly":true,"type":[[["Array","<"],["number",">"]]],"meta":{"line":53,"file":"ShardClientUtil.js","path":"src/sharding"}},{"name":"count","description":"Total number of shards","readonly":true,"type":[[["number"]]],"meta":{"line":62,"file":"ShardClientUtil.js","path":"src/sharding"}}],"methods":[{"name":"send","description":"Sends a message to the master process.","params":[{"name":"message","description":"Message to send","type":[["*"]]}],"returns":[[["Promise","<"],["void",">"]]],"meta":{"line":71,"file":"ShardClientUtil.js","path":"src/sharding"}},{"name":"fetchClientValues","description":"Fetches a client property value of each shard.","see":["{@link ShardingManager#fetchClientValues}"],"examples":["client.shard.fetchClientValues('guilds.size')\n  .then(results => console.log(`${results.reduce((prev, val) => prev + val, 0)} total guilds`))\n  .catch(console.error);"],"params":[{"name":"prop","description":"Name of the client property to get, using periods for nesting","type":[[["string"]]]}],"returns":[[["Promise","<"],["Array","<"],["*",">>"]]],"meta":{"line":94,"file":"ShardClientUtil.js","path":"src/sharding"}},{"name":"broadcastEval","description":"Evaluates a script or function on all shards, in the context of the {@link Clients}.","see":["{@link ShardingManager#broadcastEval}"],"examples":["client.shard.broadcastEval('this.guilds.size')\n  .then(results => console.log(`${results.reduce((prev, val) => prev + val, 0)} total guilds`))\n  .catch(console.error);"],"params":[{"name":"script","description":"JavaScript to run on each shard","type":[[["string"]],[["function"]]]}],"returns":{"types":[[["Promise","<"],["Array","<"],["*",">>"]]],"description":"Results of the script execution"},"meta":{"line":122,"file":"ShardClientUtil.js","path":"src/sharding"}},{"name":"respawnAll","description":"Requests a respawn of all shards.","see":["{@link ShardingManager#respawnAll}"],"params":[{"name":"shardDelay","description":"How long to wait between shards (in milliseconds)","optional":true,"default":5000,"type":[[["number"]]]},{"name":"respawnDelay","description":"How long to wait between killing a shard's process/worker and restarting it\n(in milliseconds)","optional":true,"default":500,"type":[[["number"]]]},{"name":"spawnTimeout","description":"The amount in milliseconds to wait for a shard to become ready before\ncontinuing to another. (-1 or Infinity for no wait)","optional":true,"default":30000,"type":[[["number"]]]}],"returns":{"types":[[["Promise","<"],["void",">"]]],"description":"Resolves upon the message being sent"},"meta":{"line":151,"file":"ShardClientUtil.js","path":"src/sharding"}},{"name":"_handleMessage","description":"Handles an IPC message.","access":"private","params":[{"name":"message","description":"Message received","type":[["*"]]}],"async":true,"meta":{"line":160,"file":"ShardClientUtil.js","path":"src/sharding"}},{"name":"_respond","description":"Sends a message to the master process, emitting an error from the client upon failure.","access":"private","params":[{"name":"type","description":"Type of response to send","type":[[["string"]]]},{"name":"message","description":"Message to send","type":[["*"]]}],"meta":{"line":182,"file":"ShardClientUtil.js","path":"src/sharding"}},{"name":"singleton","description":"Creates/gets the singleton of this class.","scope":"static","params":[{"name":"client","description":"The client to use","type":[[["Client"]]]},{"name":"mode","description":"Mode the shard was spawned with","type":[[["ShardingManagerMode"]]]}],"returns":[[["ShardClientUtil"]]],"meta":{"line":200,"file":"ShardClientUtil.js","path":"src/sharding"}}],"meta":{"line":15,"file":"ShardClientUtil.js","path":"src/sharding"}},{"name":"ShardingManager","description":"This is a utility class that makes multi-process sharding of a bot an easy and painless experience.\nIt works by spawning a self-contained {@link ChildProcess} or {@link Worker} for each individual shard, each\ncontaining its own instance of your bot's {@link Client}. They all have a line of communication with the master\nprocess, and there are several useful methods that utilise it in order to simplify tasks that are normally difficult\nwith sharding. It can spawn a specific number of shards or the amount that Discord suggests for the bot, and takes a\npath to your main bot script to launch for each one.","extends":[[["EventEmitter"]]],"construct":{"name":"ShardingManager","params":[{"name":"file","description":"Path to your shard script file","type":[[["string"]]]},{"name":"options","description":"Options for the sharding manager","optional":true,"type":[[["Object"]]]},{"name":"options.totalShards","description":"Number of total shards of all shard managers or \"auto\"","optional":true,"default":"'auto'","type":[[["string"]],[["number"]]]},{"name":"options.shardList","description":"List of shards to spawn or \"auto\"","optional":true,"default":"'auto'","type":[[["string"]],[["Array","<"],["number",">"]]]},{"name":"options.mode","description":"Which mode to use for shards","optional":true,"default":"'process'","type":[[["ShardingManagerMode"]]]},{"name":"options.respawn","description":"Whether shards should automatically respawn upon exiting","optional":true,"default":true,"type":[[["boolean"]]]},{"name":"options.shardArgs","description":"Arguments to pass to the shard script when spawning\n(only available when using the `process` mode)","optional":true,"default":"[]","type":[[["Array","<"],["string",">"]]]},{"name":"options.execArgv","description":"Arguments to pass to the shard script executable when spawning\n(only available when using the `process` mode)","optional":true,"default":"[]","type":[[["Array","<"],["string",">"]]]},{"name":"options.token","description":"Token to use for automatic shard count and passing to shards","optional":true,"type":[[["string"]]]}]},"props":[{"name":"file","description":"Path to the shard script file","type":[[["string"]]],"meta":{"line":57,"file":"ShardingManager.js","path":"src/sharding"}},{"name":"shardList","description":"List of shards this sharding manager spawns","type":[[["string"]],[["Array","<"],["number",">"]]],"meta":{"line":67,"file":"ShardingManager.js","path":"src/sharding"}},{"name":"totalShards","description":"Amount of shards that all sharding managers spawn in total","type":[[["number"]]],"meta":{"line":84,"file":"ShardingManager.js","path":"src/sharding"}},{"name":"mode","description":"Mode for shards to spawn with","type":[[["ShardingManagerMode"]]],"meta":{"line":99,"file":"ShardingManager.js","path":"src/sharding"}},{"name":"respawn","description":"Whether shards should automatically respawn upon exiting","type":[[["boolean"]]],"meta":{"line":108,"file":"ShardingManager.js","path":"src/sharding"}},{"name":"shardArgs","description":"An array of arguments to pass to shards (only when {@link ShardingManager#mode} is `process`)","type":[[["Array","<"],["string",">"]]],"meta":{"line":114,"file":"ShardingManager.js","path":"src/sharding"}},{"name":"execArgv","description":"An array of arguments to pass to the executable (only when {@link ShardingManager#mode} is `process`)","type":[[["Array","<"],["string",">"]]],"meta":{"line":120,"file":"ShardingManager.js","path":"src/sharding"}},{"name":"token","description":"Token to use for obtaining the automatic shard count, and passing to shards","nullable":true,"type":[[["string"]]],"meta":{"line":126,"file":"ShardingManager.js","path":"src/sharding"}},{"name":"shards","description":"A collection of shards that this manager has spawned","type":[[["Collection","<"],["number",", "],["Shard",">"]]],"meta":{"line":132,"file":"ShardingManager.js","path":"src/sharding"}}],"methods":[{"name":"createShard","description":"Spawns a single shard.","params":[{"name":"id","description":"ID of the shard to spawn -\n**This is usually not necessary to manually specify.**","optional":true,"default":"this.shards.size","type":[[["number"]]]}],"returns":[[["Shard"]]],"meta":{"line":145,"file":"ShardingManager.js","path":"src/sharding"}},{"name":"spawn","description":"Spawns multiple shards.","params":[{"name":"amount","description":"Number of shards to spawn","optional":true,"default":"this.totalShards","type":[[["number"]],[["string"]]]},{"name":"delay","description":"How long to wait in between spawning each shard (in milliseconds)","optional":true,"default":5500,"type":[[["number"]]]},{"name":"spawnTimeout","description":"The amount in milliseconds to wait until the {@link Client} has become ready\nbefore resolving. (-1 or Infinity for no wait)","optional":true,"default":30000,"type":[[["number"]]]}],"async":true,"returns":[[["Promise","<"],["Collection","<"],["number",", "],["Shard",">>"]]],"meta":{"line":165,"file":"ShardingManager.js","path":"src/sharding"}},{"name":"broadcast","description":"Sends a message to all shards.","params":[{"name":"message","description":"Message to be sent to the shards","type":[["*"]]}],"returns":[[["Promise","<"],["Array","<"],["Shard",">>"]]],"meta":{"line":210,"file":"ShardingManager.js","path":"src/sharding"}},{"name":"broadcastEval","description":"Evaluates a script on all shards, in the context of the {@link Client}s.","params":[{"name":"script","description":"JavaScript to run on each shard","type":[[["string"]]]}],"returns":{"types":[[["Promise","<"],["Array","<"],["*",">>"]]],"description":"Results of the script execution"},"meta":{"line":221,"file":"ShardingManager.js","path":"src/sharding"}},{"name":"fetchClientValues","description":"Fetches a client property value of each shard.","examples":["manager.fetchClientValues('guilds.size')\n  .then(results => console.log(`${results.reduce((prev, val) => prev + val, 0)} total guilds`))\n  .catch(console.error);"],"params":[{"name":"prop","description":"Name of the client property to get, using periods for nesting","type":[[["string"]]]}],"returns":[[["Promise","<"],["Array","<"],["*",">>"]]],"meta":{"line":236,"file":"ShardingManager.js","path":"src/sharding"}},{"name":"respawnAll","description":"Kills all running shards and respawns them.","params":[{"name":"shardDelay","description":"How long to wait between shards (in milliseconds)","optional":true,"default":5000,"type":[[["number"]]]},{"name":"respawnDelay","description":"How long to wait between killing a shard's process and restarting it\n(in milliseconds)","optional":true,"default":500,"type":[[["number"]]]},{"name":"spawnTimeout","description":"The amount in milliseconds to wait for a shard to become ready before\ncontinuing to another. (-1 or Infinity for no wait)","optional":true,"default":30000,"type":[[["number"]]]}],"async":true,"returns":[[["Promise","<"],["Collection","<"],["string",", "],["Shard",">>"]]],"meta":{"line":253,"file":"ShardingManager.js","path":"src/sharding"}}],"events":[{"name":"shardCreate","description":"Emitted upon creating a shard.","params":[{"name":"shard","description":"Shard that was created","type":[[["Shard"]]]}],"meta":{"line":148,"file":"ShardingManager.js","path":"src/sharding"}}],"meta":{"line":42,"file":"ShardingManager.js","path":"src/sharding"}},{"name":"ChannelStore","description":"Stores channels.","extends":[[["DataStore"]]],"methods":[{"name":"resolve","description":"Resolves a ChannelResolvable to a Channel object.","params":[{"name":"channel","description":"The channel resolvable to resolve","type":[[["ChannelResolvable"]]]}],"returns":{"types":[[["Channel"]]],"nullable":true},"meta":{"line":88,"file":"ChannelStore.js","path":"src/stores"}},{"name":"resolveID","description":"Resolves a ChannelResolvable to a channel ID string.","params":[{"name":"channel","description":"The channel resolvable to resolve","type":[[["ChannelResolvable"]]]}],"returns":{"types":[[["Snowflake"]]],"nullable":true},"meta":{"line":97,"file":"ChannelStore.js","path":"src/stores"}},{"name":"fetch","description":"Obtains a channel from Discord, or the channel cache if it's already available.","examples":["// Fetch a channel by its id\nclient.channels.fetch('222109930545610754')\n  .then(channel => console.log(channel.name))\n  .catch(console.error);"],"params":[{"name":"id","description":"ID of the channel","type":[[["Snowflake"]]]},{"name":"cache","description":"Whether to cache the new channel object if it isn't already","optional":true,"default":true,"type":[[["boolean"]]]}],"async":true,"returns":[[["Promise","<"],["Channel",">"]]],"meta":{"line":117,"file":"ChannelStore.js","path":"src/stores"}}],"meta":{"line":15,"file":"ChannelStore.js","path":"src/stores"}},{"name":"DataStore","description":"Manages the creation, retrieval and deletion of a specific data model.","extends":[[["Collection"]]],"methods":[{"name":"resolve","description":"Resolves a data entry to a data Object.","params":[{"name":"idOrInstance","description":"The id or instance of something in this DataStore","type":[[["string"]],[["Object"]]]}],"returns":{"types":[[["Object"]]],"description":"An instance from this DataStore","nullable":true},"meta":{"line":36,"file":"DataStore.js","path":"src/stores"}},{"name":"resolveID","description":"Resolves a data entry to a instance ID.","params":[{"name":"idOrInstance","description":"The id or instance of something in this DataStore","type":[[["string"]],[["Instance"]]]}],"returns":{"types":[[["Snowflake"]]],"nullable":true},"meta":{"line":47,"file":"DataStore.js","path":"src/stores"}}],"meta":{"line":11,"file":"DataStore.js","path":"src/stores"}},{"name":"GuildChannelStore","description":"Stores guild channels.","extends":[[["DataStore"]]],"methods":[{"name":"resolve","description":"Resolves a GuildChannelResolvable to a Channel object.","params":[{"name":"channel","description":"The GuildChannel resolvable to resolve","type":[[["GuildChannelResolvable"]]]}],"returns":{"types":[[["Channel"]]],"nullable":true},"meta":{"line":32,"file":"GuildChannelStore.js","path":"src/stores"}},{"name":"resolveID","description":"Resolves a GuildChannelResolvable to a channel ID string.","params":[{"name":"channel","description":"The GuildChannel resolvable to resolve","type":[[["GuildChannelResolvable"]]]}],"returns":{"types":[[["Snowflake"]]],"nullable":true},"meta":{"line":41,"file":"GuildChannelStore.js","path":"src/stores"}},{"name":"create","description":"Creates a new channel in the guild.","examples":["// Create a new text channel\nguild.channels.create('new-general', { reason: 'Needed a cool new channel' })\n  .then(console.log)\n  .catch(console.error);","// Create a new channel with permission overwrites\nguild.channels.create('new-voice', {\n  type: 'voice',\n  permissionOverwrites: [\n     {\n       id: message.author.id,\n       deny: ['VIEW_CHANNEL'],\n    },\n  ],\n})"],"params":[{"name":"name","description":"The name of the new channel","type":[[["string"]]]},{"name":"options","description":"Options","optional":true,"type":[[["Object"]]]},{"name":"options.type","description":"The type of the new channel, either `text`, `voice`, or `category`","optional":true,"default":"'text'","type":[[["string"]]]},{"name":"options.topic","description":"The topic for the new channel","optional":true,"type":[[["string"]]]},{"name":"options.nsfw","description":"Whether the new channel is nsfw","optional":true,"type":[[["boolean"]]]},{"name":"options.bitrate","description":"Bitrate of the new channel in bits (only voice)","optional":true,"type":[[["number"]]]},{"name":"options.userLimit","description":"Maximum amount of users allowed in the new channel (only voice)","optional":true,"type":[[["number"]]]},{"name":"options.parent","description":"Parent of the new channel","optional":true,"type":[[["ChannelResolvable"]]]},{"name":"options.permissionOverwrites","description":"Permission overwrites of the new channel","optional":true,"type":[[["Array","<"],["OverwriteResolvable",">"]],[["Collection","<"],["Snowflake",", "],["OverwriteResolvable",">"]]]},{"name":"options.position","description":"Position of the new channel","optional":true,"type":[[["number"]]]},{"name":"options.rateLimitPerUser","description":"The ratelimit per user for the channel","optional":true,"type":[[["number"]]]},{"name":"options.reason","description":"Reason for creating the channel","optional":true,"type":[[["string"]]]}],"async":true,"returns":[[["Promise","<"],["GuildChannel",">"]]],"meta":{"line":83,"file":"GuildChannelStore.js","path":"src/stores"}}],"meta":{"line":13,"file":"GuildChannelStore.js","path":"src/stores"}},{"name":"GuildEmojiRoleStore","description":"Stores emoji roles","extends":[[["Collection"]]],"props":[{"name":"_filtered","description":"The filtered collection of roles of the guild emoji","access":"private","readonly":true,"type":[[["Collection","<"],["Snowflake",", "],["Role",">"]]],"meta":{"line":25,"file":"GuildEmojiRoleStore.js","path":"src/stores"}}],"methods":[{"name":"add","description":"Adds a role (or multiple roles) to the list of roles that can use this emoji.","params":[{"name":"roleOrRoles","description":"The role or roles to add","type":[[["RoleResolvable"]],[["Array","<"],["RoleResolvable",">"]],[["Collection","<"],["Snowflake",", "],["Role",">"]]]}],"returns":[[["Promise","<"],["GuildEmoji",">"]]],"meta":{"line":34,"file":"GuildEmojiRoleStore.js","path":"src/stores"}},{"name":"remove","description":"Removes a role (or multiple roles) from the list of roles that can use this emoji.","params":[{"name":"roleOrRoles","description":"The role or roles to remove","type":[[["RoleResolvable"]],[["Array","<"],["RoleResolvable",">"]],[["Collection","<"],["Snowflake",", "],["Role",">"]]]}],"returns":[[["Promise","<"],["GuildEmoji",">"]]],"meta":{"line":53,"file":"GuildEmojiRoleStore.js","path":"src/stores"}},{"name":"set","description":"Sets the role(s) that can use this emoji.","examples":["// Set the emoji's roles to a single role\nguildEmoji.roles.set(['391156570408615936'])\n  .then(console.log)\n  .catch(console.error);","// Remove all roles from an emoji\nguildEmoji.roles.set([])\n   .then(console.log)\n   .catch(console.error);"],"params":[{"name":"roles","description":"The roles or role IDs to apply","type":[[["Collection","<"],["Snowflake",", "],["Role",">"]],[["Array","<"],["RoleResolvable",">"]]]}],"returns":[[["Promise","<"],["GuildEmoji",">"]]],"meta":{"line":82,"file":"GuildEmojiRoleStore.js","path":"src/stores"}},{"name":"_patch","description":"Patches the roles for this store","access":"private","params":[{"name":"roles","description":"The new roles","type":[[["Array","<"],["Snowflake",">"]]]}],"meta":{"line":97,"file":"GuildEmojiRoleStore.js","path":"src/stores"}}],"meta":{"line":12,"file":"GuildEmojiRoleStore.js","path":"src/stores"}},{"name":"GuildEmojiStore","description":"Stores guild emojis.","extends":[[["DataStore"]]],"methods":[{"name":"create","description":"Creates a new custom emoji in the guild.","examples":["// Create a new emoji from a url\nguild.emojis.create('https://i.imgur.com/w3duR07.png', 'rip')\n  .then(emoji => console.log(`Created new emoji with name ${emoji.name}!`))\n  .catch(console.error);","// Create a new emoji from a file on your computer\nguild.emojis.create('./memes/banana.png', 'banana')\n  .then(emoji => console.log(`Created new emoji with name ${emoji.name}!`))\n  .catch(console.error);"],"params":[{"name":"attachment","description":"The image for the emoji","type":[[["BufferResolvable"]],[["Base64Resolvable"]]]},{"name":"name","description":"The name for the emoji","type":[[["string"]]]},{"name":"options","description":"Options","optional":true,"type":[[["Object"]]]},{"name":"options.roles","description":"Roles to limit the emoji to","optional":true,"type":[[["Collection","<"],["Snowflake",", "],["Role",">"]],[["Array","<"],["RoleResolvable",">"]]]},{"name":"options.reason","description":"Reason for creating the emoji","optional":true,"type":[[["string"]]]}],"returns":{"types":[[["Promise","<"],["Emoji",">"]]],"description":"The created emoji"},"meta":{"line":43,"file":"GuildEmojiStore.js","path":"src/stores"}},{"name":"resolve","description":"Resolves an EmojiResolvable to an Emoji object.","params":[{"name":"emoji","description":"The Emoji resolvable to identify","type":[[["EmojiResolvable"]]]}],"returns":{"types":[[["GuildEmoji"]]],"nullable":true},"meta":{"line":78,"file":"GuildEmojiStore.js","path":"src/stores"}},{"name":"resolveID","description":"Resolves an EmojiResolvable to an Emoji ID string.","params":[{"name":"emoji","description":"The Emoji resolvable to identify","type":[[["EmojiResolvable"]]]}],"returns":{"types":[[["Snowflake"]]],"nullable":true},"meta":{"line":88,"file":"GuildEmojiStore.js","path":"src/stores"}},{"name":"resolveIdentifier","description":"Resolves an EmojiResolvable to an emoji identifier.","params":[{"name":"emoji","description":"The emoji resolvable to resolve","type":[[["EmojiIdentifierResolvable"]]]}],"returns":{"types":[[["string"]]],"nullable":true},"meta":{"line":105,"file":"GuildEmojiStore.js","path":"src/stores"}}],"meta":{"line":15,"file":"GuildEmojiStore.js","path":"src/stores"}},{"name":"GuildMemberRoleStore","description":"Stores member roles","extends":[[["Collection"]]],"props":[{"name":"_filtered","description":"The filtered collection of roles of the member","access":"private","readonly":true,"type":[[["Collection","<"],["Snowflake",", "],["Role",">"]]],"meta":{"line":25,"file":"GuildMemberRoleStore.js","path":"src/stores"}},{"name":"hoist","description":"The role of the member used to hoist them in a separate category in the users list","readonly":true,"nullable":true,"type":[[["Role"]]],"meta":{"line":35,"file":"GuildMemberRoleStore.js","path":"src/stores"}},{"name":"color","description":"The role of the member used to set their color","readonly":true,"nullable":true,"type":[[["Role"]]],"meta":{"line":46,"file":"GuildMemberRoleStore.js","path":"src/stores"}},{"name":"highest","description":"The role of the member with the highest position","readonly":true,"type":[[["Role"]]],"meta":{"line":57,"file":"GuildMemberRoleStore.js","path":"src/stores"}}],"methods":[{"name":"add","description":"Adds a role (or multiple roles) to the member.","params":[{"name":"roleOrRoles","description":"The role or roles to add","type":[[["RoleResolvable"]],[["Array","<"],["RoleResolvable",">"]],[["Collection","<"],["Snowflake",", "],["Role",">"]]]},{"name":"reason","description":"Reason for adding the role(s)","optional":true,"type":[[["string"]]]}],"async":true,"returns":[[["Promise","<"],["GuildMember",">"]]],"meta":{"line":67,"file":"GuildMemberRoleStore.js","path":"src/stores"}},{"name":"remove","description":"Removes a role (or multiple roles) from the member.","params":[{"name":"roleOrRoles","description":"The role or roles to remove","type":[[["RoleResolvable"]],[["Array","<"],["RoleResolvable",">"]],[["Collection","<"],["Snowflake",", "],["Role",">"]]]},{"name":"reason","description":"Reason for removing the role(s)","optional":true,"type":[[["string"]]]}],"async":true,"returns":[[["Promise","<"],["GuildMember",">"]]],"meta":{"line":98,"file":"GuildMemberRoleStore.js","path":"src/stores"}},{"name":"set","description":"Sets the roles applied to the member.","examples":["// Set the member's roles to a single role\nguildMember.roles.set(['391156570408615936'])\n  .then(console.log)\n  .catch(console.error);","// Remove all the roles from a member\nguildMember.roles.set([])\n  .then(member => console.log(`Member roles is now of ${member.roles.size} size`))\n  .catch(console.error);"],"params":[{"name":"roles","description":"The roles or role IDs to apply","type":[[["Collection","<"],["Snowflake",", "],["Role",">"]],[["Array","<"],["RoleResolvable",">"]]]},{"name":"reason","description":"Reason for applying the roles","optional":true,"type":[[["string"]]]}],"returns":[[["Promise","<"],["GuildMember",">"]]],"meta":{"line":140,"file":"GuildMemberRoleStore.js","path":"src/stores"}}],"meta":{"line":12,"file":"GuildMemberRoleStore.js","path":"src/stores"}},{"name":"GuildMemberStore","description":"Stores guild members.","extends":[[["DataStore"]]],"methods":[{"name":"resolve","description":"Resolves a GuildMemberResolvable to a GuildMember object.","params":[{"name":"member","description":"The user that is part of the guild","type":[[["GuildMemberResolvable"]]]}],"returns":{"types":[[["GuildMember"]]],"nullable":true},"meta":{"line":35,"file":"GuildMemberStore.js","path":"src/stores"}},{"name":"resolveID","description":"Resolves a GuildMemberResolvable to an member ID string.","params":[{"name":"member","description":"The user that is part of the guild","type":[[["GuildMemberResolvable"]]]}],"returns":{"types":[[["Snowflake"]]],"nullable":true},"meta":{"line":48,"file":"GuildMemberStore.js","path":"src/stores"}},{"name":"fetch","description":"Fetches member(s) from Discord, even if they're offline.","examples":["// Fetch all members from a guild\nguild.members.fetch()\n  .then(console.log)\n  .catch(console.error);","// Fetch a single member\nguild.members.fetch('66564597481480192')\n  .then(console.log)\n  .catch(console.error);","// Fetch a single member without caching\nguild.members.fetch({ user, cache: false })\n  .then(console.log)\n  .catch(console.error);","// Fetch by query\nguild.members.fetch({ query: 'hydra', limit: 1 })\n  .then(console.log)\n  .catch(console.error);"],"params":[{"name":"options","description":"If a UserResolvable, the user to fetch.\nIf undefined, fetches all members.\nIf a query, it limits the results to users with similar usernames.","optional":true,"type":[[["UserResolvable"]],[["FetchMemberOptions"]],[["FetchMembersOptions"]]]}],"returns":[[["Promise","<"],["GuildMember",">"]],[["Promise","<"],["Collection","<"],["Snowflake",", "],["GuildMember",">>"]]],"meta":{"line":96,"file":"GuildMemberStore.js","path":"src/stores"}},{"name":"prune","description":"Prunes members from the guild based on how long they have been inactive.\n<info>It's recommended to set options.count to `false` for large guilds.</info>","examples":["// See how many members will be pruned\nguild.members.prune({ dry: true })\n  .then(pruned => console.log(`This will prune ${pruned} people!`))\n  .catch(console.error);","// Actually prune the members\nguild.members.prune({ days: 1, reason: 'too many people!' })\n  .then(pruned => console.log(`I just pruned ${pruned} people!`))\n  .catch(console.error);"],"params":[{"name":"options","description":"Prune options","optional":true,"type":[[["Object"]]]},{"name":"options.days","description":"Number of days of inactivity required to kick","optional":true,"default":7,"type":[[["number"]]]},{"name":"options.dry","description":"Get number of users that will be kicked, without actually kicking them","optional":true,"default":false,"type":[[["boolean"]]]},{"name":"options.count","description":"Whether or not to return the number of users that have been kicked.","optional":true,"default":true,"type":[[["boolean"]]]},{"name":"options.reason","description":"Reason for this prune","optional":true,"type":[[["string"]]]}],"returns":{"types":[[["Promise","<("],["number","|"],["null",")>"]]],"description":"The number of members that were/will be kicked"},"meta":{"line":127,"file":"GuildMemberStore.js","path":"src/stores"}},{"name":"ban","description":"Bans a user from the guild.","examples":["// Ban a user by ID (or with a user/guild member object)\nguild.members.ban('84484653687267328')\n  .then(user => console.log(`Banned ${user.username || user.id || user} from ${guild.name}`))\n  .catch(console.error);"],"params":[{"name":"user","description":"The user to ban","type":[[["UserResolvable"]]]},{"name":"options","description":"Options for the ban","optional":true,"type":[[["Object"]]]},{"name":"options.days","description":"Number of days of messages to delete","optional":true,"default":0,"type":[[["number"]]]},{"name":"options.reason","description":"Reason for banning","optional":true,"type":[[["string"]]]}],"returns":{"types":[[["Promise","<("],["GuildMember","|"],["User","|"],["Snowflake",")>"]]],"description":"Result object will be resolved as specifically as possible.\nIf the GuildMember cannot be resolved, the User will instead be attempted to be resolved. If that also cannot\nbe resolved, the user ID will be the result."},"meta":{"line":151,"file":"GuildMemberStore.js","path":"src/stores"}},{"name":"unban","description":"Unbans a user from the guild.","examples":["// Unban a user by ID (or with a user/guild member object)\nguild.members.unban('84484653687267328')\n  .then(user => console.log(`Unbanned ${user.username} from ${guild.name}`))\n  .catch(console.error);"],"params":[{"name":"user","description":"The user to unban","type":[[["UserResolvable"]]]},{"name":"reason","description":"Reason for unbanning user","optional":true,"type":[[["string"]]]}],"returns":[[["Promise","<"],["User",">"]]],"meta":{"line":178,"file":"GuildMemberStore.js","path":"src/stores"}}],"meta":{"line":14,"file":"GuildMemberStore.js","path":"src/stores"}},{"name":"GuildStore","description":"Stores guilds.","extends":[[["DataStore"]]],"methods":[{"name":"resolve","description":"Resolves a GuildResolvable to a Guild object.","params":[{"name":"guild","description":"The guild resolvable to identify","type":[[["GuildResolvable"]]]}],"returns":{"types":[[["Guild"]]],"nullable":true},"meta":{"line":29,"file":"GuildStore.js","path":"src/stores"}},{"name":"resolveID","description":"Resolves a GuildResolvable to a Guild ID string.","params":[{"name":"guild","description":"The guild resolvable to identify","type":[[["GuildResolvable"]]]}],"returns":{"types":[[["Snowflake"]]],"nullable":true},"meta":{"line":44,"file":"GuildStore.js","path":"src/stores"}},{"name":"create","description":"Creates a guild.\n<warn>This is only available to bots in fewer than 10 guilds.</warn>","params":[{"name":"name","description":"The name of the guild","type":[[["string"]]]},{"name":"options","description":"Options for the creating","optional":true,"type":[[["Object"]]]},{"name":"options.region","description":"The region for the server, defaults to the closest one available","optional":true,"type":[[["string"]]]},{"name":"options.icon","description":"The icon for the guild","optional":true,"default":null,"type":[[["BufferResolvable"]],[["Base64Resolvable"]]]}],"returns":{"types":[[["Promise","<"],["Guild",">"]]],"description":"The guild that was created"},"meta":{"line":68,"file":"GuildStore.js","path":"src/stores"}}],"meta":{"line":16,"file":"GuildStore.js","path":"src/stores"}},{"name":"MessageStore","description":"Stores messages for text-based channels.","extends":[[["DataStore"]]],"methods":[{"name":"fetch","description":"Gets a message, or messages, from this channel.\n<info>The returned Collection does not contain reaction users of the messages if they were not cached.\nThose need to be fetched separately in such a case.</info>","examples":["// Get message\nchannel.messages.fetch('99539446449315840')\n  .then(message => console.log(message.content))\n  .catch(console.error);","// Get messages\nchannel.messages.fetch({ limit: 10 })\n  .then(messages => console.log(`Received ${messages.size} messages`))\n  .catch(console.error);","// Get messages and filter by user ID\nchannel.messages.fetch()\n  .then(messages => console.log(`${messages.filter(m => m.author.id === '84484653687267328').size} messages`))\n  .catch(console.error);"],"params":[{"name":"message","description":"The ID of the message to fetch, or query parameters.","optional":true,"type":[[["Snowflake"]],[["ChannelLogsQueryOptions"]]]},{"name":"cache","description":"Whether to cache the message(s)","optional":true,"default":true,"type":[[["boolean"]]]}],"returns":[[["Promise","<"],["Message",">"]],[["Promise","<"],["Collection","<"],["Snowflake",", "],["Message",">>"]]],"meta":{"line":61,"file":"MessageStore.js","path":"src/stores"}},{"name":"fetchPinned","description":"Fetches the pinned messages of this channel and returns a collection of them.\n<info>The returned Collection does not contain any reaction data of the messages.\nThose need to be fetched separately.</info>","examples":["// Get pinned messages\nchannel.fetchPinned()\n  .then(messages => console.log(`Received ${messages.size} messages`))\n  .catch(console.error);"],"params":[{"name":"cache","description":"Whether to cache the message(s)","optional":true,"default":true,"type":[[["boolean"]]]}],"returns":[[["Promise","<"],["Collection","<"],["Snowflake",", "],["Message",">>"]]],"meta":{"line":77,"file":"MessageStore.js","path":"src/stores"}},{"name":"resolve","description":"Resolves a MessageResolvable to a Message object.","params":[{"name":"message","description":"The message resolvable to resolve","type":[[["MessageResolvable"]]]}],"returns":{"types":[[["Message"]]],"nullable":true},"meta":{"line":92,"file":"MessageStore.js","path":"src/stores"}},{"name":"resolveID","description":"Resolves a MessageResolvable to a Message ID string.","params":[{"name":"message","description":"The message resolvable to resolve","type":[[["MessageResolvable"]]]}],"returns":{"types":[[["Snowflake"]]],"nullable":true},"meta":{"line":101,"file":"MessageStore.js","path":"src/stores"}},{"name":"remove","description":"Deletes a message, even if it's not cached.","params":[{"name":"message","description":"The message to delete","type":[[["MessageResolvable"]]]},{"name":"reason","description":"Reason for deleting this message, if it does not belong to the client user","optional":true,"type":[[["string"]]]}],"async":true,"meta":{"line":115,"file":"MessageStore.js","path":"src/stores"}}],"meta":{"line":12,"file":"MessageStore.js","path":"src/stores"}},{"name":"PresenceStore","description":"Stores presences.","extends":[[["DataStore"]]],"methods":[{"name":"resolve","description":"Resolves a PresenceResolvable to a Presence object.","params":[{"name":"presence","description":"The presence resolvable to resolve","type":[[["PresenceResolvable"]]]}],"returns":{"types":[[["Presence"]]],"nullable":true},"meta":{"line":33,"file":"PresenceStore.js","path":"src/stores"}},{"name":"resolveID","description":"Resolves a PresenceResolvable to a Presence ID string.","params":[{"name":"presence","description":"The presence resolvable to resolve","type":[[["PresenceResolvable"]]]}],"returns":{"types":[[["Snowflake"]]],"nullable":true},"meta":{"line":45,"file":"PresenceStore.js","path":"src/stores"}}],"meta":{"line":11,"file":"PresenceStore.js","path":"src/stores"}},{"name":"ReactionStore","description":"Stores reactions.","extends":[[["DataStore"]]],"methods":[{"name":"resolve","description":"Resolves a MessageReactionResolvable to a MessageReaction object.","params":[{"name":"reaction","description":"The MessageReaction to resolve","type":[[["MessageReactionResolvable"]]]}],"returns":{"types":[[["MessageReaction"]]],"nullable":true},"meta":{"line":27,"file":"ReactionStore.js","path":"src/stores"}},{"name":"resolveID","description":"Resolves a MessageReactionResolvable to a MessageReaction ID string.","params":[{"name":"reaction","description":"The MessageReaction to resolve","type":[[["MessageReactionResolvable"]]]}],"returns":{"types":[[["Snowflake"]]],"nullable":true},"meta":{"line":36,"file":"ReactionStore.js","path":"src/stores"}},{"name":"removeAll","description":"Removes all reactions from a message.","returns":[[["Promise","<"],["Message",">"]]],"meta":{"line":49,"file":"ReactionStore.js","path":"src/stores"}}],"meta":{"line":11,"file":"ReactionStore.js","path":"src/stores"}},{"name":"ReactionUserStore","description":"A data store to store User models who reacted to a MessageReaction.","extends":[[["DataStore"]]],"methods":[{"name":"fetch","description":"Fetches all the users that gave this reaction. Resolves with a collection of users, mapped by their IDs.","params":[{"name":"options","description":"Options for fetching the users","optional":true,"type":[[["Object"]]]},{"name":"options.limit","description":"The maximum amount of users to fetch, defaults to 100","optional":true,"default":100,"type":[[["number"]]]},{"name":"options.before","description":"Limit fetching users to those with an id lower than the supplied id","optional":true,"type":[[["Snowflake"]]]},{"name":"options.after","description":"Limit fetching users to those with an id greater than the supplied id","optional":true,"type":[[["Snowflake"]]]}],"async":true,"returns":[[["Promise","<"],["Collection","<"],["Snowflake",", "],["User",">>"]]],"meta":{"line":25,"file":"ReactionUserStore.js","path":"src/stores"}},{"name":"remove","description":"Removes a user from this reaction.","params":[{"name":"user","description":"The user to remove the reaction of","optional":true,"default":"this.reaction.message.client.user","type":[[["UserResolvable"]]]}],"returns":[[["Promise","<"],["MessageReaction",">"]]],"meta":{"line":44,"file":"ReactionUserStore.js","path":"src/stores"}},{"name":"resolve","description":"Resolves a data entry to a data Object.","inherits":"DataStore#resolve","inherited":true,"params":[{"name":"idOrInstance","description":"The id or instance of something in this DataStore","type":[[["string"]],[["Object"]]]}],"returns":{"types":[[["Object"]]],"description":"An instance from this DataStore","nullable":true},"meta":{"line":36,"file":"DataStore.js","path":"src/stores"}},{"name":"resolveID","description":"Resolves a data entry to a instance ID.","inherits":"DataStore#resolveID","inherited":true,"params":[{"name":"idOrInstance","description":"The id or instance of something in this DataStore","type":[[["string"]],[["Instance"]]]}],"returns":{"types":[[["Snowflake"]]],"nullable":true},"meta":{"line":47,"file":"DataStore.js","path":"src/stores"}}],"meta":{"line":12,"file":"ReactionUserStore.js","path":"src/stores"}},{"name":"RoleStore","description":"Stores roles.","extends":[[["DataStore"]]],"props":[{"name":"everyone","description":"The `@everyone` role of the guild","readonly":true,"nullable":true,"type":[[["Role"]]],"meta":{"line":118,"file":"RoleStore.js","path":"src/stores"}},{"name":"highest","description":"The role with the highest position in the store","readonly":true,"type":[[["Role"]]],"meta":{"line":127,"file":"RoleStore.js","path":"src/stores"}}],"methods":[{"name":"fetch","description":"Obtains one or more roles from Discord, or the role cache if they're already available.","examples":["// Fetch all roles from the guild\nmessage.guild.roles.fetch()\n  .then(roles => console.log(`There are ${roles.size} roles.`))\n  .catch(console.error);","// Fetch a single role\nmessage.guild.roles.fetch('222078108977594368')\n  .then(role => console.log(`The role color is: ${role.color}`))\n  .catch(console.error);"],"params":[{"name":"id","description":"ID or IDs of the role(s)","optional":true,"type":[[["Snowflake"]]]},{"name":"cache","description":"Whether to cache the new roles objects if it weren't already","optional":true,"default":true,"type":[[["boolean"]]]}],"async":true,"returns":[[["Promise","<("],["Role","|"],["Array","<"],["Role",">)>"]]],"meta":{"line":38,"file":"RoleStore.js","path":"src/stores"}},{"name":"resolve","description":"Resolves a RoleResolvable to a Role object.","params":[{"name":"role","description":"The role resolvable to resolve","type":[[["RoleResolvable"]]]}],"returns":{"types":[[["Role"]]],"nullable":true},"meta":{"line":57,"file":"RoleStore.js","path":"src/stores"}},{"name":"resolveID","description":"Resolves a RoleResolvable to a role ID string.","params":[{"name":"role","description":"The role resolvable to resolve","type":[[["RoleResolvable"]]]}],"returns":{"types":[[["Snowflake"]]],"nullable":true},"meta":{"line":66,"file":"RoleStore.js","path":"src/stores"}},{"name":"create","description":"Creates a new role in the guild with given information.\n<warn>The position will silently reset to 1 if an invalid one is provided, or none.</warn>","examples":["// Create a new role\nguild.roles.create()\n  .then(console.log)\n  .catch(console.error);","// Create a new role with data and a reason\nguild.roles.create({\n  data: {\n    name: 'Super Cool People',\n    color: 'BLUE',\n  },\n  reason: 'we needed a role for Super Cool People',\n})\n  .then(console.log)\n  .catch(console.error);"],"params":[{"name":"options","description":"Options","optional":true,"type":[[["Object"]]]},{"name":"options.data","description":"The data to create the role with","optional":true,"type":[[["RoleData"]]]},{"name":"options.reason","description":"Reason for creating this role","optional":true,"type":[[["string"]]]}],"returns":[[["Promise","<"],["Role",">"]]],"meta":{"line":99,"file":"RoleStore.js","path":"src/stores"}}],"meta":{"line":13,"file":"RoleStore.js","path":"src/stores"}},{"name":"UserStore","description":"A data store to store User models.","extends":[[["DataStore"]]],"methods":[{"name":"resolve","description":"Resolves a UserResolvable to a User object.","params":[{"name":"user","description":"The UserResolvable to identify","type":[[["UserResolvable"]]]}],"returns":{"types":[[["User"]]],"nullable":true},"meta":{"line":31,"file":"UserStore.js","path":"src/stores"}},{"name":"resolveID","description":"Resolves a UserResolvable to a user ID string.","params":[{"name":"user","description":"The UserResolvable to identify","type":[[["UserResolvable"]]]}],"returns":{"types":[[["Snowflake"]]],"nullable":true},"meta":{"line":42,"file":"UserStore.js","path":"src/stores"}},{"name":"fetch","description":"Obtains a user from Discord, or the user cache if it's already available.","params":[{"name":"id","description":"ID of the user","type":[[["Snowflake"]]]},{"name":"cache","description":"Whether to cache the new user object if it isn't already","optional":true,"default":true,"type":[[["boolean"]]]}],"async":true,"returns":[[["Promise","<"],["User",">"]]],"meta":{"line":54,"file":"UserStore.js","path":"src/stores"}}],"meta":{"line":13,"file":"UserStore.js","path":"src/stores"}},{"name":"VoiceStateStore","description":"Stores voice states.","extends":[[["DataStore"]]],"methods":[{"name":"resolve","description":"Resolves a data entry to a data Object.","inherits":"DataStore#resolve","inherited":true,"params":[{"name":"idOrInstance","description":"The id or instance of something in this DataStore","type":[[["string"]],[["Object"]]]}],"returns":{"types":[[["Object"]]],"description":"An instance from this DataStore","nullable":true},"meta":{"line":36,"file":"DataStore.js","path":"src/stores"}},{"name":"resolveID","description":"Resolves a data entry to a instance ID.","inherits":"DataStore#resolveID","inherited":true,"params":[{"name":"idOrInstance","description":"The id or instance of something in this DataStore","type":[[["string"]],[["Instance"]]]}],"returns":{"types":[[["Snowflake"]]],"nullable":true},"meta":{"line":47,"file":"DataStore.js","path":"src/stores"}}],"meta":{"line":11,"file":"VoiceStateStore.js","path":"src/stores"}},{"name":"APIMessage","description":"Represents a message to be sent to the API.","construct":{"name":"APIMessage","params":[{"name":"target","description":"The target for this message to be sent to","type":[[["MessageTarget"]]]},{"name":"options","description":"Options passed in from send","type":[[["MessageOptions"]],[["WebhookMessageOptions"]]]}]},"props":[{"name":"target","description":"The target for this message to be sent to","type":[[["MessageTarget"]]],"meta":{"line":23,"file":"APIMessage.js","path":"src/structures"}},{"name":"options","description":"Options passed in from send","type":[[["MessageOptions"]],[["WebhookMessageOptions"]]],"meta":{"line":29,"file":"APIMessage.js","path":"src/structures"}},{"name":"data","description":"Data sendable to the API","nullable":true,"type":[[["Object"]]],"meta":{"line":35,"file":"APIMessage.js","path":"src/structures"}},{"name":"files","description":"Files sendable to the API","nullable":true,"type":[[["Array","<"],["Object",">"]]],"meta":{"line":41,"file":"APIMessage.js","path":"src/structures"}},{"name":"isWebhook","description":"Whether or not the target is a webhook","readonly":true,"type":[[["boolean"]]],"meta":{"line":49,"file":"APIMessage.js","path":"src/structures"}},{"name":"isUser","description":"Whether or not the target is a user","readonly":true,"type":[[["boolean"]]],"meta":{"line":60,"file":"APIMessage.js","path":"src/structures"}}],"methods":[{"name":"makeContent","description":"Makes the content of this message.","returns":{"types":[[["string"]],[["Array","<"],["string",">"]]],"nullable":true},"meta":{"line":70,"file":"APIMessage.js","path":"src/structures"}},{"name":"resolveData","description":"Resolves data.","returns":[[["APIMessage"]]],"meta":{"line":124,"file":"APIMessage.js","path":"src/structures"}},{"name":"resolveFiles","description":"Resolves files.","async":true,"returns":[[["Promise","<"],["APIMessage",">"]]],"meta":{"line":168,"file":"APIMessage.js","path":"src/structures"}},{"name":"split","description":"Converts this APIMessage into an array of APIMessages for each split content","returns":[[["Array","<"],["APIMessage",">"]]],"meta":{"line":198,"file":"APIMessage.js","path":"src/structures"}},{"name":"resolveFile","description":"Resolves a single file into an object sendable to the API.","scope":"static","params":[{"name":"fileLike","description":"Something that could be resolved to a file","type":[[["BufferResolvable"]],[["Stream"]],[["FileOptions"]],[["MessageAttachment"]]]}],"async":true,"returns":[[["Object"]]],"meta":{"line":230,"file":"APIMessage.js","path":"src/structures"}},{"name":"partitionMessageAdditions","description":"Partitions embeds and attachments.","scope":"static","params":[{"name":"items","description":"Items to partition","type":[[["Array","<("],["MessageEmbed","|"],["MessageAttachment",")>"]]]}],"returns":[[["Array","<"],["Array","<"],["MessageEmbed",">, "],["Array","<"],["MessageAttachment",">>"]]],"meta":{"line":266,"file":"APIMessage.js","path":"src/structures"}},{"name":"transformOptions","description":"Transforms the user-level arguments into a final options object. Passing a transformed options object alone into\nthis method will keep it the same, allowing for the reuse of the final options object.","scope":"static","params":[{"name":"content","description":"Content to send","optional":true,"type":[[["StringResolvable"]]]},{"name":"options","description":"Options to use","optional":true,"default":"{}","type":[[["MessageOptions"]],[["WebhookMessageOptions"]],[["MessageAdditions"]]]},{"name":"extra","description":"Extra options to add onto transformed options","optional":true,"default":"{}","type":[[["MessageOptions"]],[["WebhookMessageOptions"]]]},{"name":"isWebhook","description":"Whether or not to use WebhookMessageOptions as the result","optional":true,"default":false,"type":[[["boolean"]]]}],"returns":[[["MessageOptions"]],[["WebhookMessageOptions"]]],"meta":{"line":289,"file":"APIMessage.js","path":"src/structures"}},{"name":"create","description":"Creates an `APIMessage` from user-level arguments.","scope":"static","params":[{"name":"target","description":"Target to send to","type":[[["MessageTarget"]]]},{"name":"content","description":"Content to send","optional":true,"type":[[["StringResolvable"]]]},{"name":"options","description":"Options to use","optional":true,"default":"{}","type":[[["MessageOptions"]],[["WebhookMessageOptions"]],[["MessageAdditions"]]]},{"name":"extra","description":"Extra options to add onto transformed options","optional":true,"default":"{}","type":[[["MessageOptions"]],[["WebhookMessageOptions"]]]}],"returns":[[["MessageOptions"]],[["WebhookMessageOptions"]]],"meta":{"line":324,"file":"APIMessage.js","path":"src/structures"}}],"meta":{"line":18,"file":"APIMessage.js","path":"src/structures"}},{"name":"Base","description":"Represents a data model that is identifiable by a Snowflake (i.e. Discord API data models).","props":[{"name":"client","description":"The client that instantiated this","readonly":true,"type":[[["Client"]]],"meta":{"line":10,"file":"Base.js","path":"src/structures"}}],"meta":{"line":9,"file":"Base.js","path":"src/structures"}},{"name":"CategoryChannel","description":"Represents a guild category channel on Discord.","extends":[[["GuildChannel"]]],"props":[{"name":"children","description":"Channels that are a part of this category","readonly":true,"nullable":true,"type":[[["Collection","<"],["Snowflake",", "],["GuildChannel",">"]]],"meta":{"line":15,"file":"CategoryChannel.js","path":"src/structures"}},{"name":"guild","description":"The guild the channel is in","type":[[["Guild"]]],"meta":{"line":33,"file":"GuildChannel.js","path":"src/structures"}},{"name":"name","description":"The name of the guild channel","type":[[["string"]]],"meta":{"line":43,"file":"GuildChannel.js","path":"src/structures"}},{"name":"rawPosition","description":"The raw position of the channel from discord","type":[[["number"]]],"meta":{"line":49,"file":"GuildChannel.js","path":"src/structures"}},{"name":"parentID","description":"The ID of the category parent of this channel","nullable":true,"type":[[["Snowflake"]]],"meta":{"line":55,"file":"GuildChannel.js","path":"src/structures"}},{"name":"permissionOverwrites","description":"A map of permission overwrites in this channel for roles and users","type":[[["Collection","<"],["Snowflake",", "],["PermissionOverwrites",">"]]],"meta":{"line":61,"file":"GuildChannel.js","path":"src/structures"}},{"name":"parent","description":"The category parent of this channel","readonly":true,"nullable":true,"type":[[["CategoryChannel"]]],"meta":{"line":74,"file":"GuildChannel.js","path":"src/structures"}},{"name":"permissionsLocked","description":"If the permissionOverwrites match the parent channel, null if no parent","readonly":true,"nullable":true,"type":[[["boolean"]]],"meta":{"line":83,"file":"GuildChannel.js","path":"src/structures"}},{"name":"position","description":"The position of the channel","readonly":true,"type":[[["number"]]],"meta":{"line":99,"file":"GuildChannel.js","path":"src/structures"}},{"name":"members","description":"A collection of members that can see this channel, mapped by their ID","readonly":true,"type":[[["Collection","<"],["Snowflake",", "],["GuildMember",">"]]],"meta":{"line":275,"file":"GuildChannel.js","path":"src/structures"}},{"name":"deletable","description":"Whether the channel is deletable by the client user","readonly":true,"type":[[["boolean"]]],"meta":{"line":525,"file":"GuildChannel.js","path":"src/structures"}},{"name":"manageable","description":"Whether the channel is manageable by the client user","readonly":true,"type":[[["boolean"]]],"meta":{"line":534,"file":"GuildChannel.js","path":"src/structures"}},{"name":"viewable","description":"Whether the channel is viewable by the client user","readonly":true,"type":[[["boolean"]]],"meta":{"line":545,"file":"GuildChannel.js","path":"src/structures"}},{"name":"type","description":"The type of the channel, either:\n* `dm` - a DM channel\n* `text` - a guild text channel\n* `voice` - a guild voice channel\n* `category` - a guild category channel\n* `news` - a guild news channel\n* `store` - a guild store channel\n* `unknown` - a generic channel of unknown type, could be Channel or GuildChannel","type":[[["string"]]],"meta":{"line":27,"file":"Channel.js","path":"src/structures"}},{"name":"deleted","description":"Whether the channel has been deleted","type":[[["boolean"]]],"meta":{"line":33,"file":"Channel.js","path":"src/structures"}},{"name":"id","description":"The unique ID of the channel","type":[[["Snowflake"]]],"meta":{"line":43,"file":"Channel.js","path":"src/structures"}},{"name":"createdTimestamp","description":"The timestamp the channel was created at","readonly":true,"type":[[["number"]]],"meta":{"line":51,"file":"Channel.js","path":"src/structures"}},{"name":"createdAt","description":"The time the channel was created at","readonly":true,"type":[[["Date"]]],"meta":{"line":60,"file":"Channel.js","path":"src/structures"}},{"name":"client","description":"The client that instantiated this","readonly":true,"type":[[["Client"]]],"meta":{"line":10,"file":"Base.js","path":"src/structures"}}],"methods":[{"name":"permissionsFor","description":"Gets the overall set of permissions for a member or role in this channel, taking into account channel overwrites.","inherits":"GuildChannel#permissionsFor","inherited":true,"params":[{"name":"memberOrRole","description":"The member or role to obtain the overall permissions for","type":[[["GuildMemberResolvable"]],[["RoleResolvable"]]]}],"returns":{"types":[[["Readonly","<"],["Permissions",">"]]],"nullable":true},"meta":{"line":109,"file":"GuildChannel.js","path":"src/structures"}},{"name":"memberPermissions","description":"Gets the overall set of permissions for a member in this channel, taking into account channel overwrites.","access":"private","inherits":"GuildChannel#memberPermissions","inherited":true,"params":[{"name":"member","description":"The member to obtain the overall permissions for","type":[[["GuildMember"]]]}],"returns":[[["Readonly","<"],["Permissions",">"]]],"meta":{"line":149,"file":"GuildChannel.js","path":"src/structures"}},{"name":"rolePermissions","description":"Gets the overall set of permissions for a role in this channel, taking into account channel overwrites.","access":"private","inherits":"GuildChannel#rolePermissions","inherited":true,"params":[{"name":"role","description":"The role to obtain the overall permissions for","type":[[["Role"]]]}],"returns":[[["Readonly","<"],["Permissions",">"]]],"meta":{"line":175,"file":"GuildChannel.js","path":"src/structures"}},{"name":"overwritePermissions","description":"Replaces the permission overwrites in this channel.","inherits":"GuildChannel#overwritePermissions","inherited":true,"examples":["channel.overwritePermissions({\npermissionOverwrites: [\n  {\n     id: message.author.id,\n     deny: ['VIEW_CHANNEL'],\n  },\n],\n  reason: 'Needed to change permissions'\n});"],"params":[{"name":"options","description":"Options","optional":true,"type":[[["Object"]]]},{"name":"options.permissionOverwrites","description":"Permission overwrites the channel gets updated with","optional":true,"type":[[["Array","<"],["OverwriteResolvable",">"]],[["Collection","<"],["Snowflake",", "],["OverwriteResolvable",">"]]]},{"name":"options.reason","description":"Reason for updating the channel overwrites","optional":true,"type":[[["string"]]]}],"returns":[[["Promise","<"],["GuildChannel",">"]]],"meta":{"line":207,"file":"GuildChannel.js","path":"src/structures"}},{"name":"updateOverwrite","description":"Updates Overwrites for a user or role in this channel. (creates if non-existent)","inherits":"GuildChannel#updateOverwrite","inherited":true,"examples":["// Update or Create permission overwrites for a message author\nmessage.channel.updateOverwrite(message.author, {\n  SEND_MESSAGES: false\n})\n  .then(channel => console.log(channel.permissionOverwrites.get(message.author.id)))\n  .catch(console.error);"],"params":[{"name":"userOrRole","description":"The user or role to update","type":[[["RoleResolvable"]],[["UserResolvable"]]]},{"name":"options","description":"The options for the update","type":[[["PermissionOverwriteOption"]]]},{"name":"reason","description":"Reason for creating/editing this overwrite","optional":true,"type":[[["string"]]]}],"returns":[[["Promise","<"],["GuildChannel",">"]]],"meta":{"line":225,"file":"GuildChannel.js","path":"src/structures"}},{"name":"createOverwrite","description":"Overwrites the permissions for a user or role in this channel. (replaces if existent)","inherits":"GuildChannel#createOverwrite","inherited":true,"examples":["// Create or Replace permissions overwrites for a message author\nmessage.channel.createOverwrite(message.author, {\n  SEND_MESSAGES: false\n})\n  .then(channel => console.log(channel.permissionOverwrites.get(message.author.id)))\n  .catch(console.error);"],"params":[{"name":"userOrRole","description":"The user or role to update","type":[[["RoleResolvable"]],[["UserResolvable"]]]},{"name":"options","description":"The options for the update","type":[[["PermissionOverwriteOption"]]]},{"name":"reason","description":"Reason for creating/editing this overwrite","optional":true,"type":[[["string"]]]}],"returns":[[["Promise","<"],["GuildChannel",">"]]],"meta":{"line":248,"file":"GuildChannel.js","path":"src/structures"}},{"name":"lockPermissions","description":"Locks in the permission overwrites from the parent channel.","inherits":"GuildChannel#lockPermissions","inherited":true,"returns":[[["Promise","<"],["GuildChannel",">"]]],"meta":{"line":264,"file":"GuildChannel.js","path":"src/structures"}},{"name":"edit","description":"Edits the channel.","inherits":"GuildChannel#edit","inherited":true,"examples":["// Edit a channel\nchannel.edit({ name: 'new-channel' })\n  .then(console.log)\n  .catch(console.error);"],"params":[{"name":"data","description":"The new data for the channel","type":[[["ChannelData"]]]},{"name":"reason","description":"Reason for editing this channel","optional":true,"type":[[["string"]]]}],"async":true,"returns":[[["Promise","<"],["GuildChannel",">"]]],"meta":{"line":313,"file":"GuildChannel.js","path":"src/structures"}},{"name":"setName","description":"Sets a new name for the guild channel.","inherits":"GuildChannel#setName","inherited":true,"examples":["// Set a new channel name\nchannel.setName('not_general')\n  .then(newChannel => console.log(`Channel's new name is ${newChannel.name}`))\n  .catch(console.error);"],"params":[{"name":"name","description":"The new name for the guild channel","type":[[["string"]]]},{"name":"reason","description":"Reason for changing the guild channel's name","optional":true,"type":[[["string"]]]}],"returns":[[["Promise","<"],["GuildChannel",">"]]],"meta":{"line":359,"file":"GuildChannel.js","path":"src/structures"}},{"name":"setParent","description":"Sets the category parent of this channel.","inherits":"GuildChannel#setParent","inherited":true,"examples":["// Add a parent to a channel\nmessage.channel.setParent('355908108431917066', { lockPermissions: false })\n  .then(channel => console.log(`New parent of ${message.channel.name}: ${channel.name}`))\n  .catch(console.error);"],"params":[{"name":"channel","description":"Parent channel","type":[[["CategoryChannel"]],[["Snowflake"]]]},{"name":"options","description":"Options to pass","optional":true,"default":"{}","type":[[["Object"]]]},{"name":"options.lockPermissions","description":"Lock the permissions to what the parent's permissions are","optional":true,"default":true,"type":[[["boolean"]]]},{"name":"options.reason","description":"Reason for modifying the parent of this channel","optional":true,"type":[[["string"]]]}],"returns":[[["Promise","<"],["GuildChannel",">"]]],"meta":{"line":376,"file":"GuildChannel.js","path":"src/structures"}},{"name":"setTopic","description":"Sets a new topic for the guild channel.","inherits":"GuildChannel#setTopic","inherited":true,"examples":["// Set a new channel topic\nchannel.setTopic('needs more rate limiting')\n  .then(newChannel => console.log(`Channel's new topic is ${newChannel.topic}`))\n  .catch(console.error);"],"params":[{"name":"topic","description":"The new topic for the guild channel","type":[[["string"]]]},{"name":"reason","description":"Reason for changing the guild channel's topic","optional":true,"type":[[["string"]]]}],"returns":[[["Promise","<"],["GuildChannel",">"]]],"meta":{"line":394,"file":"GuildChannel.js","path":"src/structures"}},{"name":"setPosition","description":"Sets a new position for the guild channel.","inherits":"GuildChannel#setPosition","inherited":true,"examples":["// Set a new channel position\nchannel.setPosition(2)\n  .then(newChannel => console.log(`Channel's new position is ${newChannel.position}`))\n  .catch(console.error);"],"params":[{"name":"position","description":"The new position for the guild channel","type":[[["number"]]]},{"name":"options","description":"Options for setting position","optional":true,"type":[[["Object"]]]},{"name":"options.relative","description":"Change the position relative to its current value","optional":true,"default":false,"type":[[["boolean"]]]},{"name":"options.reason","description":"Reason for changing the position","optional":true,"type":[[["string"]]]}],"returns":[[["Promise","<"],["GuildChannel",">"]]],"meta":{"line":411,"file":"GuildChannel.js","path":"src/structures"}},{"name":"createInvite","description":"Creates an invite to this guild channel.","inherits":"GuildChannel#createInvite","inherited":true,"examples":["// Create an invite to a channel\nchannel.createInvite()\n  .then(invite => console.log(`Created an invite with a code of ${invite.code}`))\n  .catch(console.error);"],"params":[{"name":"options","description":"Options for the invite","optional":true,"default":"{}","type":[[["Object"]]]},{"name":"options.temporary","description":"Whether members that joined via the invite should be automatically\nkicked after 24 hours if they have not yet received a role","optional":true,"default":false,"type":[[["boolean"]]]},{"name":"options.maxAge","description":"How long the invite should last (in seconds, 0 for forever)","optional":true,"default":86400,"type":[[["number"]]]},{"name":"options.maxUses","description":"Maximum number of uses","optional":true,"default":0,"type":[[["number"]]]},{"name":"options.unique","description":"Create a unique invite, or use an existing one with similar settings","optional":true,"default":false,"type":[[["boolean"]]]},{"name":"options.reason","description":"Reason for creating this","optional":true,"type":[[["string"]]]}],"returns":[[["Promise","<"],["Invite",">"]]],"meta":{"line":439,"file":"GuildChannel.js","path":"src/structures"}},{"name":"fetchInvites","description":"Fetches a collection of invites to this guild channel.\nResolves with a collection mapping invites by their codes.","inherits":"GuildChannel#fetchInvites","inherited":true,"async":true,"returns":[[["Promise","<"],["Collection","<"],["string",", "],["Invite",">>"]]],"meta":{"line":451,"file":"GuildChannel.js","path":"src/structures"}},{"name":"clone","description":"Clones this channel.","inherits":"GuildChannel#clone","inherited":true,"params":[{"name":"options","description":"The options","optional":true,"type":[[["Object"]]]},{"name":"options.name","description":"Name of the new channel","optional":true,"default":"this.name","type":[[["string"]]]},{"name":"options.permissionOverwrites","description":"Permission overwrites of the new channel","optional":true,"default":"this.permissionOverwrites","type":[[["Array","<"],["OverwriteResolvable",">"]],[["Collection","<"],["Snowflake",", "],["OverwriteResolvable",">"]]]},{"name":"options.type","description":"Type of the new channel","optional":true,"default":"this.type","type":[[["string"]]]},{"name":"options.topic","description":"Topic of the new channel (only text)","optional":true,"default":"this.topic","type":[[["string"]]]},{"name":"options.nsfw","description":"Whether the new channel is nsfw (only text)","optional":true,"default":"this.nsfw","type":[[["boolean"]]]},{"name":"options.bitrate","description":"Bitrate of the new channel in bits (only voice)","optional":true,"default":"this.bitrate","type":[[["number"]]]},{"name":"options.userLimit","description":"Maximum amount of users allowed in the new channel (only voice)","optional":true,"default":"this.userLimit","type":[[["number"]]]},{"name":"options.rateLimitPerUser","description":"Ratelimit per user for the new channel (only text)","optional":true,"default":"ThisType.rateLimitPerUser","type":[[["number"]]]},{"name":"options.parent","description":"Parent of the new channel","optional":true,"default":"this.parent","type":[[["ChannelResolvable"]]]},{"name":"options.reason","description":"Reason for cloning this channel","optional":true,"type":[[["string"]]]}],"returns":[[["Promise","<"],["GuildChannel",">"]]],"meta":{"line":478,"file":"GuildChannel.js","path":"src/structures"}},{"name":"equals","description":"Checks if this channel has the same type, topic, position, name, overwrites and ID as another channel.\nIn most cases, a simple `channel.id === channel2.id` will do, and is much faster too.","inherits":"GuildChannel#equals","inherited":true,"params":[{"name":"channel","description":"Channel to compare with","type":[[["GuildChannel"]]]}],"returns":[[["boolean"]]],"meta":{"line":501,"file":"GuildChannel.js","path":"src/structures"}},{"name":"delete","description":"Deletes this channel.","inherits":"GuildChannel#delete","inherited":true,"examples":["// Delete the channel\nchannel.delete('making room for new channels')\n  .then(console.log)\n  .catch(console.error);"],"params":[{"name":"reason","description":"Reason for deleting this channel","optional":true,"type":[[["string"]]]}],"returns":[[["Promise","<"],["GuildChannel",">"]]],"meta":{"line":562,"file":"GuildChannel.js","path":"src/structures"}},{"name":"toString","description":"When concatenated with a string, this automatically returns the channel's mention instead of the Channel object.","inherits":"Channel#toString","inherited":true,"examples":["// Logs: Hello from <#123456789012345678>!\nconsole.log(`Hello from ${channel}!`);"],"returns":[[["string"]]],"meta":{"line":71,"file":"Channel.js","path":"src/structures"}},{"name":"fetch","description":"Fetches this channel.","inherits":"Channel#fetch","inherited":true,"returns":[[["Promise","<"],["Channel",">"]]],"meta":{"line":92,"file":"Channel.js","path":"src/structures"}}],"meta":{"line":9,"file":"CategoryChannel.js","path":"src/structures"}},{"name":"Channel","description":"Represents any channel on Discord.","extends":[[["Base"]]],"props":[{"name":"type","description":"The type of the channel, either:\n* `dm` - a DM channel\n* `text` - a guild text channel\n* `voice` - a guild voice channel\n* `category` - a guild category channel\n* `news` - a guild news channel\n* `store` - a guild store channel\n* `unknown` - a generic channel of unknown type, could be Channel or GuildChannel","type":[[["string"]]],"meta":{"line":27,"file":"Channel.js","path":"src/structures"}},{"name":"deleted","description":"Whether the channel has been deleted","type":[[["boolean"]]],"meta":{"line":33,"file":"Channel.js","path":"src/structures"}},{"name":"id","description":"The unique ID of the channel","type":[[["Snowflake"]]],"meta":{"line":43,"file":"Channel.js","path":"src/structures"}},{"name":"createdTimestamp","description":"The timestamp the channel was created at","readonly":true,"type":[[["number"]]],"meta":{"line":51,"file":"Channel.js","path":"src/structures"}},{"name":"createdAt","description":"The time the channel was created at","readonly":true,"type":[[["Date"]]],"meta":{"line":60,"file":"Channel.js","path":"src/structures"}},{"name":"client","description":"The client that instantiated this","readonly":true,"type":[[["Client"]]],"meta":{"line":10,"file":"Base.js","path":"src/structures"}}],"methods":[{"name":"toString","description":"When concatenated with a string, this automatically returns the channel's mention instead of the Channel object.","examples":["// Logs: Hello from <#123456789012345678>!\nconsole.log(`Hello from ${channel}!`);"],"returns":[[["string"]]],"meta":{"line":71,"file":"Channel.js","path":"src/structures"}},{"name":"delete","description":"Deletes this channel.","examples":["// Delete the channel\nchannel.delete()\n  .then(console.log)\n  .catch(console.error);"],"returns":[[["Promise","<"],["Channel",">"]]],"meta":{"line":84,"file":"Channel.js","path":"src/structures"}},{"name":"fetch","description":"Fetches this channel.","returns":[[["Promise","<"],["Channel",">"]]],"meta":{"line":92,"file":"Channel.js","path":"src/structures"}}],"meta":{"line":12,"file":"Channel.js","path":"src/structures"}},{"name":"ClientApplication","description":"Represents a Client OAuth2 Application.","extends":[[["Base"]]],"props":[{"name":"id","description":"The ID of the app","type":[[["Snowflake"]]],"meta":{"line":25,"file":"ClientApplication.js","path":"src/structures"}},{"name":"name","description":"The name of the app","type":[[["string"]]],"meta":{"line":31,"file":"ClientApplication.js","path":"src/structures"}},{"name":"description","description":"The app's description","type":[[["string"]]],"meta":{"line":37,"file":"ClientApplication.js","path":"src/structures"}},{"name":"icon","description":"The app's icon hash","type":[[["string"]]],"meta":{"line":43,"file":"ClientApplication.js","path":"src/structures"}},{"name":"cover","description":"The app's cover image","nullable":true,"type":[[["string"]]],"meta":{"line":49,"file":"ClientApplication.js","path":"src/structures"}},{"name":"rpcOrigins","description":"The app's RPC origins, if enabled","type":[[["Array","<"],["string",">"]]],"meta":{"line":55,"file":"ClientApplication.js","path":"src/structures"}},{"name":"botRequireCodeGrant","description":"If this app's bot requires a code grant when using the OAuth2 flow","nullable":true,"type":[[["boolean"]]],"meta":{"line":61,"file":"ClientApplication.js","path":"src/structures"}},{"name":"botPublic","description":"If this app's bot is public","nullable":true,"type":[[["boolean"]]],"meta":{"line":67,"file":"ClientApplication.js","path":"src/structures"}},{"name":"owner","description":"The owner of this OAuth application","type":[[["User"]],[["Team"]]],"meta":{"line":73,"file":"ClientApplication.js","path":"src/structures"}},{"name":"createdTimestamp","description":"The timestamp the app was created at","readonly":true,"type":[[["number"]]],"meta":{"line":85,"file":"ClientApplication.js","path":"src/structures"}},{"name":"createdAt","description":"The time the app was created at","readonly":true,"type":[[["Date"]]],"meta":{"line":94,"file":"ClientApplication.js","path":"src/structures"}},{"name":"client","description":"The client that instantiated this","readonly":true,"type":[[["Client"]]],"meta":{"line":10,"file":"Base.js","path":"src/structures"}}],"methods":[{"name":"iconURL","description":"A link to the application's icon.","params":[{"name":"options","description":"Options for the Image URL","optional":true,"default":"{}","type":[[["ImageURLOptions"]]]}],"returns":{"types":[[["string"]]],"description":"URL to the icon","nullable":true},"meta":{"line":103,"file":"ClientApplication.js","path":"src/structures"}},{"name":"coverImage","description":"A link to this application's cover image.","params":[{"name":"options","description":"Options for the Image URL","optional":true,"default":"{}","type":[[["ImageURLOptions"]]]}],"returns":{"types":[[["string"]]],"description":"URL to the cover image","nullable":true},"meta":{"line":113,"file":"ClientApplication.js","path":"src/structures"}},{"name":"fetchAssets","description":"Gets the clients rich presence assets.","returns":[[["Promise","<"],["Array","<"],["ClientAsset",">>"]]],"meta":{"line":132,"file":"ClientApplication.js","path":"src/structures"}},{"name":"toString","description":"When concatenated with a string, this automatically returns the application's name instead of the\nClientApplication object.","examples":["// Logs: Application name: My App\nconsole.log(`Application name: ${application}`);"],"returns":[[["string"]]],"meta":{"line":149,"file":"ClientApplication.js","path":"src/structures"}}],"meta":{"line":15,"file":"ClientApplication.js","path":"src/structures"}},{"name":"ClientPresence","construct":{"name":"ClientPresence","params":[{"name":"client","description":"The instantiating client","type":[[["Client"]]]},{"name":"data","description":"The data for the client presence","optional":true,"default":"{}","type":[[["Object"]]]}]},"meta":{"line":13,"file":"ClientPresence.js","path":"src/structures"}},{"name":"ClientUser","description":"Represents the logged in client's Discord user.","extends":[[["User"]]],"props":[{"name":"verified","description":"Whether or not this account has been verified","type":[[["boolean"]]],"meta":{"line":23,"file":"ClientUser.js","path":"src/structures"}},{"name":"mfaEnabled","description":"If the bot's {@link ClientApplication#owner Owner} has MFA enabled on their account","nullable":true,"type":[[["boolean"]]],"meta":{"line":29,"file":"ClientUser.js","path":"src/structures"}},{"name":"presence","description":"ClientUser's presence","readonly":true,"type":[[["Presence"]]],"meta":{"line":39,"file":"ClientUser.js","path":"src/structures"}},{"name":"id","description":"The ID of the user","type":[[["Snowflake"]]],"meta":{"line":26,"file":"User.js","path":"src/structures"}},{"name":"bot","description":"Whether or not the user is a bot","type":[[["boolean"]]],"meta":{"line":28,"file":"User.js","path":"src/structures"}},{"name":"username","description":"The username of the user","type":[[["string"]]],"meta":{"line":39,"file":"User.js","path":"src/structures"}},{"name":"discriminator","description":"A discriminator based on username for the user","type":[[["string"]]],"meta":{"line":46,"file":"User.js","path":"src/structures"}},{"name":"avatar","description":"The ID of the user's avatar","nullable":true,"type":[[["string"]]],"meta":{"line":53,"file":"User.js","path":"src/structures"}},{"name":"system","description":"Whether the user is an Official Discord System user (part of the urgent message system)","nullable":true,"type":[[["boolean"]]],"meta":{"line":62,"file":"User.js","path":"src/structures"}},{"name":"locale","description":"The locale of the user's client (ISO 639-1)","nullable":true,"type":[[["string"]]],"meta":{"line":69,"file":"User.js","path":"src/structures"}},{"name":"lastMessageID","description":"The ID of the last message sent by the user, if one was sent","nullable":true,"type":[[["Snowflake"]]],"meta":{"line":80,"file":"User.js","path":"src/structures"}},{"name":"lastMessageChannelID","description":"The ID of the channel for the last message sent by the user, if one was sent","nullable":true,"type":[[["Snowflake"]]],"meta":{"line":86,"file":"User.js","path":"src/structures"}},{"name":"partial","description":"Whether this User is a partial","readonly":true,"type":[[["boolean"]]],"meta":{"line":94,"file":"User.js","path":"src/structures"}},{"name":"createdTimestamp","description":"The timestamp the user was created at","readonly":true,"type":[[["number"]]],"meta":{"line":103,"file":"User.js","path":"src/structures"}},{"name":"createdAt","description":"The time the user was created at","readonly":true,"type":[[["Date"]]],"meta":{"line":112,"file":"User.js","path":"src/structures"}},{"name":"lastMessage","description":"The Message object of the last message sent by the user, if one was sent","readonly":true,"nullable":true,"type":[[["Message"]]],"meta":{"line":121,"file":"User.js","path":"src/structures"}},{"name":"defaultAvatarURL","description":"A link to the user's default avatar","readonly":true,"type":[[["string"]]],"meta":{"line":153,"file":"User.js","path":"src/structures"}},{"name":"tag","description":"The Discord \"tag\" (e.g. `hydrabolt#0001`) for this user","readonly":true,"type":[[["string"]]],"meta":{"line":172,"file":"User.js","path":"src/structures"}},{"name":"dmChannel","description":"The DM between the client's user and this user","readonly":true,"nullable":true,"type":[[["DMChannel"]]],"meta":{"line":211,"file":"User.js","path":"src/structures"}},{"name":"client","description":"The client that instantiated this","readonly":true,"type":[[["Client"]]],"meta":{"line":10,"file":"Base.js","path":"src/structures"}}],"methods":[{"name":"setUsername","description":"Sets the username of the logged in client.\n<info>Changing usernames in Discord is heavily rate limited, with only 2 requests\nevery hour. Use this sparingly!</info>","examples":["// Set username\nclient.user.setUsername('discordjs')\n  .then(user => console.log(`My new username is ${user.username}`))\n  .catch(console.error);"],"params":[{"name":"username","description":"The new username","type":[[["string"]]]}],"returns":[[["Promise","<"],["ClientUser",">"]]],"meta":{"line":65,"file":"ClientUser.js","path":"src/structures"}},{"name":"setAvatar","description":"Sets the avatar of the logged in client.","examples":["// Set avatar\nclient.user.setAvatar('./avatar.png')\n  .then(user => console.log(`New avatar set!`))\n  .catch(console.error);"],"params":[{"name":"avatar","description":"The new avatar","type":[[["BufferResolvable"]],[["Base64Resolvable"]]]}],"async":true,"returns":[[["Promise","<"],["ClientUser",">"]]],"meta":{"line":79,"file":"ClientUser.js","path":"src/structures"}},{"name":"setPresence","description":"Sets the full presence of the client user.","examples":["// Set the client user's presence\nclient.user.setPresence({ activity: { name: 'with discord.js' }, status: 'idle' })\n  .then(console.log)\n  .catch(console.error);"],"params":[{"name":"data","description":"Data for the presence","type":[[["PresenceData"]]]}],"returns":[[["Promise","<"],["Presence",">"]]],"meta":{"line":107,"file":"ClientUser.js","path":"src/structures"}},{"name":"setStatus","description":"Sets the status of the client user.","examples":["// Set the client user's status\nclient.user.setStatus('idle')\n  .then(console.log)\n  .catch(console.error);"],"params":[{"name":"status","description":"Status to change to","type":[[["PresenceStatusData"]]]},{"name":"shardID","description":"Shard ID(s) to have the activity set on","optional":true,"type":[[["number"]],[["Array","<"],["number",">"]]]}],"returns":[[["Promise","<"],["Presence",">"]]],"meta":{"line":131,"file":"ClientUser.js","path":"src/structures"}},{"name":"setActivity","description":"Sets the activity the client user is playing.","examples":["// Set the client user's activity\nclient.user.setActivity('discord.js', { type: 'WATCHING' })\n  .then(presence => console.log(`Activity set to ${presence.activity.name}`))\n  .catch(console.error);"],"params":[{"name":"name","description":"Activity being played, or options for setting the activity","optional":true,"type":[[["string"]],[["ActivityOptions"]]]},{"name":"options","description":"Options for setting the activity","optional":true,"type":[[["ActivityOptions"]]]}],"returns":[[["Promise","<"],["Presence",">"]]],"meta":{"line":155,"file":"ClientUser.js","path":"src/structures"}},{"name":"setAFK","description":"Sets/removes the AFK flag for the client user.","params":[{"name":"afk","description":"Whether or not the user is AFK","type":[[["boolean"]]]}],"returns":[[["Promise","<"],["Presence",">"]]],"meta":{"line":167,"file":"ClientUser.js","path":"src/structures"}},{"name":"avatarURL","description":"A link to the user's avatar.","inherits":"User#avatarURL","inherited":true,"params":[{"name":"options","description":"Options for the Image URL","optional":true,"default":"{}","type":[[["ImageURLOptions"]]]}],"returns":{"types":[[["string"]]],"nullable":true},"meta":{"line":143,"file":"User.js","path":"src/structures"}},{"name":"displayAvatarURL","description":"A link to the user's avatar if they have one.\nOtherwise a link to their default avatar will be returned.","inherits":"User#displayAvatarURL","inherited":true,"params":[{"name":"options","description":"Options for the Image URL","optional":true,"default":"{}","type":[[["ImageURLOptions"]]]}],"returns":[[["string"]]],"meta":{"line":163,"file":"User.js","path":"src/structures"}},{"name":"typingIn","description":"Checks whether the user is typing in a channel.","inherits":"User#typingIn","inherited":true,"params":[{"name":"channel","description":"The channel to check in","type":[[["ChannelResolvable"]]]}],"returns":[[["boolean"]]],"meta":{"line":181,"file":"User.js","path":"src/structures"}},{"name":"typingSinceIn","description":"Gets the time that the user started typing.","inherits":"User#typingSinceIn","inherited":true,"params":[{"name":"channel","description":"The channel to get the time in","type":[[["ChannelResolvable"]]]}],"returns":{"types":[[["Date"]]],"nullable":true},"meta":{"line":191,"file":"User.js","path":"src/structures"}},{"name":"typingDurationIn","description":"Gets the amount of time the user has been typing in a channel for (in milliseconds), or -1 if they're not typing.","inherits":"User#typingDurationIn","inherited":true,"params":[{"name":"channel","description":"The channel to get the time in","type":[[["ChannelResolvable"]]]}],"returns":[[["number"]]],"meta":{"line":201,"file":"User.js","path":"src/structures"}},{"name":"createDM","description":"Creates a DM channel between the client and the user.","inherits":"User#createDM","inherited":true,"async":true,"returns":[[["Promise","<"],["DMChannel",">"]]],"meta":{"line":219,"file":"User.js","path":"src/structures"}},{"name":"deleteDM","description":"Deletes a DM channel (if one exists) between the client and the user. Resolves with the channel if successful.","inherits":"User#deleteDM","inherited":true,"async":true,"returns":[[["Promise","<"],["DMChannel",">"]]],"meta":{"line":232,"file":"User.js","path":"src/structures"}},{"name":"equals","description":"Checks if the user is equal to another. It compares ID, username, discriminator, avatar, and bot flags.\nIt is recommended to compare equality by using `user.id === user2.id` unless you want to compare all properties.","inherits":"User#equals","inherited":true,"params":[{"name":"user","description":"User to compare with","type":[[["User"]]]}],"returns":[[["boolean"]]],"meta":{"line":245,"file":"User.js","path":"src/structures"}},{"name":"fetch","description":"Fetches this user.","inherits":"User#fetch","inherited":true,"returns":[[["Promise","<"],["User",">"]]],"meta":{"line":259,"file":"User.js","path":"src/structures"}},{"name":"toString","description":"When concatenated with a string, this automatically returns the user's mention instead of the User object.","inherits":"User#toString","inherited":true,"examples":["// Logs: Hello from <@123456789012345678>!\nconsole.log(`Hello from ${user}!`);"],"returns":[[["string"]]],"meta":{"line":270,"file":"User.js","path":"src/structures"}},{"name":"send","description":"Sends a message to this channel.","inherits":"User#send","inherited":true,"implements":["TextBasedChannel#send"],"examples":["// Send a basic message\nchannel.send('hello!')\n  .then(message => console.log(`Sent message: ${message.content}`))\n  .catch(console.error);","// Send a remote file\nchannel.send({\n  files: ['https://cdn.discordapp.com/icons/222078108977594368/6e1019b3179d71046e463a75915e7244.png?size=2048']\n})\n  .then(console.log)\n  .catch(console.error);","// Send a local file\nchannel.send({\n  files: [{\n    attachment: 'entire/path/to/file.jpg',\n    name: 'file.jpg'\n  }]\n})\n  .then(console.log)\n  .catch(console.error);","// Send an embed with a local image inside\nchannel.send('This is an embed', {\n  embed: {\n    thumbnail: {\n         url: 'attachment://file.jpg'\n      }\n   },\n   files: [{\n      attachment: 'entire/path/to/file.jpg',\n      name: 'file.jpg'\n   }]\n})\n  .then(console.log)\n  .catch(console.error);"],"params":[{"name":"content","description":"The content to send","optional":true,"default":"''","type":[[["StringResolvable"]],[["APIMessage"]]]},{"name":"options","description":"The options to provide","optional":true,"default":"{}","type":[[["MessageOptions"]],[["MessageAdditions"]]]}],"async":true,"returns":[[["Promise","<("],["Message","|"],["Array","<"],["Message",">)>"]]],"meta":{"line":127,"file":"TextBasedChannel.js","path":"src/structures/interfaces"}}],"meta":{"line":11,"file":"ClientUser.js","path":"src/structures"}},{"name":"DMChannel","description":"Represents a direct message channel between two users.","extends":[[["Channel"]]],"implements":[[["TextBasedChannel"]]],"construct":{"name":"DMChannel","params":[{"name":"client","description":"The instantiating client","type":[[["Client"]]]},{"name":"data","description":"The data for the DM channel","type":[[["Object"]]]}]},"props":[{"name":"messages","description":"A collection containing the messages sent to this channel","type":[[["MessageStore","<"],["Snowflake",", "],["Message",">"]]],"meta":{"line":25,"file":"DMChannel.js","path":"src/structures"}},{"name":"recipient","description":"The recipient on the other end of the DM","type":[[["User"]]],"meta":{"line":37,"file":"DMChannel.js","path":"src/structures"}},{"name":"lastMessageID","description":"The ID of the last message in the channel, if one was sent","nullable":true,"type":[[["Snowflake"]]],"meta":{"line":44,"file":"DMChannel.js","path":"src/structures"}},{"name":"lastPinTimestamp","description":"The timestamp when the last pinned message was pinned, if there was one","nullable":true,"type":[[["number"]]],"meta":{"line":50,"file":"DMChannel.js","path":"src/structures"}},{"name":"partial","description":"Whether this DMChannel is a partial","readonly":true,"type":[[["boolean"]]],"meta":{"line":58,"file":"DMChannel.js","path":"src/structures"}},{"name":"lastMessage","description":"The Message object of the last message in the channel, if one was sent","readonly":true,"nullable":true,"type":[[["Message"]]],"meta":{"line":39,"file":"TextBasedChannel.js","path":"src/structures/interfaces"}},{"name":"lastPinAt","description":"The date when the last pinned message was pinned, if there was one","readonly":true,"nullable":true,"type":[[["Date"]]],"meta":{"line":48,"file":"TextBasedChannel.js","path":"src/structures/interfaces"}},{"name":"typing","description":"Whether or not the typing indicator is being shown in the channel","readonly":true,"type":[[["boolean"]]],"meta":{"line":223,"file":"TextBasedChannel.js","path":"src/structures/interfaces"}},{"name":"typingCount","description":"Number of times `startTyping` has been called","readonly":true,"type":[[["number"]]],"meta":{"line":232,"file":"TextBasedChannel.js","path":"src/structures/interfaces"}},{"name":"type","description":"The type of the channel, either:\n* `dm` - a DM channel\n* `text` - a guild text channel\n* `voice` - a guild voice channel\n* `category` - a guild category channel\n* `news` - a guild news channel\n* `store` - a guild store channel\n* `unknown` - a generic channel of unknown type, could be Channel or GuildChannel","type":[[["string"]]],"meta":{"line":27,"file":"Channel.js","path":"src/structures"}},{"name":"deleted","description":"Whether the channel has been deleted","type":[[["boolean"]]],"meta":{"line":33,"file":"Channel.js","path":"src/structures"}},{"name":"id","description":"The unique ID of the channel","type":[[["Snowflake"]]],"meta":{"line":43,"file":"Channel.js","path":"src/structures"}},{"name":"createdTimestamp","description":"The timestamp the channel was created at","readonly":true,"type":[[["number"]]],"meta":{"line":51,"file":"Channel.js","path":"src/structures"}},{"name":"createdAt","description":"The time the channel was created at","readonly":true,"type":[[["Date"]]],"meta":{"line":60,"file":"Channel.js","path":"src/structures"}},{"name":"client","description":"The client that instantiated this","readonly":true,"type":[[["Client"]]],"meta":{"line":10,"file":"Base.js","path":"src/structures"}}],"methods":[{"name":"toString","description":"When concatenated with a string, this automatically returns the recipient's mention instead of the\nDMChannel object.","examples":["// Logs: Hello from <@123456789012345678>!\nconsole.log(`Hello from ${channel}!`);"],"returns":[[["string"]]],"meta":{"line":70,"file":"DMChannel.js","path":"src/structures"}},{"name":"send","description":"Sends a message to this channel.","implements":["TextBasedChannel#send"],"examples":["// Send a basic message\nchannel.send('hello!')\n  .then(message => console.log(`Sent message: ${message.content}`))\n  .catch(console.error);","// Send a remote file\nchannel.send({\n  files: ['https://cdn.discordapp.com/icons/222078108977594368/6e1019b3179d71046e463a75915e7244.png?size=2048']\n})\n  .then(console.log)\n  .catch(console.error);","// Send a local file\nchannel.send({\n  files: [{\n    attachment: 'entire/path/to/file.jpg',\n    name: 'file.jpg'\n  }]\n})\n  .then(console.log)\n  .catch(console.error);","// Send an embed with a local image inside\nchannel.send('This is an embed', {\n  embed: {\n    thumbnail: {\n         url: 'attachment://file.jpg'\n      }\n   },\n   files: [{\n      attachment: 'entire/path/to/file.jpg',\n      name: 'file.jpg'\n   }]\n})\n  .then(console.log)\n  .catch(console.error);"],"params":[{"name":"content","description":"The content to send","optional":true,"default":"''","type":[[["StringResolvable"]],[["APIMessage"]]]},{"name":"options","description":"The options to provide","optional":true,"default":"{}","type":[[["MessageOptions"]],[["MessageAdditions"]]]}],"async":true,"returns":[[["Promise","<("],["Message","|"],["Array","<"],["Message",">)>"]]],"meta":{"line":127,"file":"TextBasedChannel.js","path":"src/structures/interfaces"}},{"name":"startTyping","description":"Starts a typing indicator in the channel.","implements":["TextBasedChannel#startTyping"],"examples":["// Start typing in a channel, or increase the typing count by one\nchannel.startTyping();","// Start typing in a channel with a typing count of five, or set it to five\nchannel.startTyping(5);"],"params":[{"name":"count","description":"The number of times startTyping should be considered to have been called","optional":true,"default":1,"type":[[["number"]]]}],"returns":{"types":[[["Promise"]]],"description":"Resolves once the bot stops typing gracefully, or rejects when an error occurs"},"meta":{"line":162,"file":"TextBasedChannel.js","path":"src/structures/interfaces"}},{"name":"stopTyping","description":"Stops the typing indicator in the channel.\nThe indicator will only stop if this is called as many times as startTyping().\n<info>It can take a few seconds for the client user to stop typing.</info>","implements":["TextBasedChannel#stopTyping"],"examples":["// Reduce the typing count by one and stop typing if it reached 0\nchannel.stopTyping();","// Force typing to fully stop regardless of typing count\nchannel.stopTyping(true);"],"params":[{"name":"force","description":"Whether or not to reset the call count and force the indicator to stop","optional":true,"default":false,"type":[[["boolean"]]]}],"meta":{"line":206,"file":"TextBasedChannel.js","path":"src/structures/interfaces"}},{"name":"createMessageCollector","description":"Creates a Message Collector.","implements":["TextBasedChannel#createMessageCollector"],"examples":["// Create a message collector\nconst filter = m => m.content.includes('discord');\nconst collector = channel.createMessageCollector(filter, { time: 15000 });\ncollector.on('collect', m => console.log(`Collected ${m.content}`));\ncollector.on('end', collected => console.log(`Collected ${collected.size} items`));"],"params":[{"name":"filter","description":"The filter to create the collector with","type":[[["CollectorFilter"]]]},{"name":"options","description":"The options to pass to the collector","optional":true,"default":"{}","type":[[["MessageCollectorOptions"]]]}],"returns":[[["MessageCollector"]]],"meta":{"line":249,"file":"TextBasedChannel.js","path":"src/structures/interfaces"}},{"name":"awaitMessages","description":"Similar to createMessageCollector but in promise form.\nResolves with a collection of messages that pass the specified filter.","implements":["TextBasedChannel#awaitMessages"],"examples":["// Await !vote messages\nconst filter = m => m.content.startsWith('!vote');\n// Errors: ['time'] treats ending because of the time limit as an error\nchannel.awaitMessages(filter, { max: 4, time: 60000, errors: ['time'] })\n  .then(collected => console.log(collected.size))\n  .catch(collected => console.log(`After a minute, only ${collected.size} out of 4 voted.`));"],"params":[{"name":"filter","description":"The filter function to use","type":[[["CollectorFilter"]]]},{"name":"options","description":"Optional options to pass to the internal collector","optional":true,"default":"{}","type":[[["AwaitMessagesOptions"]]]}],"returns":[[["Promise","<"],["Collection","<"],["Snowflake",", "],["Message",">>"]]],"meta":{"line":273,"file":"TextBasedChannel.js","path":"src/structures/interfaces"}},{"name":"delete","description":"Deletes this channel.","inherits":"Channel#delete","inherited":true,"examples":["// Delete the channel\nchannel.delete()\n  .then(console.log)\n  .catch(console.error);"],"returns":[[["Promise","<"],["Channel",">"]]],"meta":{"line":84,"file":"Channel.js","path":"src/structures"}},{"name":"fetch","description":"Fetches this channel.","inherits":"Channel#fetch","inherited":true,"returns":[[["Promise","<"],["Channel",">"]]],"meta":{"line":92,"file":"Channel.js","path":"src/structures"}}],"meta":{"line":17,"file":"DMChannel.js","path":"src/structures"}},{"name":"Emoji","description":"Represents an emoji, see {@link GuildEmoji} and {@link ReactionEmoji}.","extends":[[["Base"]]],"props":[{"name":"animated","description":"Whether this emoji is animated","type":[[["boolean"]]],"meta":{"line":18,"file":"Emoji.js","path":"src/structures"}},{"name":"name","description":"The name of this emoji","type":[[["string"]]],"meta":{"line":24,"file":"Emoji.js","path":"src/structures"}},{"name":"id","description":"The ID of this emoji","nullable":true,"type":[[["Snowflake"]]],"meta":{"line":30,"file":"Emoji.js","path":"src/structures"}},{"name":"deleted","description":"Whether this emoji has been deleted","type":[[["boolean"]]],"meta":{"line":36,"file":"Emoji.js","path":"src/structures"}},{"name":"identifier","description":"The identifier of this emoji, used for message reactions","readonly":true,"type":[[["string"]]],"meta":{"line":44,"file":"Emoji.js","path":"src/structures"}},{"name":"url","description":"The URL to the emoji file if its a custom emoji","readonly":true,"nullable":true,"type":[[["string"]]],"meta":{"line":54,"file":"Emoji.js","path":"src/structures"}},{"name":"createdTimestamp","description":"The timestamp the emoji was created at, or null if unicode","readonly":true,"nullable":true,"type":[[["number"]]],"meta":{"line":64,"file":"Emoji.js","path":"src/structures"}},{"name":"createdAt","description":"The time the emoji was created at, or null if unicode","readonly":true,"nullable":true,"type":[[["Date"]]],"meta":{"line":74,"file":"Emoji.js","path":"src/structures"}},{"name":"client","description":"The client that instantiated this","readonly":true,"type":[[["Client"]]],"meta":{"line":10,"file":"Base.js","path":"src/structures"}}],"methods":[{"name":"toString","description":"When concatenated with a string, this automatically returns the text required to form a graphical emoji on Discord\ninstead of the Emoji object.","examples":["// Send a custom emoji from a guild:\nconst emoji = guild.emojis.first();\nmsg.reply(`Hello! ${emoji}`);","// Send the emoji used in a reaction to the channel the reaction is part of\nreaction.message.channel.send(`The emoji used was: ${reaction.emoji}`);"],"returns":[[["string"]]],"meta":{"line":91,"file":"Emoji.js","path":"src/structures"}}],"meta":{"line":12,"file":"Emoji.js","path":"src/structures"}},{"name":"Guild","description":"Represents a guild (or a server) on Discord.\n<info>It's recommended to see if a guild is available before performing operations or reading data from it. You can\ncheck this with `guild.available`.</info>","extends":[[["Base"]]],"construct":{"name":"Guild","params":[{"name":"client","description":"The instantiating client","type":[[["Client"]]]},{"name":"data","description":"The data for the guild","type":[[["Object"]]]}]},"props":[{"name":"members","description":"A collection of members that are in this guild. The key is the member's ID, the value is the member","type":[[["GuildMemberStore","<"],["Snowflake",", "],["GuildMember",">"]]],"meta":{"line":41,"file":"Guild.js","path":"src/structures"}},{"name":"channels","description":"A collection of channels that are in this guild. The key is the channel's ID, the value is the channel","type":[[["GuildChannelStore","<"],["Snowflake",", "],["GuildChannel",">"]]],"meta":{"line":47,"file":"Guild.js","path":"src/structures"}},{"name":"roles","description":"A collection of roles that are in this guild. The key is the role's ID, the value is the role","type":[[["RoleStore","<"],["Snowflake",", "],["Role",">"]]],"meta":{"line":53,"file":"Guild.js","path":"src/structures"}},{"name":"presences","description":"A collection of presences in this guild","type":[[["PresenceStore","<"],["Snowflake",", "],["Presence",">"]]],"meta":{"line":59,"file":"Guild.js","path":"src/structures"}},{"name":"voiceStates","description":"A collection of voice states in this guild","type":[[["VoiceStateStore","<"],["Snowflake",", "],["VoiceState",">"]]],"meta":{"line":65,"file":"Guild.js","path":"src/structures"}},{"name":"deleted","description":"Whether the bot has been removed from the guild","type":[[["boolean"]]],"meta":{"line":71,"file":"Guild.js","path":"src/structures"}},{"name":"available","description":"Whether the guild is available to access. If it is not available, it indicates a server outage","type":[[["boolean"]]],"meta":{"line":79,"file":"Guild.js","path":"src/structures"}},{"name":"id","description":"The Unique ID of the guild, useful for comparisons","type":[[["Snowflake"]]],"meta":{"line":85,"file":"Guild.js","path":"src/structures"}},{"name":"shardID","description":"The id of the shard this Guild belongs to.","type":[[["number"]]],"meta":{"line":95,"file":"Guild.js","path":"src/structures"}},{"name":"shard","description":"The Shard this Guild belongs to.","readonly":true,"type":[[["WebSocketShard"]]],"meta":{"line":103,"file":"Guild.js","path":"src/structures"}},{"name":"name","description":"The name of the guild","type":[[["string"]]],"meta":{"line":118,"file":"Guild.js","path":"src/structures"}},{"name":"icon","description":"The hash of the guild icon","nullable":true,"type":[[["string"]]],"meta":{"line":124,"file":"Guild.js","path":"src/structures"}},{"name":"splash","description":"The hash of the guild splash image (VIP only)","nullable":true,"type":[[["string"]]],"meta":{"line":130,"file":"Guild.js","path":"src/structures"}},{"name":"region","description":"The region the guild is located in","type":[[["string"]]],"meta":{"line":136,"file":"Guild.js","path":"src/structures"}},{"name":"memberCount","description":"The full amount of members in this guild","type":[[["number"]]],"meta":{"line":142,"file":"Guild.js","path":"src/structures"}},{"name":"large","description":"Whether the guild is \"large\" (has more than 250 members)","type":[[["boolean"]]],"meta":{"line":148,"file":"Guild.js","path":"src/structures"}},{"name":"features","description":"An array of guild features partnered guilds have enabled","type":[[["Array","<"],["Features",">"]]],"meta":{"line":180,"file":"Guild.js","path":"src/structures"}},{"name":"applicationID","description":"The ID of the application that created this guild (if applicable)","nullable":true,"type":[[["Snowflake"]]],"meta":{"line":186,"file":"Guild.js","path":"src/structures"}},{"name":"afkTimeout","description":"The time in seconds before a user is counted as \"away from keyboard\"","nullable":true,"type":[[["number"]]],"meta":{"line":192,"file":"Guild.js","path":"src/structures"}},{"name":"afkChannelID","description":"The ID of the voice channel where AFK members are moved","nullable":true,"type":[[["Snowflake"]]],"meta":{"line":198,"file":"Guild.js","path":"src/structures"}},{"name":"systemChannelID","description":"The ID of the system channel","nullable":true,"type":[[["Snowflake"]]],"meta":{"line":204,"file":"Guild.js","path":"src/structures"}},{"name":"embedEnabled","description":"Whether embedded images are enabled on this guild","type":[[["boolean"]]],"meta":{"line":210,"file":"Guild.js","path":"src/structures"}},{"name":"premiumTier","description":"The premium tier on this guild","type":[[["PremiumTier"]]],"meta":{"line":225,"file":"Guild.js","path":"src/structures"}},{"name":"premiumSubscriptionCount","description":"The total number of users currently boosting this server","nullable":true,"type":[[["number"]]],"meta":{"line":227,"file":"Guild.js","path":"src/structures"}},{"name":"widgetEnabled","description":"Whether widget images are enabled on this guild","nullable":true,"type":[[["boolean"]]],"meta":{"line":236,"file":"Guild.js","path":"src/structures"}},{"name":"widgetChannelID","description":"The widget channel ID, if enabled","nullable":true,"type":[[["string"]]],"meta":{"line":243,"file":"Guild.js","path":"src/structures"}},{"name":"embedChannelID","description":"The embed channel ID, if enabled","nullable":true,"type":[[["string"]]],"meta":{"line":250,"file":"Guild.js","path":"src/structures"}},{"name":"verificationLevel","description":"The verification level of the guild","type":[[["number"]]],"meta":{"line":261,"file":"Guild.js","path":"src/structures"}},{"name":"explicitContentFilter","description":"The explicit content filter level of the guild","type":[[["number"]]],"meta":{"line":267,"file":"Guild.js","path":"src/structures"}},{"name":"mfaLevel","description":"The required MFA level for the guild","type":[[["number"]]],"meta":{"line":273,"file":"Guild.js","path":"src/structures"}},{"name":"joinedTimestamp","description":"The timestamp the client user joined the guild at","type":[[["number"]]],"meta":{"line":279,"file":"Guild.js","path":"src/structures"}},{"name":"defaultMessageNotifications","description":"The value set for the guild's default message notifications","type":[[["DefaultMessageNotifications"]],[["number"]]],"meta":{"line":285,"file":"Guild.js","path":"src/structures"}},{"name":"systemChannelFlags","description":"The value set for the guild's system channel flags","type":[[["Readonly","<"],["SystemChannelFlags",">"]]],"meta":{"line":292,"file":"Guild.js","path":"src/structures"}},{"name":"maximumMembers","description":"The maximum amount of members the guild can have\n<info>You will need to fetch the guild using {@link Guild#fetch} if you want to receive this parameter</info>","nullable":true,"type":[[["number"]]],"meta":{"line":294,"file":"Guild.js","path":"src/structures"}},{"name":"maximumPresences","description":"The maximum amount of presences the guild can have\n<info>You will need to fetch the guild using {@link Guild#fetch} if you want to receive this parameter</info>","nullable":true,"type":[[["number"]]],"meta":{"line":302,"file":"Guild.js","path":"src/structures"}},{"name":"vanityURLCode","description":"The vanity URL code of the guild, if any","nullable":true,"type":[[["string"]]],"meta":{"line":314,"file":"Guild.js","path":"src/structures"}},{"name":"description","description":"The description of the guild, if any","nullable":true,"type":[[["string"]]],"meta":{"line":320,"file":"Guild.js","path":"src/structures"}},{"name":"banner","description":"The hash of the guild banner","nullable":true,"type":[[["string"]]],"meta":{"line":326,"file":"Guild.js","path":"src/structures"}},{"name":"ownerID","description":"The user ID of this guild's owner","type":[[["Snowflake"]]],"meta":{"line":354,"file":"Guild.js","path":"src/structures"}},{"name":"emojis","description":"A collection of emojis that are in this guild. The key is the emoji's ID, the value is the emoji.","type":[[["GuildEmojiStore","<"],["Snowflake",", "],["GuildEmoji",">"]]],"meta":{"line":375,"file":"Guild.js","path":"src/structures"}},{"name":"createdTimestamp","description":"The timestamp the guild was created at","readonly":true,"type":[[["number"]]],"meta":{"line":400,"file":"Guild.js","path":"src/structures"}},{"name":"createdAt","description":"The time the guild was created at","readonly":true,"type":[[["Date"]]],"meta":{"line":409,"file":"Guild.js","path":"src/structures"}},{"name":"joinedAt","description":"The time the client user joined the guild","readonly":true,"type":[[["Date"]]],"meta":{"line":418,"file":"Guild.js","path":"src/structures"}},{"name":"partnered","description":"If this guild is partnered","readonly":true,"type":[[["boolean"]]],"meta":{"line":427,"file":"Guild.js","path":"src/structures"}},{"name":"verified","description":"If this guild is verified","readonly":true,"type":[[["boolean"]]],"meta":{"line":436,"file":"Guild.js","path":"src/structures"}},{"name":"nameAcronym","description":"The acronym that shows up in place of a guild icon.","readonly":true,"type":[[["string"]]],"meta":{"line":455,"file":"Guild.js","path":"src/structures"}},{"name":"owner","description":"The owner of the guild","readonly":true,"nullable":true,"type":[[["GuildMember"]]],"meta":{"line":474,"file":"Guild.js","path":"src/structures"}},{"name":"afkChannel","description":"AFK voice channel for this guild","readonly":true,"nullable":true,"type":[[["VoiceChannel"]]],"meta":{"line":485,"file":"Guild.js","path":"src/structures"}},{"name":"systemChannel","description":"System channel for this guild","readonly":true,"nullable":true,"type":[[["TextChannel"]]],"meta":{"line":494,"file":"Guild.js","path":"src/structures"}},{"name":"widgetChannel","description":"Widget channel for this guild","readonly":true,"nullable":true,"type":[[["TextChannel"]]],"meta":{"line":503,"file":"Guild.js","path":"src/structures"}},{"name":"embedChannel","description":"Embed channel for this guild","readonly":true,"nullable":true,"type":[[["TextChannel"]]],"meta":{"line":512,"file":"Guild.js","path":"src/structures"}},{"name":"me","description":"The client user as a GuildMember of this guild","readonly":true,"nullable":true,"type":[[["GuildMember"]]],"meta":{"line":521,"file":"Guild.js","path":"src/structures"}},{"name":"voice","description":"The voice state for the client user of this guild, if any","readonly":true,"nullable":true,"type":[[["VoiceState"]]],"meta":{"line":532,"file":"Guild.js","path":"src/structures"}},{"name":"client","description":"The client that instantiated this","readonly":true,"type":[[["Client"]]],"meta":{"line":10,"file":"Base.js","path":"src/structures"}}],"methods":[{"name":"_patch","description":"Sets up the guild.","access":"private","params":[{"name":"data","description":"The raw data of the guild","type":[["*"]]}],"meta":{"line":113,"file":"Guild.js","path":"src/structures"}},{"name":"bannerURL","description":"The URL to this guild's banner.","params":[{"name":"options","description":"Options for the Image URL","optional":true,"default":"{}","type":[[["ImageURLOptions"]]]}],"returns":{"types":[[["string"]]],"nullable":true},"meta":{"line":390,"file":"Guild.js","path":"src/structures"}},{"name":"iconURL","description":"The URL to this guild's icon.","params":[{"name":"options","description":"Options for the Image URL","optional":true,"default":"{}","type":[[["ImageURLOptions"]]]}],"returns":{"types":[[["string"]]],"nullable":true},"meta":{"line":445,"file":"Guild.js","path":"src/structures"}},{"name":"splashURL","description":"The URL to this guild's splash.","params":[{"name":"options","description":"Options for the Image URL","optional":true,"default":"{}","type":[[["ImageURLOptions"]]]}],"returns":{"types":[[["string"]]],"nullable":true},"meta":{"line":464,"file":"Guild.js","path":"src/structures"}},{"name":"member","description":"Returns the GuildMember form of a User object, if the user is present in the guild.","examples":["// Get the guild member of a user\nconst member = guild.member(message.author);"],"params":[{"name":"user","description":"The user that you want to obtain the GuildMember of","type":[[["UserResolvable"]]]}],"returns":{"types":[[["GuildMember"]]],"nullable":true},"meta":{"line":544,"file":"Guild.js","path":"src/structures"}},{"name":"fetch","description":"Fetches this guild.","returns":[[["Promise","<"],["Guild",">"]]],"meta":{"line":552,"file":"Guild.js","path":"src/structures"}},{"name":"fetchBans","description":"Fetches a collection of banned users in this guild.","returns":[[["Promise","<"],["Collection","<"],["Snowflake",", "],["BanInfo",">>"]]],"meta":{"line":570,"file":"Guild.js","path":"src/structures"}},{"name":"fetchIntegrations","description":"Fetches a collection of integrations to this guild.\nResolves with a collection mapping integrations by their ids.","examples":["// Fetch integrations\nguild.fetchIntegrations()\n  .then(integrations => console.log(`Fetched ${integrations.size} integrations`))\n  .catch(console.error);"],"returns":[[["Promise","<"],["Collection","<"],["string",", "],["Integration",">>"]]],"meta":{"line":592,"file":"Guild.js","path":"src/structures"}},{"name":"createIntegration","description":"Creates an integration by attaching an integration object","params":[{"name":"data","description":"The data for the integration","type":[[["IntegrationData"]]]},{"name":"reason","description":"Reason for creating the integration","type":[[["string"]]]}],"returns":[[["Promise","<"],["Guild",">"]]],"meta":{"line":613,"file":"Guild.js","path":"src/structures"}},{"name":"fetchInvites","description":"Fetches a collection of invites to this guild.\nResolves with a collection mapping invites by their codes.","examples":["// Fetch invites\nguild.fetchInvites()\n  .then(invites => console.log(`Fetched ${invites.size} invites`))\n  .catch(console.error);","// Fetch invite creator by their id\nguild.fetchInvites()\n .then(invites => console.log(invites.find(invite => invite.inviter.id === '84484653687267328')))\n .catch(console.error);"],"returns":[[["Promise","<"],["Collection","<"],["string",", "],["Invite",">>"]]],"meta":{"line":633,"file":"Guild.js","path":"src/structures"}},{"name":"fetchVanityCode","description":"Fetches the vanity url invite code to this guild.\nResolves with a string matching the vanity url invite code, not the full url.","examples":["// Fetch invites\nguild.fetchVanityCode()\n  .then(code => {\n    console.log(`Vanity URL: https://discord.gg/${code}`);\n  })\n  .catch(console.error);"],"returns":[[["Promise","<"],["string",">"]]],"meta":{"line":657,"file":"Guild.js","path":"src/structures"}},{"name":"fetchWebhooks","description":"Fetches all webhooks for the guild.","examples":["// Fetch webhooks\nguild.fetchWebhooks()\n  .then(webhooks => console.log(`Fetched ${webhooks.size} webhooks`))\n  .catch(console.error);"],"returns":[[["Promise","<"],["Collection","<"],["Snowflake",", "],["Webhook",">>"]]],"meta":{"line":674,"file":"Guild.js","path":"src/structures"}},{"name":"fetchVoiceRegions","description":"Fetches available voice regions.","returns":[[["Promise","<"],["Collection","<"],["string",", "],["VoiceRegion",">>"]]],"meta":{"line":686,"file":"Guild.js","path":"src/structures"}},{"name":"fetchEmbed","description":"Fetches the guild embed.","examples":["// Fetches the guild embed\nguild.fetchEmbed()\n  .then(embed => console.log(`The embed is ${embed.enabled ? 'enabled' : 'disabled'}`))\n  .catch(console.error);"],"returns":[[["Promise","<"],["GuildEmbedData",">"]]],"meta":{"line":710,"file":"Guild.js","path":"src/structures"}},{"name":"fetchAuditLogs","description":"Fetches audit logs for this guild.","examples":["// Output audit log entries\nguild.fetchAuditLogs()\n  .then(audit => console.log(audit.entries.first()))\n  .catch(console.error);"],"params":[{"name":"options","description":"Options for fetching audit logs","optional":true,"default":"{}","type":[[["Object"]]]},{"name":"options.before","description":"Limit to entries from before specified entry","optional":true,"type":[[["Snowflake"]],[["GuildAuditLogsEntry"]]]},{"name":"options.limit","description":"Limit number of entries","optional":true,"type":[[["number"]]]},{"name":"options.user","description":"Only show entries involving this user","optional":true,"type":[[["UserResolvable"]]]},{"name":"options.type","description":"Only show entries involving this action type","optional":true,"type":[[["AuditLogAction"]],[["number"]]]}],"returns":[[["Promise","<"],["GuildAuditLogs",">"]]],"meta":{"line":731,"file":"Guild.js","path":"src/structures"}},{"name":"addMember","description":"Adds a user to the guild using OAuth2. Requires the `CREATE_INSTANT_INVITE` permission.","params":[{"name":"user","description":"User to add to the guild","type":[[["UserResolvable"]]]},{"name":"options","description":"Options for the addition","type":[[["Object"]]]},{"name":"options.accessToken","description":"An OAuth2 access token for the user with the `guilds.join` scope granted to the\nbot's application","type":[[["string"]]]},{"name":"options.nick","description":"Nickname to give the member (requires `MANAGE_NICKNAMES`)","optional":true,"type":[[["string"]]]},{"name":"options.roles","description":"Roles to add to the member\n(requires `MANAGE_ROLES`)","optional":true,"type":[[["Collection","<"],["Snowflake",", "],["Role",">"]],[["Array","<"],["RoleResolvable",">"]]]},{"name":"options.mute","description":"Whether the member should be muted (requires `MUTE_MEMBERS`)","optional":true,"type":[[["boolean"]]]},{"name":"options.deaf","description":"Whether the member should be deafened (requires `DEAFEN_MEMBERS`)","optional":true,"type":[[["boolean"]]]}],"returns":[[["Promise","<"],["GuildMember",">"]]],"meta":{"line":757,"file":"Guild.js","path":"src/structures"}},{"name":"edit","description":"Updates the guild with new information - e.g. a new name.","examples":["// Set the guild name and region\nguild.edit({\n  name: 'Discord Guild',\n  region: 'london',\n})\n  .then(updated => console.log(`New guild name ${updated} in region ${updated.region}`))\n  .catch(console.error);"],"params":[{"name":"data","description":"The data to update the guild with","type":[[["GuildEditData"]]]},{"name":"reason","description":"Reason for editing this guild","optional":true,"type":[[["string"]]]}],"returns":[[["Promise","<"],["Guild",">"]]],"meta":{"line":809,"file":"Guild.js","path":"src/structures"}},{"name":"setExplicitContentFilter","description":"Edits the level of the explicit content filter.","params":[{"name":"explicitContentFilter","description":"The new level of the explicit content filter","type":[[["number"]]]},{"name":"reason","description":"Reason for changing the level of the guild's explicit content filter","optional":true,"type":[[["string"]]]}],"returns":[[["Promise","<"],["Guild",">"]]],"meta":{"line":846,"file":"Guild.js","path":"src/structures"}},{"name":"setDefaultMessageNotifications","description":"Edits the setting of the default message notifications of the guild.","params":[{"name":"defaultMessageNotifications","description":"The new setting for the default message notifications","type":[[["DefaultMessageNotifications"]],[["number"]]]},{"name":"reason","description":"Reason for changing the setting of the default message notifications","optional":true,"type":[[["string"]]]}],"returns":[[["Promise","<"],["Guild",">"]]],"meta":{"line":857,"file":"Guild.js","path":"src/structures"}},{"name":"setSystemChannelFlags","description":"Edits the flags of the default message notifications of the guild.","params":[{"name":"systemChannelFlags","description":"The new flags for the default message notifications","type":[[["SystemChannelFlagsResolvable"]]]},{"name":"reason","description":"Reason for changing the flags of the default message notifications","optional":true,"type":[[["string"]]]}],"returns":[[["Promise","<"],["Guild",">"]]],"meta":{"line":868,"file":"Guild.js","path":"src/structures"}},{"name":"setName","description":"Edits the name of the guild.","examples":["// Edit the guild name\nguild.setName('Discord Guild')\n .then(updated => console.log(`Updated guild name to ${guild}`))\n .catch(console.error);"],"params":[{"name":"name","description":"The new name of the guild","type":[[["string"]]]},{"name":"reason","description":"Reason for changing the guild's name","optional":true,"type":[[["string"]]]}],"returns":[[["Promise","<"],["Guild",">"]]],"meta":{"line":883,"file":"Guild.js","path":"src/structures"}},{"name":"setRegion","description":"Edits the region of the guild.","examples":["// Edit the guild region\nguild.setRegion('london')\n .then(updated => console.log(`Updated guild region to ${updated.region}`))\n .catch(console.error);"],"params":[{"name":"region","description":"The new region of the guild","type":[[["string"]]]},{"name":"reason","description":"Reason for changing the guild's region","optional":true,"type":[[["string"]]]}],"returns":[[["Promise","<"],["Guild",">"]]],"meta":{"line":898,"file":"Guild.js","path":"src/structures"}},{"name":"setVerificationLevel","description":"Edits the verification level of the guild.","examples":["// Edit the guild verification level\nguild.setVerificationLevel(1)\n .then(updated => console.log(`Updated guild verification level to ${guild.verificationLevel}`))\n .catch(console.error);"],"params":[{"name":"verificationLevel","description":"The new verification level of the guild","type":[[["number"]]]},{"name":"reason","description":"Reason for changing the guild's verification level","optional":true,"type":[[["string"]]]}],"returns":[[["Promise","<"],["Guild",">"]]],"meta":{"line":913,"file":"Guild.js","path":"src/structures"}},{"name":"setAFKChannel","description":"Edits the AFK channel of the guild.","examples":["// Edit the guild AFK channel\nguild.setAFKChannel(channel)\n .then(updated => console.log(`Updated guild AFK channel to ${guild.afkChannel.name}`))\n .catch(console.error);"],"params":[{"name":"afkChannel","description":"The new AFK channel","type":[[["ChannelResolvable"]]]},{"name":"reason","description":"Reason for changing the guild's AFK channel","optional":true,"type":[[["string"]]]}],"returns":[[["Promise","<"],["Guild",">"]]],"meta":{"line":928,"file":"Guild.js","path":"src/structures"}},{"name":"setSystemChannel","description":"Edits the system channel of the guild.","examples":["// Edit the guild system channel\nguild.setSystemChannel(channel)\n .then(updated => console.log(`Updated guild system channel to ${guild.systemChannel.name}`))\n .catch(console.error);"],"params":[{"name":"systemChannel","description":"The new system channel","type":[[["ChannelResolvable"]]]},{"name":"reason","description":"Reason for changing the guild's system channel","optional":true,"type":[[["string"]]]}],"returns":[[["Promise","<"],["Guild",">"]]],"meta":{"line":943,"file":"Guild.js","path":"src/structures"}},{"name":"setAFKTimeout","description":"Edits the AFK timeout of the guild.","examples":["// Edit the guild AFK channel\nguild.setAFKTimeout(60)\n .then(updated => console.log(`Updated guild AFK timeout to ${guild.afkTimeout}`))\n .catch(console.error);"],"params":[{"name":"afkTimeout","description":"The time in seconds that a user must be idle to be considered AFK","type":[[["number"]]]},{"name":"reason","description":"Reason for changing the guild's AFK timeout","optional":true,"type":[[["string"]]]}],"returns":[[["Promise","<"],["Guild",">"]]],"meta":{"line":958,"file":"Guild.js","path":"src/structures"}},{"name":"setIcon","description":"Sets a new guild icon.","examples":["// Edit the guild icon\nguild.setIcon('./icon.png')\n .then(updated => console.log('Updated the guild icon'))\n .catch(console.error);"],"params":[{"name":"icon","description":"The new icon of the guild","type":[[["Base64Resolvable"]],[["BufferResolvable"]]]},{"name":"reason","description":"Reason for changing the guild's icon","optional":true,"type":[[["string"]]]}],"async":true,"returns":[[["Promise","<"],["Guild",">"]]],"meta":{"line":973,"file":"Guild.js","path":"src/structures"}},{"name":"setOwner","description":"Sets a new owner of the guild.","examples":["// Edit the guild owner\nguild.setOwner(guild.members.first())\n .then(updated => console.log(`Updated the guild owner to ${updated.owner.displayName}`))\n .catch(console.error);"],"params":[{"name":"owner","description":"The new owner of the guild","type":[[["GuildMemberResolvable"]]]},{"name":"reason","description":"Reason for setting the new owner","optional":true,"type":[[["string"]]]}],"returns":[[["Promise","<"],["Guild",">"]]],"meta":{"line":988,"file":"Guild.js","path":"src/structures"}},{"name":"setSplash","description":"Sets a new guild splash screen.","examples":["// Edit the guild splash\nguild.setSplash('./splash.png')\n .then(updated => console.log('Updated the guild splash'))\n .catch(console.error);"],"params":[{"name":"splash","description":"The new splash screen of the guild","type":[[["Base64Resolvable"]],[["BufferResolvable"]]]},{"name":"reason","description":"Reason for changing the guild's splash screen","optional":true,"type":[[["string"]]]}],"async":true,"returns":[[["Promise","<"],["Guild",">"]]],"meta":{"line":1003,"file":"Guild.js","path":"src/structures"}},{"name":"setBanner","description":"Sets a new guild banner.","examples":["guild.setBanner('./banner.png')\n .then(updated => console.log('Updated the guild banner'))\n .catch(console.error);"],"params":[{"name":"banner","description":"The new banner of the guild","type":[[["Base64Resolvable"]],[["BufferResolvable"]]]},{"name":"reason","description":"Reason for changing the guild's banner","optional":true,"type":[[["string"]]]}],"async":true,"returns":[[["Promise","<"],["Guild",">"]]],"meta":{"line":1017,"file":"Guild.js","path":"src/structures"}},{"name":"setChannelPositions","description":"Batch-updates the guild's channels' positions.","examples":["guild.setChannelPositions([{ channel: channelID, position: newChannelIndex }])\n  .then(guild => console.log(`Updated channel positions for ${guild}`))\n  .catch(console.error);"],"params":[{"name":"channelPositions","description":"Channel positions to update","type":[[["Array","<"],["ChannelPosition",">"]]]}],"returns":[[["Promise","<"],["Guild",">"]]],"meta":{"line":1037,"file":"Guild.js","path":"src/structures"}},{"name":"setRolePositions","description":"Batch-updates the guild's role positions","examples":["guild.setRolePositions([{ role: roleID, position: updatedRoleIndex }])\n .then(guild => console.log(`Role permissions updated for ${guild}`))\n .catch(console.error);"],"params":[{"name":"rolePositions","description":"Role positions to update","type":[[["Array","<"],["GuildRolePosition",">"]]]}],"returns":[[["Promise","<"],["Guild",">"]]],"meta":{"line":1067,"file":"Guild.js","path":"src/structures"}},{"name":"setEmbed","description":"Edits the guild's embed.","params":[{"name":"embed","description":"The embed for the guild","type":[[["GuildEmbedData"]]]},{"name":"reason","description":"Reason for changing the guild's embed","optional":true,"type":[[["string"]]]}],"returns":[[["Promise","<"],["Guild",">"]]],"meta":{"line":1091,"file":"Guild.js","path":"src/structures"}},{"name":"leave","description":"Leaves the guild.","examples":["// Leave a guild\nguild.leave()\n  .then(g => console.log(`Left the guild ${g}`))\n  .catch(console.error);"],"returns":[[["Promise","<"],["Guild",">"]]],"meta":{"line":1110,"file":"Guild.js","path":"src/structures"}},{"name":"delete","description":"Deletes the guild.","examples":["// Delete a guild\nguild.delete()\n  .then(g => console.log(`Deleted the guild ${g}`))\n  .catch(console.error);"],"returns":[[["Promise","<"],["Guild",">"]]],"meta":{"line":1125,"file":"Guild.js","path":"src/structures"}},{"name":"equals","description":"Whether this guild equals another guild. It compares all properties, so for most operations\nit is advisable to just compare `guild.id === guild2.id` as it is much faster and is often\nwhat most users need.","params":[{"name":"guild","description":"The guild to compare with","type":[[["Guild"]]]}],"returns":[[["boolean"]]],"meta":{"line":1137,"file":"Guild.js","path":"src/structures"}},{"name":"toString","description":"When concatenated with a string, this automatically returns the guild's name instead of the Guild object.","examples":["// Logs: Hello from My Guild!\nconsole.log(`Hello from ${guild}!`);"],"returns":[[["string"]]],"meta":{"line":1175,"file":"Guild.js","path":"src/structures"}},{"name":"_sortedRoles","description":"Creates a collection of this guild's roles, sorted by their position and IDs.","access":"private","returns":[[["Collection","<"],["Role",">"]]],"meta":{"line":1198,"file":"Guild.js","path":"src/structures"}},{"name":"_sortedChannels","description":"Creates a collection of this guild's or a specific category's channels, sorted by their position and IDs.","access":"private","params":[{"name":"channel","description":"Category to get the channels of","optional":true,"type":[[["GuildChannel"]]]}],"returns":[[["Collection","<"],["GuildChannel",">"]]],"meta":{"line":1208,"file":"Guild.js","path":"src/structures"}}],"meta":{"line":34,"file":"Guild.js","path":"src/structures"}},{"name":"GuildAuditLogs","description":"Audit logs entries are held in this class.","props":[{"name":"webhooks","description":"Cached webhooks","access":"private","type":[[["Collection","<"],["Snowflake",", "],["Webhook",">"]]],"meta":{"line":137,"file":"GuildAuditLogs.js","path":"src/structures"}},{"name":"entries","description":"The entries for this guild's audit logs","type":[[["Collection","<"],["Snowflake",", "],["GuildAuditLogsEntry",">"]]],"meta":{"line":148,"file":"GuildAuditLogs.js","path":"src/structures"}},{"name":"Targets","description":"Key mirror of all available audit log targets.","scope":"static","type":[[["AuditLogTargetType"]]],"meta":{"line":22,"file":"GuildAuditLogs.js","path":"src/structures"}},{"name":"Actions","description":"All available actions keyed under their names to their numeric values.","scope":"static","type":[[["AuditLogAction"]]],"meta":{"line":81,"file":"GuildAuditLogs.js","path":"src/structures"}}],"methods":[{"name":"build","description":"Handles possible promises for entry targets.","scope":"static","returns":[[["Promise","<"],["GuildAuditLogs",">"]]],"meta":{"line":159,"file":"GuildAuditLogs.js","path":"src/structures"}},{"name":"targetType","description":"Finds the target type from the entry action.","scope":"static","params":[{"name":"target","description":"The action target","type":[[["AuditLogAction"]]]}],"returns":[[["AuditLogTargetType"]]],"meta":{"line":182,"file":"GuildAuditLogs.js","path":"src/structures"}},{"name":"actionType","description":"Finds the action type from the entry action.","scope":"static","params":[{"name":"action","description":"The action target","type":[[["AuditLogAction"]]]}],"returns":[[["AuditLogActionType"]]],"meta":{"line":208,"file":"GuildAuditLogs.js","path":"src/structures"}}],"meta":{"line":130,"file":"GuildAuditLogs.js","path":"src/structures"}},{"name":"GuildAuditLogsEntry","description":"Audit logs entry.","props":[{"name":"targetType","description":"The target type of this entry","type":[[["AuditLogTargetType"]]],"meta":{"line":262,"file":"GuildAuditLogs.js","path":"src/structures"}},{"name":"actionType","description":"The action type of this entry","type":[[["AuditLogActionType"]]],"meta":{"line":268,"file":"GuildAuditLogs.js","path":"src/structures"}},{"name":"action","description":"Specific action type of this entry in its string presentation","type":[[["AuditLogAction"]]],"meta":{"line":274,"file":"GuildAuditLogs.js","path":"src/structures"}},{"name":"reason","description":"The reason of this entry","nullable":true,"type":[[["string"]]],"meta":{"line":280,"file":"GuildAuditLogs.js","path":"src/structures"}},{"name":"executor","description":"The user that executed this entry","type":[[["User"]]],"meta":{"line":286,"file":"GuildAuditLogs.js","path":"src/structures"}},{"name":"changes","description":"Specific property changes","type":[[["Array","<"],["AuditLogChange",">"]]],"meta":{"line":302,"file":"GuildAuditLogs.js","path":"src/structures"}},{"name":"id","description":"The ID of this entry","type":[[["Snowflake"]]],"meta":{"line":308,"file":"GuildAuditLogs.js","path":"src/structures"}},{"name":"extra","description":"Any extra data from the entry","type":[[["Object"]],[["Role"]],[["GuildMember"]]],"meta":{"line":314,"file":"GuildAuditLogs.js","path":"src/structures"}},{"name":"target","description":"The target of this entry","type":[[["AuditLogEntryTarget"]]],"meta":{"line":348,"file":"GuildAuditLogs.js","path":"src/structures"}},{"name":"createdTimestamp","description":"The timestamp this entry was created at","readonly":true,"type":[[["number"]]],"meta":{"line":396,"file":"GuildAuditLogs.js","path":"src/structures"}},{"name":"createdAt","description":"The time this entry was created at","readonly":true,"type":[[["Date"]]],"meta":{"line":405,"file":"GuildAuditLogs.js","path":"src/structures"}}],"meta":{"line":256,"file":"GuildAuditLogs.js","path":"src/structures"}},{"name":"GuildChannel","description":"Represents a guild channel from any of the following:\n- {@link TextChannel}\n- {@link VoiceChannel}\n- {@link CategoryChannel}\n- {@link NewsChannel}\n- {@link StoreChannel}","extends":[[["Channel"]]],"construct":{"name":"GuildChannel","params":[{"name":"guild","description":"The guild the guild channel is part of","type":[[["Guild"]]]},{"name":"data","description":"The data for the guild channel","type":[[["Object"]]]}]},"props":[{"name":"guild","description":"The guild the channel is in","type":[[["Guild"]]],"meta":{"line":33,"file":"GuildChannel.js","path":"src/structures"}},{"name":"name","description":"The name of the guild channel","type":[[["string"]]],"meta":{"line":43,"file":"GuildChannel.js","path":"src/structures"}},{"name":"rawPosition","description":"The raw position of the channel from discord","type":[[["number"]]],"meta":{"line":49,"file":"GuildChannel.js","path":"src/structures"}},{"name":"parentID","description":"The ID of the category parent of this channel","nullable":true,"type":[[["Snowflake"]]],"meta":{"line":55,"file":"GuildChannel.js","path":"src/structures"}},{"name":"permissionOverwrites","description":"A map of permission overwrites in this channel for roles and users","type":[[["Collection","<"],["Snowflake",", "],["PermissionOverwrites",">"]]],"meta":{"line":61,"file":"GuildChannel.js","path":"src/structures"}},{"name":"parent","description":"The category parent of this channel","readonly":true,"nullable":true,"type":[[["CategoryChannel"]]],"meta":{"line":74,"file":"GuildChannel.js","path":"src/structures"}},{"name":"permissionsLocked","description":"If the permissionOverwrites match the parent channel, null if no parent","readonly":true,"nullable":true,"type":[[["boolean"]]],"meta":{"line":83,"file":"GuildChannel.js","path":"src/structures"}},{"name":"position","description":"The position of the channel","readonly":true,"type":[[["number"]]],"meta":{"line":99,"file":"GuildChannel.js","path":"src/structures"}},{"name":"members","description":"A collection of members that can see this channel, mapped by their ID","readonly":true,"type":[[["Collection","<"],["Snowflake",", "],["GuildMember",">"]]],"meta":{"line":275,"file":"GuildChannel.js","path":"src/structures"}},{"name":"deletable","description":"Whether the channel is deletable by the client user","readonly":true,"type":[[["boolean"]]],"meta":{"line":525,"file":"GuildChannel.js","path":"src/structures"}},{"name":"manageable","description":"Whether the channel is manageable by the client user","readonly":true,"type":[[["boolean"]]],"meta":{"line":534,"file":"GuildChannel.js","path":"src/structures"}},{"name":"viewable","description":"Whether the channel is viewable by the client user","readonly":true,"type":[[["boolean"]]],"meta":{"line":545,"file":"GuildChannel.js","path":"src/structures"}},{"name":"type","description":"The type of the channel, either:\n* `dm` - a DM channel\n* `text` - a guild text channel\n* `voice` - a guild voice channel\n* `category` - a guild category channel\n* `news` - a guild news channel\n* `store` - a guild store channel\n* `unknown` - a generic channel of unknown type, could be Channel or GuildChannel","type":[[["string"]]],"meta":{"line":27,"file":"Channel.js","path":"src/structures"}},{"name":"deleted","description":"Whether the channel has been deleted","type":[[["boolean"]]],"meta":{"line":33,"file":"Channel.js","path":"src/structures"}},{"name":"id","description":"The unique ID of the channel","type":[[["Snowflake"]]],"meta":{"line":43,"file":"Channel.js","path":"src/structures"}},{"name":"createdTimestamp","description":"The timestamp the channel was created at","readonly":true,"type":[[["number"]]],"meta":{"line":51,"file":"Channel.js","path":"src/structures"}},{"name":"createdAt","description":"The time the channel was created at","readonly":true,"type":[[["Date"]]],"meta":{"line":60,"file":"Channel.js","path":"src/structures"}},{"name":"client","description":"The client that instantiated this","readonly":true,"type":[[["Client"]]],"meta":{"line":10,"file":"Base.js","path":"src/structures"}}],"methods":[{"name":"permissionsFor","description":"Gets the overall set of permissions for a member or role in this channel, taking into account channel overwrites.","params":[{"name":"memberOrRole","description":"The member or role to obtain the overall permissions for","type":[[["GuildMemberResolvable"]],[["RoleResolvable"]]]}],"returns":{"types":[[["Readonly","<"],["Permissions",">"]]],"nullable":true},"meta":{"line":109,"file":"GuildChannel.js","path":"src/structures"}},{"name":"memberPermissions","description":"Gets the overall set of permissions for a member in this channel, taking into account channel overwrites.","access":"private","params":[{"name":"member","description":"The member to obtain the overall permissions for","type":[[["GuildMember"]]]}],"returns":[[["Readonly","<"],["Permissions",">"]]],"meta":{"line":149,"file":"GuildChannel.js","path":"src/structures"}},{"name":"rolePermissions","description":"Gets the overall set of permissions for a role in this channel, taking into account channel overwrites.","access":"private","params":[{"name":"role","description":"The role to obtain the overall permissions for","type":[[["Role"]]]}],"returns":[[["Readonly","<"],["Permissions",">"]]],"meta":{"line":175,"file":"GuildChannel.js","path":"src/structures"}},{"name":"overwritePermissions","description":"Replaces the permission overwrites in this channel.","examples":["channel.overwritePermissions({\npermissionOverwrites: [\n  {\n     id: message.author.id,\n     deny: ['VIEW_CHANNEL'],\n  },\n],\n  reason: 'Needed to change permissions'\n});"],"params":[{"name":"options","description":"Options","optional":true,"type":[[["Object"]]]},{"name":"options.permissionOverwrites","description":"Permission overwrites the channel gets updated with","optional":true,"type":[[["Array","<"],["OverwriteResolvable",">"]],[["Collection","<"],["Snowflake",", "],["OverwriteResolvable",">"]]]},{"name":"options.reason","description":"Reason for updating the channel overwrites","optional":true,"type":[[["string"]]]}],"returns":[[["Promise","<"],["GuildChannel",">"]]],"meta":{"line":207,"file":"GuildChannel.js","path":"src/structures"}},{"name":"updateOverwrite","description":"Updates Overwrites for a user or role in this channel. (creates if non-existent)","examples":["// Update or Create permission overwrites for a message author\nmessage.channel.updateOverwrite(message.author, {\n  SEND_MESSAGES: false\n})\n  .then(channel => console.log(channel.permissionOverwrites.get(message.author.id)))\n  .catch(console.error);"],"params":[{"name":"userOrRole","description":"The user or role to update","type":[[["RoleResolvable"]],[["UserResolvable"]]]},{"name":"options","description":"The options for the update","type":[[["PermissionOverwriteOption"]]]},{"name":"reason","description":"Reason for creating/editing this overwrite","optional":true,"type":[[["string"]]]}],"returns":[[["Promise","<"],["GuildChannel",">"]]],"meta":{"line":225,"file":"GuildChannel.js","path":"src/structures"}},{"name":"createOverwrite","description":"Overwrites the permissions for a user or role in this channel. (replaces if existent)","examples":["// Create or Replace permissions overwrites for a message author\nmessage.channel.createOverwrite(message.author, {\n  SEND_MESSAGES: false\n})\n  .then(channel => console.log(channel.permissionOverwrites.get(message.author.id)))\n  .catch(console.error);"],"params":[{"name":"userOrRole","description":"The user or role to update","type":[[["RoleResolvable"]],[["UserResolvable"]]]},{"name":"options","description":"The options for the update","type":[[["PermissionOverwriteOption"]]]},{"name":"reason","description":"Reason for creating/editing this overwrite","optional":true,"type":[[["string"]]]}],"returns":[[["Promise","<"],["GuildChannel",">"]]],"meta":{"line":248,"file":"GuildChannel.js","path":"src/structures"}},{"name":"lockPermissions","description":"Locks in the permission overwrites from the parent channel.","returns":[[["Promise","<"],["GuildChannel",">"]]],"meta":{"line":264,"file":"GuildChannel.js","path":"src/structures"}},{"name":"edit","description":"Edits the channel.","examples":["// Edit a channel\nchannel.edit({ name: 'new-channel' })\n  .then(console.log)\n  .catch(console.error);"],"params":[{"name":"data","description":"The new data for the channel","type":[[["ChannelData"]]]},{"name":"reason","description":"Reason for editing this channel","optional":true,"type":[[["string"]]]}],"async":true,"returns":[[["Promise","<"],["GuildChannel",">"]]],"meta":{"line":313,"file":"GuildChannel.js","path":"src/structures"}},{"name":"setName","description":"Sets a new name for the guild channel.","examples":["// Set a new channel name\nchannel.setName('not_general')\n  .then(newChannel => console.log(`Channel's new name is ${newChannel.name}`))\n  .catch(console.error);"],"params":[{"name":"name","description":"The new name for the guild channel","type":[[["string"]]]},{"name":"reason","description":"Reason for changing the guild channel's name","optional":true,"type":[[["string"]]]}],"returns":[[["Promise","<"],["GuildChannel",">"]]],"meta":{"line":359,"file":"GuildChannel.js","path":"src/structures"}},{"name":"setParent","description":"Sets the category parent of this channel.","examples":["// Add a parent to a channel\nmessage.channel.setParent('355908108431917066', { lockPermissions: false })\n  .then(channel => console.log(`New parent of ${message.channel.name}: ${channel.name}`))\n  .catch(console.error);"],"params":[{"name":"channel","description":"Parent channel","type":[[["CategoryChannel"]],[["Snowflake"]]]},{"name":"options","description":"Options to pass","optional":true,"default":"{}","type":[[["Object"]]]},{"name":"options.lockPermissions","description":"Lock the permissions to what the parent's permissions are","optional":true,"default":true,"type":[[["boolean"]]]},{"name":"options.reason","description":"Reason for modifying the parent of this channel","optional":true,"type":[[["string"]]]}],"returns":[[["Promise","<"],["GuildChannel",">"]]],"meta":{"line":376,"file":"GuildChannel.js","path":"src/structures"}},{"name":"setTopic","description":"Sets a new topic for the guild channel.","examples":["// Set a new channel topic\nchannel.setTopic('needs more rate limiting')\n  .then(newChannel => console.log(`Channel's new topic is ${newChannel.topic}`))\n  .catch(console.error);"],"params":[{"name":"topic","description":"The new topic for the guild channel","type":[[["string"]]]},{"name":"reason","description":"Reason for changing the guild channel's topic","optional":true,"type":[[["string"]]]}],"returns":[[["Promise","<"],["GuildChannel",">"]]],"meta":{"line":394,"file":"GuildChannel.js","path":"src/structures"}},{"name":"setPosition","description":"Sets a new position for the guild channel.","examples":["// Set a new channel position\nchannel.setPosition(2)\n  .then(newChannel => console.log(`Channel's new position is ${newChannel.position}`))\n  .catch(console.error);"],"params":[{"name":"position","description":"The new position for the guild channel","type":[[["number"]]]},{"name":"options","description":"Options for setting position","optional":true,"type":[[["Object"]]]},{"name":"options.relative","description":"Change the position relative to its current value","optional":true,"default":false,"type":[[["boolean"]]]},{"name":"options.reason","description":"Reason for changing the position","optional":true,"type":[[["string"]]]}],"returns":[[["Promise","<"],["GuildChannel",">"]]],"meta":{"line":411,"file":"GuildChannel.js","path":"src/structures"}},{"name":"createInvite","description":"Creates an invite to this guild channel.","examples":["// Create an invite to a channel\nchannel.createInvite()\n  .then(invite => console.log(`Created an invite with a code of ${invite.code}`))\n  .catch(console.error);"],"params":[{"name":"options","description":"Options for the invite","optional":true,"default":"{}","type":[[["Object"]]]},{"name":"options.temporary","description":"Whether members that joined via the invite should be automatically\nkicked after 24 hours if they have not yet received a role","optional":true,"default":false,"type":[[["boolean"]]]},{"name":"options.maxAge","description":"How long the invite should last (in seconds, 0 for forever)","optional":true,"default":86400,"type":[[["number"]]]},{"name":"options.maxUses","description":"Maximum number of uses","optional":true,"default":0,"type":[[["number"]]]},{"name":"options.unique","description":"Create a unique invite, or use an existing one with similar settings","optional":true,"default":false,"type":[[["boolean"]]]},{"name":"options.reason","description":"Reason for creating this","optional":true,"type":[[["string"]]]}],"returns":[[["Promise","<"],["Invite",">"]]],"meta":{"line":439,"file":"GuildChannel.js","path":"src/structures"}},{"name":"fetchInvites","description":"Fetches a collection of invites to this guild channel.\nResolves with a collection mapping invites by their codes.","async":true,"returns":[[["Promise","<"],["Collection","<"],["string",", "],["Invite",">>"]]],"meta":{"line":451,"file":"GuildChannel.js","path":"src/structures"}},{"name":"clone","description":"Clones this channel.","params":[{"name":"options","description":"The options","optional":true,"type":[[["Object"]]]},{"name":"options.name","description":"Name of the new channel","optional":true,"default":"this.name","type":[[["string"]]]},{"name":"options.permissionOverwrites","description":"Permission overwrites of the new channel","optional":true,"default":"this.permissionOverwrites","type":[[["Array","<"],["OverwriteResolvable",">"]],[["Collection","<"],["Snowflake",", "],["OverwriteResolvable",">"]]]},{"name":"options.type","description":"Type of the new channel","optional":true,"default":"this.type","type":[[["string"]]]},{"name":"options.topic","description":"Topic of the new channel (only text)","optional":true,"default":"this.topic","type":[[["string"]]]},{"name":"options.nsfw","description":"Whether the new channel is nsfw (only text)","optional":true,"default":"this.nsfw","type":[[["boolean"]]]},{"name":"options.bitrate","description":"Bitrate of the new channel in bits (only voice)","optional":true,"default":"this.bitrate","type":[[["number"]]]},{"name":"options.userLimit","description":"Maximum amount of users allowed in the new channel (only voice)","optional":true,"default":"this.userLimit","type":[[["number"]]]},{"name":"options.rateLimitPerUser","description":"Ratelimit per user for the new channel (only text)","optional":true,"default":"ThisType.rateLimitPerUser","type":[[["number"]]]},{"name":"options.parent","description":"Parent of the new channel","optional":true,"default":"this.parent","type":[[["ChannelResolvable"]]]},{"name":"options.reason","description":"Reason for cloning this channel","optional":true,"type":[[["string"]]]}],"returns":[[["Promise","<"],["GuildChannel",">"]]],"meta":{"line":478,"file":"GuildChannel.js","path":"src/structures"}},{"name":"equals","description":"Checks if this channel has the same type, topic, position, name, overwrites and ID as another channel.\nIn most cases, a simple `channel.id === channel2.id` will do, and is much faster too.","params":[{"name":"channel","description":"Channel to compare with","type":[[["GuildChannel"]]]}],"returns":[[["boolean"]]],"meta":{"line":501,"file":"GuildChannel.js","path":"src/structures"}},{"name":"delete","description":"Deletes this channel.","examples":["// Delete the channel\nchannel.delete('making room for new channels')\n  .then(console.log)\n  .catch(console.error);"],"params":[{"name":"reason","description":"Reason for deleting this channel","optional":true,"type":[[["string"]]]}],"returns":[[["Promise","<"],["GuildChannel",">"]]],"meta":{"line":562,"file":"GuildChannel.js","path":"src/structures"}},{"name":"toString","description":"When concatenated with a string, this automatically returns the channel's mention instead of the Channel object.","inherits":"Channel#toString","inherited":true,"examples":["// Logs: Hello from <#123456789012345678>!\nconsole.log(`Hello from ${channel}!`);"],"returns":[[["string"]]],"meta":{"line":71,"file":"Channel.js","path":"src/structures"}},{"name":"fetch","description":"Fetches this channel.","inherits":"Channel#fetch","inherited":true,"returns":[[["Promise","<"],["Channel",">"]]],"meta":{"line":92,"file":"Channel.js","path":"src/structures"}}],"meta":{"line":26,"file":"GuildChannel.js","path":"src/structures"}},{"name":"GuildEmoji","description":"Represents a custom emoji.","extends":[[["Emoji"]]],"construct":{"name":"GuildEmoji","params":[{"name":"client","description":"The instantiating client","type":[[["Client"]]]},{"name":"data","description":"The data for the guild emoji","type":[[["Object"]]]},{"name":"guild","description":"The guild the guild emoji is part of","type":[[["Guild"]]]}]},"props":[{"name":"guild","description":"The guild this emoji is part of","type":[[["Guild"]]],"meta":{"line":25,"file":"GuildEmoji.js","path":"src/structures"}},{"name":"requiresColons","description":"Whether or not this emoji requires colons surrounding it","type":[[["boolean"]]],"meta":{"line":34,"file":"GuildEmoji.js","path":"src/structures"}},{"name":"managed","description":"Whether this emoji is managed by an external service","type":[[["boolean"]]],"meta":{"line":41,"file":"GuildEmoji.js","path":"src/structures"}},{"name":"available","description":"Whether this emoji is available","type":[[["boolean"]]],"meta":{"line":48,"file":"GuildEmoji.js","path":"src/structures"}},{"name":"deletable","description":"Whether the emoji is deletable by the client user","readonly":true,"type":[[["boolean"]]],"meta":{"line":69,"file":"GuildEmoji.js","path":"src/structures"}},{"name":"roles","description":"A collection of roles this emoji is active for (empty if all), mapped by role ID","readonly":true,"type":[[["GuildEmojiRoleStore","<"],["Snowflake",", "],["Role",">"]]],"meta":{"line":80,"file":"GuildEmoji.js","path":"src/structures"}},{"name":"animated","description":"Whether this emoji is animated","type":[[["boolean"]]],"meta":{"line":18,"file":"Emoji.js","path":"src/structures"}},{"name":"name","description":"The name of this emoji","type":[[["string"]]],"meta":{"line":24,"file":"Emoji.js","path":"src/structures"}},{"name":"id","description":"The ID of this emoji","nullable":true,"type":[[["Snowflake"]]],"meta":{"line":30,"file":"Emoji.js","path":"src/structures"}},{"name":"deleted","description":"Whether this emoji has been deleted","type":[[["boolean"]]],"meta":{"line":36,"file":"Emoji.js","path":"src/structures"}},{"name":"identifier","description":"The identifier of this emoji, used for message reactions","readonly":true,"type":[[["string"]]],"meta":{"line":44,"file":"Emoji.js","path":"src/structures"}},{"name":"url","description":"The URL to the emoji file if its a custom emoji","readonly":true,"nullable":true,"type":[[["string"]]],"meta":{"line":54,"file":"Emoji.js","path":"src/structures"}},{"name":"createdTimestamp","description":"The timestamp the emoji was created at, or null if unicode","readonly":true,"nullable":true,"type":[[["number"]]],"meta":{"line":64,"file":"Emoji.js","path":"src/structures"}},{"name":"createdAt","description":"The time the emoji was created at, or null if unicode","readonly":true,"nullable":true,"type":[[["Date"]]],"meta":{"line":74,"file":"Emoji.js","path":"src/structures"}},{"name":"client","description":"The client that instantiated this","readonly":true,"type":[[["Client"]]],"meta":{"line":10,"file":"Base.js","path":"src/structures"}}],"methods":[{"name":"fetchAuthor","description":"Fetches the author for this emoji","returns":[[["Promise","<"],["User",">"]]],"meta":{"line":88,"file":"GuildEmoji.js","path":"src/structures"}},{"name":"edit","description":"Edits the emoji.","examples":["// Edit an emoji\nemoji.edit({ name: 'newemoji' })\n  .then(e => console.log(`Edited emoji ${e}`))\n  .catch(console.error);"],"params":[{"name":"data","description":"The new data for the emoji","type":[[["GuildEmojiEditData"]]]},{"name":"reason","description":"Reason for editing this emoji","optional":true,"type":[[["string"]]]}],"returns":[[["Promise","<"],["GuildEmoji",">"]]],"meta":{"line":119,"file":"GuildEmoji.js","path":"src/structures"}},{"name":"setName","description":"Sets the name of the emoji.","params":[{"name":"name","description":"The new name for the emoji","type":[[["string"]]]},{"name":"reason","description":"Reason for changing the emoji's name","optional":true,"type":[[["string"]]]}],"returns":[[["Promise","<"],["GuildEmoji",">"]]],"meta":{"line":139,"file":"GuildEmoji.js","path":"src/structures"}},{"name":"delete","description":"Deletes the emoji.","params":[{"name":"reason","description":"Reason for deleting the emoji","optional":true,"type":[[["string"]]]}],"returns":[[["Promise","<"],["GuildEmoji",">"]]],"meta":{"line":148,"file":"GuildEmoji.js","path":"src/structures"}},{"name":"equals","description":"Whether this emoji is the same as another one.","params":[{"name":"other","description":"The emoji to compare it to","type":[[["GuildEmoji"]],[["Object"]]]}],"returns":{"types":[[["boolean"]]],"description":"Whether the emoji is equal to the given emoji or not"},"meta":{"line":158,"file":"GuildEmoji.js","path":"src/structures"}},{"name":"toString","description":"When concatenated with a string, this automatically returns the text required to form a graphical emoji on Discord\ninstead of the Emoji object.","inherits":"Emoji#toString","inherited":true,"examples":["// Send a custom emoji from a guild:\nconst emoji = guild.emojis.first();\nmsg.reply(`Hello! ${emoji}`);","// Send the emoji used in a reaction to the channel the reaction is part of\nreaction.message.channel.send(`The emoji used was: ${reaction.emoji}`);"],"returns":[[["string"]]],"meta":{"line":91,"file":"Emoji.js","path":"src/structures"}}],"meta":{"line":18,"file":"GuildEmoji.js","path":"src/structures"}},{"name":"GuildMember","description":"Represents a member of a guild on Discord.","extends":[[["Base"]]],"implements":[[["TextBasedChannel"]]],"construct":{"name":"GuildMember","params":[{"name":"client","description":"The instantiating client","type":[[["Client"]]]},{"name":"data","description":"The data for the guild member","type":[[["Object"]]]},{"name":"guild","description":"The guild the member is part of","type":[[["Guild"]]]}]},"props":[{"name":"guild","description":"The guild that this member is part of","type":[[["Guild"]]],"meta":{"line":30,"file":"GuildMember.js","path":"src/structures"}},{"name":"user","description":"The user that this guild member instance represents","type":[[["User"]]],"meta":{"line":32,"file":"GuildMember.js","path":"src/structures"}},{"name":"joinedTimestamp","description":"The timestamp the member joined the guild at","nullable":true,"type":[[["number"]]],"meta":{"line":43,"file":"GuildMember.js","path":"src/structures"}},{"name":"lastMessageID","description":"The ID of the last message sent by the member in their guild, if one was sent","nullable":true,"type":[[["Snowflake"]]],"meta":{"line":49,"file":"GuildMember.js","path":"src/structures"}},{"name":"lastMessageChannelID","description":"The ID of the channel for the last message sent by the member in their guild, if one was sent","nullable":true,"type":[[["Snowflake"]]],"meta":{"line":55,"file":"GuildMember.js","path":"src/structures"}},{"name":"premiumSinceTimestamp","description":"The timestamp of when the member used their Nitro boost on the guild, if it was used","nullable":true,"type":[[["number"]]],"meta":{"line":61,"file":"GuildMember.js","path":"src/structures"}},{"name":"deleted","description":"Whether the member has been removed from the guild","type":[[["boolean"]]],"meta":{"line":67,"file":"GuildMember.js","path":"src/structures"}},{"name":"nickname","description":"The nickname of this member, if they have one","nullable":true,"type":[[["string"]]],"meta":{"line":74,"file":"GuildMember.js","path":"src/structures"}},{"name":"partial","description":"Whether this GuildMember is a partial","readonly":true,"type":[[["boolean"]]],"meta":{"line":99,"file":"GuildMember.js","path":"src/structures"}},{"name":"roles","description":"A collection of roles that are applied to this member, mapped by the role ID","readonly":true,"type":[[["GuildMemberRoleStore","<"],["Snowflake",", "],["Role",">"]]],"meta":{"line":108,"file":"GuildMember.js","path":"src/structures"}},{"name":"lastMessage","description":"The Message object of the last message sent by the member in their guild, if one was sent","readonly":true,"nullable":true,"type":[[["Message"]]],"meta":{"line":117,"file":"GuildMember.js","path":"src/structures"}},{"name":"voice","description":"The voice state of this member","readonly":true,"type":[[["VoiceState"]]],"meta":{"line":127,"file":"GuildMember.js","path":"src/structures"}},{"name":"joinedAt","description":"The time this member joined the guild","readonly":true,"nullable":true,"type":[[["Date"]]],"meta":{"line":136,"file":"GuildMember.js","path":"src/structures"}},{"name":"premiumSince","description":"The time of when the member used their Nitro boost on the guild, if it was used","readonly":true,"nullable":true,"type":[[["Date"]]],"meta":{"line":145,"file":"GuildMember.js","path":"src/structures"}},{"name":"presence","description":"The presence of this guild member","readonly":true,"type":[[["Presence"]]],"meta":{"line":154,"file":"GuildMember.js","path":"src/structures"}},{"name":"displayColor","description":"The displayed color of this member in base 10","readonly":true,"type":[[["number"]]],"meta":{"line":168,"file":"GuildMember.js","path":"src/structures"}},{"name":"displayHexColor","description":"The displayed color of this member in hexadecimal","readonly":true,"type":[[["string"]]],"meta":{"line":178,"file":"GuildMember.js","path":"src/structures"}},{"name":"id","description":"The ID of this member","readonly":true,"type":[[["Snowflake"]]],"meta":{"line":188,"file":"GuildMember.js","path":"src/structures"}},{"name":"displayName","description":"The nickname of this member, or their username if they don't have one","readonly":true,"type":[[["string"]]],"meta":{"line":197,"file":"GuildMember.js","path":"src/structures"}},{"name":"permissions","description":"The overall set of permissions for this member, taking only roles into account","readonly":true,"type":[[["Readonly","<"],["Permissions",">"]]],"meta":{"line":206,"file":"GuildMember.js","path":"src/structures"}},{"name":"manageable","description":"Whether this member is manageable in terms of role hierarchy by the client user","readonly":true,"type":[[["boolean"]]],"meta":{"line":216,"file":"GuildMember.js","path":"src/structures"}},{"name":"kickable","description":"Whether this member is kickable by the client user","readonly":true,"type":[[["boolean"]]],"meta":{"line":228,"file":"GuildMember.js","path":"src/structures"}},{"name":"bannable","description":"Whether this member is bannable by the client user","readonly":true,"type":[[["boolean"]]],"meta":{"line":237,"file":"GuildMember.js","path":"src/structures"}},{"name":"client","description":"The client that instantiated this","readonly":true,"type":[[["Client"]]],"meta":{"line":10,"file":"Base.js","path":"src/structures"}}],"methods":[{"name":"permissionsIn","description":"Returns `channel.permissionsFor(guildMember)`. Returns permissions for a member in a guild channel,\ntaking into account roles and permission overwrites.","params":[{"name":"channel","description":"The guild channel to use as context","type":[[["ChannelResolvable"]]]}],"returns":[[["Readonly","<"],["Permissions",">"]]],"meta":{"line":247,"file":"GuildMember.js","path":"src/structures"}},{"name":"hasPermission","description":"Checks if any of this member's roles have a permission.","params":[{"name":"permission","description":"Permission(s) to check for","type":[[["PermissionResolvable"]]]},{"name":"options","description":"Options","optional":true,"type":[[["Object"]]]},{"name":"options.checkAdmin","description":"Whether to allow the administrator permission to override","optional":true,"default":true,"type":[[["boolean"]]]},{"name":"options.checkOwner","description":"Whether to allow being the guild's owner to override","optional":true,"default":true,"type":[[["boolean"]]]}],"returns":[[["boolean"]]],"meta":{"line":261,"file":"GuildMember.js","path":"src/structures"}},{"name":"edit","description":"Edits this member.","params":[{"name":"data","description":"The data to edit the member with","type":[[["GuildMemberEditData"]]]},{"name":"reason","description":"Reason for editing this user","optional":true,"type":[[["string"]]]}],"async":true,"returns":[[["Promise","<"],["GuildMember",">"]]],"meta":{"line":283,"file":"GuildMember.js","path":"src/structures"}},{"name":"setNickname","description":"Sets the nickname for this member.","params":[{"name":"nick","description":"The nickname for the guild member","type":[[["string"]]]},{"name":"reason","description":"Reason for setting the nickname","optional":true,"type":[[["string"]]]}],"returns":[[["Promise","<"],["GuildMember",">"]]],"meta":{"line":318,"file":"GuildMember.js","path":"src/structures"}},{"name":"createDM","description":"Creates a DM channel between the client and this member.","returns":[[["Promise","<"],["DMChannel",">"]]],"meta":{"line":326,"file":"GuildMember.js","path":"src/structures"}},{"name":"deleteDM","description":"Deletes any DMs with this member.","returns":[[["Promise","<"],["DMChannel",">"]]],"meta":{"line":334,"file":"GuildMember.js","path":"src/structures"}},{"name":"kick","description":"Kicks this member from the guild.","params":[{"name":"reason","description":"Reason for kicking user","optional":true,"type":[[["string"]]]}],"returns":[[["Promise","<"],["GuildMember",">"]]],"meta":{"line":343,"file":"GuildMember.js","path":"src/structures"}},{"name":"ban","description":"Bans this guild member.","examples":["// ban a guild member\nguildMember.ban({ days: 7, reason: 'They deserved it' })\n  .then(console.log)\n  .catch(console.error);"],"params":[{"name":"options","description":"Options for the ban","optional":true,"type":[[["Object"]]]},{"name":"options.days","description":"Number of days of messages to delete","optional":true,"default":0,"type":[[["number"]]]},{"name":"options.reason","description":"Reason for banning","optional":true,"type":[[["string"]]]}],"returns":[[["Promise","<"],["GuildMember",">"]]],"meta":{"line":360,"file":"GuildMember.js","path":"src/structures"}},{"name":"fetch","description":"Fetches this GuildMember.","returns":[[["Promise","<"],["GuildMember",">"]]],"meta":{"line":368,"file":"GuildMember.js","path":"src/structures"}},{"name":"toString","description":"When concatenated with a string, this automatically returns the user's mention instead of the GuildMember object.","examples":["// Logs: Hello from <@123456789012345678>!\nconsole.log(`Hello from ${member}!`);"],"returns":[[["string"]]],"meta":{"line":379,"file":"GuildMember.js","path":"src/structures"}},{"name":"send","description":"Sends a message to this channel.","implements":["TextBasedChannel#send"],"examples":["// Send a basic message\nchannel.send('hello!')\n  .then(message => console.log(`Sent message: ${message.content}`))\n  .catch(console.error);","// Send a remote file\nchannel.send({\n  files: ['https://cdn.discordapp.com/icons/222078108977594368/6e1019b3179d71046e463a75915e7244.png?size=2048']\n})\n  .then(console.log)\n  .catch(console.error);","// Send a local file\nchannel.send({\n  files: [{\n    attachment: 'entire/path/to/file.jpg',\n    name: 'file.jpg'\n  }]\n})\n  .then(console.log)\n  .catch(console.error);","// Send an embed with a local image inside\nchannel.send('This is an embed', {\n  embed: {\n    thumbnail: {\n         url: 'attachment://file.jpg'\n      }\n   },\n   files: [{\n      attachment: 'entire/path/to/file.jpg',\n      name: 'file.jpg'\n   }]\n})\n  .then(console.log)\n  .catch(console.error);"],"params":[{"name":"content","description":"The content to send","optional":true,"default":"''","type":[[["StringResolvable"]],[["APIMessage"]]]},{"name":"options","description":"The options to provide","optional":true,"default":"{}","type":[[["MessageOptions"]],[["MessageAdditions"]]]}],"async":true,"returns":[[["Promise","<("],["Message","|"],["Array","<"],["Message",">)>"]]],"meta":{"line":127,"file":"TextBasedChannel.js","path":"src/structures/interfaces"}}],"meta":{"line":23,"file":"GuildMember.js","path":"src/structures"}},{"name":"Integration","description":"Represents a guild integration.","props":[{"name":"guild","description":"The guild this integration belongs to","type":[[["Guild"]]],"meta":{"line":23,"file":"Integration.js","path":"src/structures"}},{"name":"id","description":"The integration id","type":[[["Snowflake"]]],"meta":{"line":29,"file":"Integration.js","path":"src/structures"}},{"name":"name","description":"The integration name","type":[[["string"]]],"meta":{"line":35,"file":"Integration.js","path":"src/structures"}},{"name":"type","description":"The integration type (twitch, youtube, etc)","type":[[["string"]]],"meta":{"line":41,"file":"Integration.js","path":"src/structures"}},{"name":"enabled","description":"Whether this integration is enabled","type":[[["boolean"]]],"meta":{"line":47,"file":"Integration.js","path":"src/structures"}},{"name":"syncing","description":"Whether this integration is syncing","type":[[["boolean"]]],"meta":{"line":53,"file":"Integration.js","path":"src/structures"}},{"name":"role","description":"The role that this integration uses for subscribers","type":[[["Role"]]],"meta":{"line":59,"file":"Integration.js","path":"src/structures"}},{"name":"user","description":"The user for this integration","type":[[["User"]]],"meta":{"line":65,"file":"Integration.js","path":"src/structures"}},{"name":"account","description":"The account integration information","type":[[["IntegrationAccount"]]],"meta":{"line":71,"file":"Integration.js","path":"src/structures"}},{"name":"syncedAt","description":"The last time this integration was last synced","type":[[["number"]]],"meta":{"line":77,"file":"Integration.js","path":"src/structures"}},{"name":"expireBehavior","description":"The behavior of expiring subscribers","type":[[["number"]]],"meta":{"line":86,"file":"Integration.js","path":"src/structures"}},{"name":"expireGracePeriod","description":"The grace period before expiring subscribers","type":[[["number"]]],"meta":{"line":92,"file":"Integration.js","path":"src/structures"}}],"methods":[{"name":"sync","description":"Sync this integration","returns":[[["Promise","<"],["Integration",">"]]],"meta":{"line":99,"file":"Integration.js","path":"src/structures"}},{"name":"edit","description":"Edits this integration.","params":[{"name":"data","description":"The data to edit this integration with","type":[[["IntegrationEditData"]]]},{"name":"reason","description":"Reason for editing this integration","type":[[["string"]]]}],"returns":[[["Promise","<"],["Integration",">"]]],"meta":{"line":122,"file":"Integration.js","path":"src/structures"}},{"name":"delete","description":"Deletes this integration.","params":[{"name":"reason","description":"Reason for deleting this integration","optional":true,"type":[[["string"]]]}],"returns":[[["Promise","<"],["Integration",">"]]],"meta":{"line":144,"file":"Integration.js","path":"src/structures"}}],"meta":{"line":16,"file":"Integration.js","path":"src/structures"}},{"name":"Collector","description":"Abstract class for defining a new Collector.","abstract":true,"props":[{"name":"client","description":"The client that instantiated this Collector","readonly":true,"type":[[["Client"]]],"meta":{"line":31,"file":"Collector.js","path":"src/structures/interfaces"}},{"name":"filter","description":"The filter applied to this collector","type":[[["CollectorFilter"]]],"meta":{"line":43,"file":"Collector.js","path":"src/structures/interfaces"}},{"name":"options","description":"The options of this collector","type":[[["CollectorOptions"]]],"meta":{"line":49,"file":"Collector.js","path":"src/structures/interfaces"}},{"name":"collected","description":"The items collected by this collector","type":[[["Collection"]]],"meta":{"line":55,"file":"Collector.js","path":"src/structures/interfaces"}},{"name":"ended","description":"Whether this collector has finished collecting","type":[[["boolean"]]],"meta":{"line":61,"file":"Collector.js","path":"src/structures/interfaces"}},{"name":"_timeout","description":"Timeout for cleanup","access":"private","nullable":true,"type":[[["Timeout"]]],"meta":{"line":68,"file":"Collector.js","path":"src/structures/interfaces"}},{"name":"_idletimeout","description":"Timeout for cleanup due to inactivity","access":"private","nullable":true,"type":[[["Timeout"]]],"meta":{"line":75,"file":"Collector.js","path":"src/structures/interfaces"}},{"name":"next","description":"Returns a promise that resolves with the next collected element;\nrejects with collected elements if the collector finishes without receiving a next element","readonly":true,"type":[[["Promise"]]],"meta":{"line":137,"file":"Collector.js","path":"src/structures/interfaces"}}],"methods":[{"name":"handleCollect","description":"Call this to handle an event as a collectable element. Accepts any event data as parameters.","emits":["Collector#event:collect"],"params":[{"name":"args","description":"The arguments emitted by the listener","variable":true,"type":[["*"]]}],"meta":{"line":89,"file":"Collector.js","path":"src/structures/interfaces"}},{"name":"handleDispose","description":"Call this to remove an element from the collection. Accepts any event data as parameters.","emits":["Collector#event:dispose"],"params":[{"name":"args","description":"The arguments emitted by the listener","variable":true,"type":[["*"]]}],"meta":{"line":115,"file":"Collector.js","path":"src/structures/interfaces"}},{"name":"stop","description":"Stops this collector and emits the `end` event.","emits":["Collector#event:end"],"params":[{"name":"reason","description":"The reason this collector is ending","optional":true,"default":"'user'","type":[[["string"]]]}],"meta":{"line":169,"file":"Collector.js","path":"src/structures/interfaces"}},{"name":"checkEnd","description":"Checks whether the collector should end, and if so, ends it.","meta":{"line":194,"file":"Collector.js","path":"src/structures/interfaces"}},{"name":"collect","description":"Handles incoming events from the `handleCollect` function. Returns null if the event should not\nbe collected, or returns an object describing the data that should be stored.","see":["Collector#handleCollect"],"abstract":true,"params":[{"name":"args","description":"Any args the event listener emits","variable":true,"type":[["*"]]}],"returns":{"types":[[["Object"]]],"description":"Data to insert into collection, if any","nullable":true},"meta":{"line":243,"file":"Collector.js","path":"src/structures/interfaces"}},{"name":"dispose","description":"Handles incoming events from the `handleDispose`. Returns null if the event should not\nbe disposed, or returns the key that should be removed.","see":["Collector#handleDispose"],"abstract":true,"params":[{"name":"args","description":"Any args the event listener emits","variable":true,"type":[["*"]]}],"returns":{"types":[["*"]],"description":"Key to remove from the collection, if any","nullable":true},"meta":{"line":253,"file":"Collector.js","path":"src/structures/interfaces"}},{"name":"endReason","description":"The reason this collector has ended or will end with.","abstract":true,"returns":{"types":[[["string"]]],"description":"Reason to end the collector, if any","nullable":true},"meta":{"line":260,"file":"Collector.js","path":"src/structures/interfaces"}}],"events":[{"name":"collect","description":"Emitted whenever an element is collected.","params":[{"name":"args","description":"The arguments emitted by the listener","variable":true,"type":[["*"]]}],"meta":{"line":95,"file":"Collector.js","path":"src/structures/interfaces"}},{"name":"dispose","description":"Emitted whenever an element is disposed of.","params":[{"name":"args","description":"The arguments emitted by the listener","variable":true,"type":[["*"]]}],"meta":{"line":122,"file":"Collector.js","path":"src/structures/interfaces"}},{"name":"end","description":"Emitted when the collector is finished collecting.","params":[{"name":"collected","description":"The elements collected by the collector","type":[[["Collection"]]]},{"name":"reason","description":"The reason the collector ended","type":[[["string"]]]}],"meta":{"line":182,"file":"Collector.js","path":"src/structures/interfaces"}}],"meta":{"line":28,"file":"Collector.js","path":"src/structures/interfaces"}},{"name":"TextBasedChannel","description":"Interface for classes that have text-channel-like features.","props":[{"name":"lastMessage","description":"The Message object of the last message in the channel, if one was sent","readonly":true,"nullable":true,"type":[[["Message"]]],"meta":{"line":39,"file":"TextBasedChannel.js","path":"src/structures/interfaces"}},{"name":"lastPinAt","description":"The date when the last pinned message was pinned, if there was one","readonly":true,"nullable":true,"type":[[["Date"]]],"meta":{"line":48,"file":"TextBasedChannel.js","path":"src/structures/interfaces"}},{"name":"typing","description":"Whether or not the typing indicator is being shown in the channel","readonly":true,"type":[[["boolean"]]],"meta":{"line":223,"file":"TextBasedChannel.js","path":"src/structures/interfaces"}},{"name":"typingCount","description":"Number of times `startTyping` has been called","readonly":true,"type":[[["number"]]],"meta":{"line":232,"file":"TextBasedChannel.js","path":"src/structures/interfaces"}}],"methods":[{"name":"send","description":"Sends a message to this channel.","examples":["// Send a basic message\nchannel.send('hello!')\n  .then(message => console.log(`Sent message: ${message.content}`))\n  .catch(console.error);","// Send a remote file\nchannel.send({\n  files: ['https://cdn.discordapp.com/icons/222078108977594368/6e1019b3179d71046e463a75915e7244.png?size=2048']\n})\n  .then(console.log)\n  .catch(console.error);","// Send a local file\nchannel.send({\n  files: [{\n    attachment: 'entire/path/to/file.jpg',\n    name: 'file.jpg'\n  }]\n})\n  .then(console.log)\n  .catch(console.error);","// Send an embed with a local image inside\nchannel.send('This is an embed', {\n  embed: {\n    thumbnail: {\n         url: 'attachment://file.jpg'\n      }\n   },\n   files: [{\n      attachment: 'entire/path/to/file.jpg',\n      name: 'file.jpg'\n   }]\n})\n  .then(console.log)\n  .catch(console.error);"],"params":[{"name":"content","description":"The content to send","optional":true,"default":"''","type":[[["StringResolvable"]],[["APIMessage"]]]},{"name":"options","description":"The options to provide","optional":true,"default":"{}","type":[[["MessageOptions"]],[["MessageAdditions"]]]}],"async":true,"returns":[[["Promise","<("],["Message","|"],["Array","<"],["Message",">)>"]]],"meta":{"line":127,"file":"TextBasedChannel.js","path":"src/structures/interfaces"}},{"name":"startTyping","description":"Starts a typing indicator in the channel.","examples":["// Start typing in a channel, or increase the typing count by one\nchannel.startTyping();","// Start typing in a channel with a typing count of five, or set it to five\nchannel.startTyping(5);"],"params":[{"name":"count","description":"The number of times startTyping should be considered to have been called","optional":true,"default":1,"type":[[["number"]]]}],"returns":{"types":[[["Promise"]]],"description":"Resolves once the bot stops typing gracefully, or rejects when an error occurs"},"meta":{"line":162,"file":"TextBasedChannel.js","path":"src/structures/interfaces"}},{"name":"stopTyping","description":"Stops the typing indicator in the channel.\nThe indicator will only stop if this is called as many times as startTyping().\n<info>It can take a few seconds for the client user to stop typing.</info>","examples":["// Reduce the typing count by one and stop typing if it reached 0\nchannel.stopTyping();","// Force typing to fully stop regardless of typing count\nchannel.stopTyping(true);"],"params":[{"name":"force","description":"Whether or not to reset the call count and force the indicator to stop","optional":true,"default":false,"type":[[["boolean"]]]}],"meta":{"line":206,"file":"TextBasedChannel.js","path":"src/structures/interfaces"}},{"name":"createMessageCollector","description":"Creates a Message Collector.","examples":["// Create a message collector\nconst filter = m => m.content.includes('discord');\nconst collector = channel.createMessageCollector(filter, { time: 15000 });\ncollector.on('collect', m => console.log(`Collected ${m.content}`));\ncollector.on('end', collected => console.log(`Collected ${collected.size} items`));"],"params":[{"name":"filter","description":"The filter to create the collector with","type":[[["CollectorFilter"]]]},{"name":"options","description":"The options to pass to the collector","optional":true,"default":"{}","type":[[["MessageCollectorOptions"]]]}],"returns":[[["MessageCollector"]]],"meta":{"line":249,"file":"TextBasedChannel.js","path":"src/structures/interfaces"}},{"name":"awaitMessages","description":"Similar to createMessageCollector but in promise form.\nResolves with a collection of messages that pass the specified filter.","examples":["// Await !vote messages\nconst filter = m => m.content.startsWith('!vote');\n// Errors: ['time'] treats ending because of the time limit as an error\nchannel.awaitMessages(filter, { max: 4, time: 60000, errors: ['time'] })\n  .then(collected => console.log(collected.size))\n  .catch(collected => console.log(`After a minute, only ${collected.size} out of 4 voted.`));"],"params":[{"name":"filter","description":"The filter function to use","type":[[["CollectorFilter"]]]},{"name":"options","description":"Optional options to pass to the internal collector","optional":true,"default":"{}","type":[[["AwaitMessagesOptions"]]]}],"returns":[[["Promise","<"],["Collection","<"],["Snowflake",", "],["Message",">>"]]],"meta":{"line":273,"file":"TextBasedChannel.js","path":"src/structures/interfaces"}},{"name":"bulkDelete","description":"Bulk deletes given messages that are newer than two weeks.","examples":["// Bulk delete messages\nchannel.bulkDelete(5)\n  .then(messages => console.log(`Bulk deleted ${messages.size} messages`))\n  .catch(console.error);"],"params":[{"name":"messages","description":"Messages or number of messages to delete","type":[[["Collection","<"],["Snowflake",", "],["Message",">"]],[["Array","<"],["Message",">"]],[["Array","<"],["Snowflake",">"]],[["number"]]]},{"name":"filterOld","description":"Filter messages to remove those which are older than two weeks automatically","optional":true,"default":false,"type":[[["boolean"]]]}],"async":true,"returns":{"types":[[["Promise","<"],["Collection","<"],["Snowflake",", "],["Message",">>"]]],"description":"Deleted messages"},"meta":{"line":298,"file":"TextBasedChannel.js","path":"src/structures/interfaces"}}],"meta":{"line":14,"file":"TextBasedChannel.js","path":"src/structures/interfaces"}},{"name":"Invite","description":"Represents an invitation to a guild channel.\n<warn>The only guaranteed properties are `code`, `channel`, and `url`. Other properties can be missing.</warn>","extends":[[["Base"]]],"props":[{"name":"guild","description":"The guild the invite is for","nullable":true,"type":[[["Guild"]]],"meta":{"line":23,"file":"Invite.js","path":"src/structures"}},{"name":"code","description":"The code for this invite","type":[[["string"]]],"meta":{"line":29,"file":"Invite.js","path":"src/structures"}},{"name":"presenceCount","description":"The approximate number of online members of the guild this invite is for","nullable":true,"type":[[["number"]]],"meta":{"line":35,"file":"Invite.js","path":"src/structures"}},{"name":"memberCount","description":"The approximate total number of members of the guild this invite is for","nullable":true,"type":[[["number"]]],"meta":{"line":41,"file":"Invite.js","path":"src/structures"}},{"name":"temporary","description":"Whether or not this invite is temporary","nullable":true,"type":[[["boolean"]]],"meta":{"line":47,"file":"Invite.js","path":"src/structures"}},{"name":"maxAge","description":"The maximum age of the invite, in seconds, 0 if never expires","nullable":true,"type":[[["number"]]],"meta":{"line":53,"file":"Invite.js","path":"src/structures"}},{"name":"uses","description":"How many times this invite has been used","nullable":true,"type":[[["number"]]],"meta":{"line":59,"file":"Invite.js","path":"src/structures"}},{"name":"maxUses","description":"The maximum uses of this invite","nullable":true,"type":[[["number"]]],"meta":{"line":65,"file":"Invite.js","path":"src/structures"}},{"name":"inviter","description":"The user who created this invite","nullable":true,"type":[[["User"]]],"meta":{"line":71,"file":"Invite.js","path":"src/structures"}},{"name":"targetUser","description":"The target user for this invite","nullable":true,"type":[[["User"]]],"meta":{"line":77,"file":"Invite.js","path":"src/structures"}},{"name":"targetUserType","description":"The target user type","nullable":true,"type":[[["TargetUser"]]],"meta":{"line":89,"file":"Invite.js","path":"src/structures"}},{"name":"channel","description":"The channel the invite is for","type":[[["Channel"]]],"meta":{"line":95,"file":"Invite.js","path":"src/structures"}},{"name":"createdTimestamp","description":"The timestamp the invite was created at","nullable":true,"type":[[["number"]]],"meta":{"line":101,"file":"Invite.js","path":"src/structures"}},{"name":"createdAt","description":"The time the invite was created at","readonly":true,"nullable":true,"type":[[["Date"]]],"meta":{"line":109,"file":"Invite.js","path":"src/structures"}},{"name":"deletable","description":"Whether the invite is deletable by the client user","readonly":true,"type":[[["boolean"]]],"meta":{"line":118,"file":"Invite.js","path":"src/structures"}},{"name":"expiresTimestamp","description":"The timestamp the invite will expire at","readonly":true,"nullable":true,"type":[[["number"]]],"meta":{"line":131,"file":"Invite.js","path":"src/structures"}},{"name":"expiresAt","description":"The time the invite will expire at","readonly":true,"nullable":true,"type":[[["Date"]]],"meta":{"line":140,"file":"Invite.js","path":"src/structures"}},{"name":"url","description":"The URL to the invite","readonly":true,"type":[[["string"]]],"meta":{"line":150,"file":"Invite.js","path":"src/structures"}},{"name":"client","description":"The client that instantiated this","readonly":true,"type":[[["Client"]]],"meta":{"line":10,"file":"Base.js","path":"src/structures"}}],"methods":[{"name":"delete","description":"Deletes this invite.","params":[{"name":"reason","description":"Reason for deleting this invite","optional":true,"type":[[["string"]]]}],"returns":[[["Promise","<"],["Invite",">"]]],"meta":{"line":159,"file":"Invite.js","path":"src/structures"}},{"name":"toString","description":"When concatenated with a string, this automatically concatenates the invite's URL instead of the object.","examples":["// Logs: Invite: https://discord.gg/A1b2C3\nconsole.log(`Invite: ${invite}`);"],"returns":[[["string"]]],"meta":{"line":170,"file":"Invite.js","path":"src/structures"}}],"meta":{"line":13,"file":"Invite.js","path":"src/structures"}},{"name":"Message","description":"Represents a message on Discord.","extends":[[["Base"]]],"construct":{"name":"Message","params":[{"name":"client","description":"The instantiating client","type":[[["Client"]]]},{"name":"data","description":"The data for the message","type":[[["Object"]]]},{"name":"channel","description":"The channel the message was sent in","type":[[["TextChannel"]],[["DMChannel"]]]}]},"props":[{"name":"channel","description":"The channel that the message was sent in","type":[[["TextChannel"]],[["DMChannel"]]],"meta":{"line":35,"file":"Message.js","path":"src/structures"}},{"name":"deleted","description":"Whether this message has been deleted","type":[[["boolean"]]],"meta":{"line":41,"file":"Message.js","path":"src/structures"}},{"name":"id","description":"The ID of the message","type":[[["Snowflake"]]],"meta":{"line":51,"file":"Message.js","path":"src/structures"}},{"name":"type","description":"The type of the message","type":[[["MessageType"]]],"meta":{"line":57,"file":"Message.js","path":"src/structures"}},{"name":"content","description":"The content of the message","type":[[["string"]]],"meta":{"line":63,"file":"Message.js","path":"src/structures"}},{"name":"author","description":"The author of the message","nullable":true,"type":[[["User"]]],"meta":{"line":69,"file":"Message.js","path":"src/structures"}},{"name":"pinned","description":"Whether or not this message is pinned","type":[[["boolean"]]],"meta":{"line":75,"file":"Message.js","path":"src/structures"}},{"name":"tts","description":"Whether or not the message was Text-To-Speech","type":[[["boolean"]]],"meta":{"line":81,"file":"Message.js","path":"src/structures"}},{"name":"nonce","description":"A random number or string used for checking message delivery\n<warn>This is only received after the message was sent successfully, and\nlost if re-fetched</warn>","nullable":true,"type":[[["string"]]],"meta":{"line":89,"file":"Message.js","path":"src/structures"}},{"name":"system","description":"Whether or not this message was sent by Discord, not actually a user (e.g. pin notifications)","type":[[["boolean"]]],"meta":{"line":95,"file":"Message.js","path":"src/structures"}},{"name":"embeds","description":"A list of embeds in the message - e.g. YouTube Player","type":[[["Array","<"],["MessageEmbed",">"]]],"meta":{"line":101,"file":"Message.js","path":"src/structures"}},{"name":"attachments","description":"A collection of attachments in the message - e.g. Pictures - mapped by their ID","type":[[["Collection","<"],["Snowflake",", "],["MessageAttachment",">"]]],"meta":{"line":107,"file":"Message.js","path":"src/structures"}},{"name":"createdTimestamp","description":"The timestamp the message was sent at","type":[[["number"]]],"meta":{"line":120,"file":"Message.js","path":"src/structures"}},{"name":"editedTimestamp","description":"The timestamp the message was last edited at (if applicable)","nullable":true,"type":[[["number"]]],"meta":{"line":126,"file":"Message.js","path":"src/structures"}},{"name":"reactions","description":"A collection of reactions to this message, mapped by the reaction ID","type":[[["ReactionStore","<"],["Snowflake",", "],["MessageReaction",">"]]],"meta":{"line":132,"file":"Message.js","path":"src/structures"}},{"name":"mentions","description":"All valid mentions that the message contains","type":[[["MessageMentions"]]],"meta":{"line":143,"file":"Message.js","path":"src/structures"}},{"name":"webhookID","description":"ID of the webhook that sent the message, if applicable","nullable":true,"type":[[["Snowflake"]]],"meta":{"line":149,"file":"Message.js","path":"src/structures"}},{"name":"application","description":"Supplemental application information for group activities","nullable":true,"type":[[["ClientApplication"]]],"meta":{"line":155,"file":"Message.js","path":"src/structures"}},{"name":"activity","description":"Group activity","nullable":true,"type":[[["MessageActivity"]]],"meta":{"line":161,"file":"Message.js","path":"src/structures"}},{"name":"_edits","description":"The previous versions of the message, sorted with the most recent first","access":"private","type":[[["Array","<"],["Message",">"]]],"meta":{"line":171,"file":"Message.js","path":"src/structures"}},{"name":"flags","description":"Flags that are applied to the message","type":[[["Readonly","<"],["MessageFlags",">"]]],"meta":{"line":183,"file":"Message.js","path":"src/structures"}},{"name":"reference","description":"Message reference data","nullable":true,"type":[[["MessageReference"]]],"meta":{"line":197,"file":"Message.js","path":"src/structures"}},{"name":"partial","description":"Whether or not this message is a partial","readonly":true,"type":[[["boolean"]]],"meta":{"line":209,"file":"Message.js","path":"src/structures"}},{"name":"member","description":"Represents the author of the message as a guild member.\nOnly available if the message comes from a guild where the author is still a member","readonly":true,"nullable":true,"type":[[["GuildMember"]]],"meta":{"line":257,"file":"Message.js","path":"src/structures"}},{"name":"createdAt","description":"The time the message was sent at","readonly":true,"type":[[["Date"]]],"meta":{"line":266,"file":"Message.js","path":"src/structures"}},{"name":"editedAt","description":"The time the message was last edited at (if applicable)","readonly":true,"nullable":true,"type":[[["Date"]]],"meta":{"line":275,"file":"Message.js","path":"src/structures"}},{"name":"guild","description":"The guild the message was sent in (if in a guild channel)","readonly":true,"nullable":true,"type":[[["Guild"]]],"meta":{"line":284,"file":"Message.js","path":"src/structures"}},{"name":"url","description":"The url to jump to this message","readonly":true,"type":[[["string"]]],"meta":{"line":293,"file":"Message.js","path":"src/structures"}},{"name":"cleanContent","description":"The message contents with all mentions replaced by the equivalent text.\nIf mentions cannot be resolved to a name, the relevant mention in the message content will not be converted.","readonly":true,"type":[[["string"]]],"meta":{"line":303,"file":"Message.js","path":"src/structures"}},{"name":"edits","description":"An array of cached versions of the message, including the current version\nSorted from latest (first) to oldest (last)","readonly":true,"type":[[["Array","<"],["Message",">"]]],"meta":{"line":358,"file":"Message.js","path":"src/structures"}},{"name":"editable","description":"Whether the message is editable by the client user","readonly":true,"type":[[["boolean"]]],"meta":{"line":369,"file":"Message.js","path":"src/structures"}},{"name":"deletable","description":"Whether the message is deletable by the client user","readonly":true,"type":[[["boolean"]]],"meta":{"line":378,"file":"Message.js","path":"src/structures"}},{"name":"pinnable","description":"Whether the message is pinnable by the client user","readonly":true,"type":[[["boolean"]]],"meta":{"line":389,"file":"Message.js","path":"src/structures"}},{"name":"client","description":"The client that instantiated this","readonly":true,"type":[[["Client"]]],"meta":{"line":10,"file":"Base.js","path":"src/structures"}}],"methods":[{"name":"patch","description":"Updates the message.","access":"private","params":[{"name":"data","description":"Raw Discord message update data","type":[[["Object"]]]}],"meta":{"line":218,"file":"Message.js","path":"src/structures"}},{"name":"createReactionCollector","description":"Creates a reaction collector.","examples":["// Create a reaction collector\nconst filter = (reaction, user) => reaction.emoji.name === '👌' && user.id === 'someID';\nconst collector = message.createReactionCollector(filter, { time: 15000 });\ncollector.on('collect', r => console.log(`Collected ${r.emoji.name}`));\ncollector.on('end', collected => console.log(`Collected ${collected.size} items`));"],"params":[{"name":"filter","description":"The filter to apply","type":[[["CollectorFilter"]]]},{"name":"options","description":"Options to send to the collector","optional":true,"default":"{}","type":[[["ReactionCollectorOptions"]]]}],"returns":[[["ReactionCollector"]]],"meta":{"line":319,"file":"Message.js","path":"src/structures"}},{"name":"awaitReactions","description":"Similar to createReactionCollector but in promise form.\nResolves with a collection of reactions that pass the specified filter.","examples":["// Create a reaction collector\nconst filter = (reaction, user) => reaction.emoji.name === '👌' && user.id === 'someID'\nmessage.awaitReactions(filter, { time: 15000 })\n  .then(collected => console.log(`Collected ${collected.size} reactions`))\n  .catch(console.error);"],"params":[{"name":"filter","description":"The filter function to use","type":[[["CollectorFilter"]]]},{"name":"options","description":"Optional options to pass to the internal collector","optional":true,"default":"{}","type":[[["AwaitReactionsOptions"]]]}],"returns":[[["Promise","<"],["Collection","<"],["string",", "],["MessageReaction",">>"]]],"meta":{"line":342,"file":"Message.js","path":"src/structures"}},{"name":"edit","description":"Edits the content of the message.","examples":["// Update the content of a message\nmessage.edit('This is my new content!')\n  .then(msg => console.log(`Updated the content of a message to ${msg.content}`))\n  .catch(console.error);"],"params":[{"name":"content","description":"The new content for the message","optional":true,"type":[[["StringResolvable"]],[["APIMessage"]]]},{"name":"options","description":"The options to provide","optional":true,"type":[[["MessageEditOptions"]],[["MessageEmbed"]]]}],"returns":[[["Promise","<"],["Message",">"]]],"meta":{"line":413,"file":"Message.js","path":"src/structures"}},{"name":"pin","description":"Pins this message to the channel's pinned messages.","returns":[[["Promise","<"],["Message",">"]]],"meta":{"line":430,"file":"Message.js","path":"src/structures"}},{"name":"unpin","description":"Unpins this message from the channel's pinned messages.","returns":[[["Promise","<"],["Message",">"]]],"meta":{"line":439,"file":"Message.js","path":"src/structures"}},{"name":"react","description":"Adds a reaction to the message.","examples":["// React to a message with a unicode emoji\nmessage.react('🤔')\n  .then(console.log)\n  .catch(console.error);","// React to a message with a custom emoji\nmessage.react(message.guild.emojis.get('123456789012345678'))\n  .then(console.log)\n  .catch(console.error);"],"params":[{"name":"emoji","description":"The emoji to react with","type":[[["EmojiIdentifierResolvable"]]]}],"returns":[[["Promise","<"],["MessageReaction",">"]]],"meta":{"line":459,"file":"Message.js","path":"src/structures"}},{"name":"delete","description":"Deletes the message.","examples":["// Delete a message\nmessage.delete()\n  .then(msg => console.log(`Deleted message from ${msg.author.username}`))\n  .catch(console.error);"],"params":[{"name":"options","description":"Options","optional":true,"type":[[["Object"]]]},{"name":"options.timeout","description":"How long to wait to delete the message in milliseconds","optional":true,"default":0,"type":[[["number"]]]},{"name":"options.reason","description":"Reason for deleting this message, if it does not belong to the client user","optional":true,"type":[[["string"]]]}],"returns":[[["Promise","<"],["Message",">"]]],"meta":{"line":485,"file":"Message.js","path":"src/structures"}},{"name":"reply","description":"Replies to the message.","examples":["// Reply to a message\nmessage.reply('Hey, I\\'m a reply!')\n  .then(() => console.log(`Sent a reply to ${message.author.username}`))\n  .catch(console.error);"],"params":[{"name":"content","description":"The content for the message","optional":true,"default":"''","type":[[["StringResolvable"]],[["APIMessage"]]]},{"name":"options","description":"The options to provide","optional":true,"default":"{}","type":[[["MessageOptions"]],[["MessageAdditions"]]]}],"returns":[[["Promise","<("],["Message","|"],["Array","<"],["Message",">)>"]]],"meta":{"line":508,"file":"Message.js","path":"src/structures"}},{"name":"fetch","description":"Fetch this message.","returns":[[["Promise","<"],["Message",">"]]],"meta":{"line":519,"file":"Message.js","path":"src/structures"}},{"name":"fetchWebhook","description":"Fetches the webhook used to create this message.","returns":[[["Promise","<?"],["Webhook",">"]]],"meta":{"line":527,"file":"Message.js","path":"src/structures"}},{"name":"equals","description":"Used mainly internally. Whether two messages are identical in properties. If you want to compare messages\nwithout checking all the properties, use `message.id === message2.id`, which is much more efficient. This\nmethod allows you to see if there are differences in content, embeds, attachments, nonce and tts properties.","params":[{"name":"message","description":"The message to compare it to","type":[[["Message"]]]},{"name":"rawData","description":"Raw data passed through the WebSocket about this message","type":[[["Object"]]]}],"returns":[[["boolean"]]],"meta":{"line":540,"file":"Message.js","path":"src/structures"}},{"name":"toString","description":"When concatenated with a string, this automatically concatenates the message's content instead of the object.","examples":["// Logs: Message: This is a message!\nconsole.log(`Message: ${message}`);"],"returns":[[["string"]]],"meta":{"line":569,"file":"Message.js","path":"src/structures"}}],"meta":{"line":28,"file":"Message.js","path":"src/structures"}},{"name":"MessageAttachment","description":"Represents an attachment in a message.","construct":{"name":"MessageAttachment","params":[{"name":"attachment","description":"The file","type":[[["BufferResolvable"]],[["Stream"]]]},{"name":"name","description":"The name of the file, if any","optional":true,"default":null,"type":[[["string"]]]},{"name":"data","description":"Extra data","optional":true,"type":[[["Object"]]]}]},"props":[{"name":"name","description":"The name of this attachment","nullable":true,"type":[[["string"]]],"meta":{"line":20,"file":"MessageAttachment.js","path":"src/structures"}},{"name":"id","description":"The ID of this attachment","type":[[["Snowflake"]]],"meta":{"line":51,"file":"MessageAttachment.js","path":"src/structures"}},{"name":"size","description":"The size of this attachment in bytes","type":[[["number"]]],"meta":{"line":57,"file":"MessageAttachment.js","path":"src/structures"}},{"name":"url","description":"The URL to this attachment","type":[[["string"]]],"meta":{"line":63,"file":"MessageAttachment.js","path":"src/structures"}},{"name":"proxyURL","description":"The Proxy URL to this attachment","type":[[["string"]]],"meta":{"line":69,"file":"MessageAttachment.js","path":"src/structures"}},{"name":"height","description":"The height of this attachment (if an image or video)","nullable":true,"type":[[["number"]]],"meta":{"line":75,"file":"MessageAttachment.js","path":"src/structures"}},{"name":"width","description":"The width of this attachment (if an image or video)","nullable":true,"type":[[["number"]]],"meta":{"line":81,"file":"MessageAttachment.js","path":"src/structures"}},{"name":"spoiler","description":"Whether or not this attachment has been marked as a spoiler","type":[[["boolean"]]],"meta":{"line":88,"file":"MessageAttachment.js","path":"src/structures"}}],"methods":[{"name":"setFile","description":"Sets the file of this attachment.","params":[{"name":"attachment","description":"The file","type":[[["BufferResolvable"]],[["Stream"]]]},{"name":"name","description":"The name of the file, if any","optional":true,"default":null,"type":[[["string"]]]}],"returns":{"types":[[["MessageAttachment"]]],"description":"This attachment"},"meta":{"line":30,"file":"MessageAttachment.js","path":"src/structures"}},{"name":"setName","description":"Sets the name of this attachment.","params":[{"name":"name","description":"The name of the file","type":[[["string"]]]}],"returns":{"types":[[["MessageAttachment"]]],"description":"This attachment"},"meta":{"line":41,"file":"MessageAttachment.js","path":"src/structures"}}],"meta":{"line":14,"file":"MessageAttachment.js","path":"src/structures"}},{"name":"MessageCollector","description":"Collects messages on a channel.","extends":[[["Collector"]]],"construct":{"name":"MessageCollector","params":[{"name":"channel","description":"The channel","type":[[["TextChannel"]],[["DMChannel"]]]},{"name":"filter","description":"The filter to be applied to this collector","type":[[["CollectorFilter"]]]},{"name":"options","description":"The options to be applied to this collector","type":[[["MessageCollectorOptions"]]]}]},"props":[{"name":"channel","description":"The channel","type":[[["TextBasedChannel"]]],"meta":{"line":30,"file":"MessageCollector.js","path":"src/structures"}},{"name":"received","description":"Total number of messages that were received in the channel during message collection","type":[[["number"]]],"meta":{"line":36,"file":"MessageCollector.js","path":"src/structures"}},{"name":"client","description":"The client that instantiated this Collector","readonly":true,"type":[[["Client"]]],"meta":{"line":31,"file":"Collector.js","path":"src/structures/interfaces"}},{"name":"filter","description":"The filter applied to this collector","type":[[["CollectorFilter"]]],"meta":{"line":43,"file":"Collector.js","path":"src/structures/interfaces"}},{"name":"options","description":"The options of this collector","type":[[["CollectorOptions"]]],"meta":{"line":49,"file":"Collector.js","path":"src/structures/interfaces"}},{"name":"collected","description":"The items collected by this collector","type":[[["Collection"]]],"meta":{"line":55,"file":"Collector.js","path":"src/structures/interfaces"}},{"name":"ended","description":"Whether this collector has finished collecting","type":[[["boolean"]]],"meta":{"line":61,"file":"Collector.js","path":"src/structures/interfaces"}},{"name":"_timeout","description":"Timeout for cleanup","access":"private","nullable":true,"type":[[["Timeout"]]],"meta":{"line":68,"file":"Collector.js","path":"src/structures/interfaces"}},{"name":"_idletimeout","description":"Timeout for cleanup due to inactivity","access":"private","nullable":true,"type":[[["Timeout"]]],"meta":{"line":75,"file":"Collector.js","path":"src/structures/interfaces"}},{"name":"next","description":"Returns a promise that resolves with the next collected element;\nrejects with collected elements if the collector finishes without receiving a next element","readonly":true,"type":[[["Promise"]]],"meta":{"line":137,"file":"Collector.js","path":"src/structures/interfaces"}}],"methods":[{"name":"collect","description":"Handles a message for possible collection.","access":"private","params":[{"name":"message","description":"The message that could be collected","type":[[["Message"]]]}],"returns":{"types":[[["Snowflake"]]],"nullable":true},"meta":{"line":61,"file":"MessageCollector.js","path":"src/structures"}},{"name":"dispose","description":"Handles a message for possible disposal.","params":[{"name":"message","description":"The message that could be disposed of","type":[[["Message"]]]}],"returns":{"types":[[["Snowflake"]]],"nullable":true},"meta":{"line":77,"file":"MessageCollector.js","path":"src/structures"}},{"name":"endReason","description":"Checks after un/collection to see if the collector is done.","access":"private","returns":{"types":[[["string"]]],"nullable":true},"meta":{"line":91,"file":"MessageCollector.js","path":"src/structures"}},{"name":"handleCollect","description":"Call this to handle an event as a collectable element. Accepts any event data as parameters.","inherits":"Collector#handleCollect","inherited":true,"emits":["Collector#event:collect"],"params":[{"name":"args","description":"The arguments emitted by the listener","variable":true,"type":[["*"]]}],"meta":{"line":89,"file":"Collector.js","path":"src/structures/interfaces"}},{"name":"handleDispose","description":"Call this to remove an element from the collection. Accepts any event data as parameters.","inherits":"Collector#handleDispose","inherited":true,"emits":["Collector#event:dispose"],"params":[{"name":"args","description":"The arguments emitted by the listener","variable":true,"type":[["*"]]}],"meta":{"line":115,"file":"Collector.js","path":"src/structures/interfaces"}},{"name":"stop","description":"Stops this collector and emits the `end` event.","inherits":"Collector#stop","inherited":true,"emits":["Collector#event:end"],"params":[{"name":"reason","description":"The reason this collector is ending","optional":true,"default":"'user'","type":[[["string"]]]}],"meta":{"line":169,"file":"Collector.js","path":"src/structures/interfaces"}},{"name":"checkEnd","description":"Checks whether the collector should end, and if so, ends it.","inherits":"Collector#checkEnd","inherited":true,"meta":{"line":194,"file":"Collector.js","path":"src/structures/interfaces"}}],"events":[{"name":"collect","description":"Emitted whenever a message is collected.","params":[{"name":"message","description":"The message that was collected","type":[[["Message"]]]}],"meta":{"line":62,"file":"MessageCollector.js","path":"src/structures"}},{"name":"dispose","description":"Emitted whenever a message is disposed of.","params":[{"name":"message","description":"The message that was disposed of","type":[[["Message"]]]}],"meta":{"line":78,"file":"MessageCollector.js","path":"src/structures"}},{"name":"end","description":"Emitted when the collector is finished collecting.","params":[{"name":"collected","description":"The elements collected by the collector","type":[[["Collection"]]]},{"name":"reason","description":"The reason the collector ended","type":[[["string"]]]}],"meta":{"line":182,"file":"Collector.js","path":"src/structures/interfaces"}}],"meta":{"line":23,"file":"MessageCollector.js","path":"src/structures"}},{"name":"MessageEmbed","description":"Represents an embed in a message (image/video preview, rich embed, etc.)","props":[{"name":"type","description":"The type of this embed, either:\n* `image` - an image embed\n* `video` - a video embed\n* `gifv` - a gifv embed\n* `link` - a link embed\n* `rich` - a rich embed","type":[[["string"]]],"meta":{"line":24,"file":"MessageEmbed.js","path":"src/structures"}},{"name":"title","description":"The title of this embed","nullable":true,"type":[[["string"]]],"meta":{"line":30,"file":"MessageEmbed.js","path":"src/structures"}},{"name":"description","description":"The description of this embed","nullable":true,"type":[[["string"]]],"meta":{"line":36,"file":"MessageEmbed.js","path":"src/structures"}},{"name":"url","description":"The URL of this embed","nullable":true,"type":[[["string"]]],"meta":{"line":42,"file":"MessageEmbed.js","path":"src/structures"}},{"name":"color","description":"The color of this embed","nullable":true,"type":[[["number"]]],"meta":{"line":48,"file":"MessageEmbed.js","path":"src/structures"}},{"name":"timestamp","description":"The timestamp of this embed","nullable":true,"type":[[["number"]]],"meta":{"line":54,"file":"MessageEmbed.js","path":"src/structures"}},{"name":"fields","description":"The fields of this embed","type":[[["Array","<"],["EmbedField",">"]]],"meta":{"line":67,"file":"MessageEmbed.js","path":"src/structures"}},{"name":"thumbnail","description":"The thumbnail of this embed (if there is one)","nullable":true,"type":[[["Object"]]],"props":[{"name":"url","description":"URL for this thumbnail","type":[[["string"]]]},{"name":"proxyURL","description":"ProxyURL for this thumbnail","type":[[["string"]]]},{"name":"height","description":"Height of this thumbnail","type":[[["number"]]]},{"name":"width","description":"Width of this thumbnail","type":[[["number"]]]}],"meta":{"line":77,"file":"MessageEmbed.js","path":"src/structures"}},{"name":"image","description":"The image of this embed, if there is one","nullable":true,"type":[[["Object"]]],"props":[{"name":"url","description":"URL for this image","type":[[["string"]]]},{"name":"proxyURL","description":"ProxyURL for this image","type":[[["string"]]]},{"name":"height","description":"Height of this image","type":[[["number"]]]},{"name":"width","description":"Width of this image","type":[[["number"]]]}],"meta":{"line":92,"file":"MessageEmbed.js","path":"src/structures"}},{"name":"video","description":"The video of this embed (if there is one)","readonly":true,"nullable":true,"type":[[["Object"]]],"props":[{"name":"url","description":"URL of this video","type":[[["string"]]]},{"name":"proxyURL","description":"ProxyURL for this video","type":[[["string"]]]},{"name":"height","description":"Height of this video","type":[[["number"]]]},{"name":"width","description":"Width of this video","type":[[["number"]]]}],"meta":{"line":108,"file":"MessageEmbed.js","path":"src/structures"}},{"name":"author","description":"The author of this embed (if there is one)","nullable":true,"type":[[["Object"]]],"props":[{"name":"name","description":"The name of this author","type":[[["string"]]]},{"name":"url","description":"URL of this author","type":[[["string"]]]},{"name":"iconURL","description":"URL of the icon for this author","type":[[["string"]]]},{"name":"proxyIconURL","description":"Proxied URL of the icon for this author","type":[[["string"]]]}],"meta":{"line":123,"file":"MessageEmbed.js","path":"src/structures"}},{"name":"provider","description":"The provider of this embed (if there is one)","nullable":true,"type":[[["Object"]]],"props":[{"name":"name","description":"The name of this provider","type":[[["string"]]]},{"name":"url","description":"URL of this provider","type":[[["string"]]]}],"meta":{"line":136,"file":"MessageEmbed.js","path":"src/structures"}},{"name":"footer","description":"The footer of this embed","nullable":true,"type":[[["Object"]]],"props":[{"name":"text","description":"The text of this footer","type":[[["string"]]]},{"name":"iconURL","description":"URL of the icon for this footer","type":[[["string"]]]},{"name":"proxyIconURL","description":"Proxied URL of the icon for this footer","type":[[["string"]]]}],"meta":{"line":145,"file":"MessageEmbed.js","path":"src/structures"}},{"name":"files","description":"The files of this embed","type":[[["Array","<("],["FileOptions","|"],["string","|"],["MessageAttachment",")>"]]],"meta":{"line":155,"file":"MessageEmbed.js","path":"src/structures"}},{"name":"createdAt","description":"The date this embed was created at","readonly":true,"nullable":true,"type":[[["Date"]]],"meta":{"line":166,"file":"MessageEmbed.js","path":"src/structures"}},{"name":"hexColor","description":"The hexadecimal version of the embed color, with a leading hash","readonly":true,"nullable":true,"type":[[["string"]]],"meta":{"line":175,"file":"MessageEmbed.js","path":"src/structures"}},{"name":"length","description":"The accumulated length for the embed title, description, fields and footer text","readonly":true,"type":[[["number"]]],"meta":{"line":184,"file":"MessageEmbed.js","path":"src/structures"}}],"methods":[{"name":"addField","description":"Adds a field to the embed (max 25).","params":[{"name":"name","description":"The name of the field","type":[[["StringResolvable"]]]},{"name":"value","description":"The value of the field","type":[[["StringResolvable"]]]},{"name":"inline","description":"Set the field to display inline","optional":true,"default":false,"type":[[["boolean"]]]}],"returns":[[["MessageEmbed"]]],"meta":{"line":200,"file":"MessageEmbed.js","path":"src/structures"}},{"name":"addBlankField","description":"Convenience function for `<MessageEmbed>.addField('\\u200B', '\\u200B', inline)`.","params":[{"name":"inline","description":"Set the field to display inline","optional":true,"default":false,"type":[[["boolean"]]]}],"returns":[[["MessageEmbed"]]],"meta":{"line":210,"file":"MessageEmbed.js","path":"src/structures"}},{"name":"spliceField","description":"Removes, replaces, and inserts fields in the embed (max 25).","params":[{"name":"index","description":"The index to start at","type":[[["number"]]]},{"name":"deleteCount","description":"The number of fields to remove","type":[[["number"]]]},{"name":"name","description":"The name of the field","optional":true,"type":[[["StringResolvable"]]]},{"name":"value","description":"The value of the field","optional":true,"type":[[["StringResolvable"]]]},{"name":"inline","description":"Set the field to display inline","optional":true,"default":false,"type":[[["boolean"]]]}],"returns":[[["MessageEmbed"]]],"meta":{"line":223,"file":"MessageEmbed.js","path":"src/structures"}},{"name":"attachFiles","description":"Sets the file to upload alongside the embed. This file can be accessed via `attachment://fileName.extension` when\nsetting an embed image or author/footer icons. Multiple files can be attached.","params":[{"name":"files","description":"Files to attach","type":[[["Array","<("],["FileOptions","|"],["string","|"],["MessageAttachment",")>"]]]}],"returns":[[["MessageEmbed"]]],"meta":{"line":238,"file":"MessageEmbed.js","path":"src/structures"}},{"name":"setAuthor","description":"Sets the author of this embed.","params":[{"name":"name","description":"The name of the author","type":[[["StringResolvable"]]]},{"name":"iconURL","description":"The icon URL of the author","optional":true,"type":[[["string"]]]},{"name":"url","description":"The URL of the author","optional":true,"type":[[["string"]]]}],"returns":[[["MessageEmbed"]]],"meta":{"line":250,"file":"MessageEmbed.js","path":"src/structures"}},{"name":"setColor","description":"Sets the color of this embed.","params":[{"name":"color","description":"The color of the embed","type":[[["ColorResolvable"]]]}],"returns":[[["MessageEmbed"]]],"meta":{"line":260,"file":"MessageEmbed.js","path":"src/structures"}},{"name":"setDescription","description":"Sets the description of this embed.","params":[{"name":"description","description":"The description","type":[[["StringResolvable"]]]}],"returns":[[["MessageEmbed"]]],"meta":{"line":270,"file":"MessageEmbed.js","path":"src/structures"}},{"name":"setFooter","description":"Sets the footer of this embed.","params":[{"name":"text","description":"The text of the footer","type":[[["StringResolvable"]]]},{"name":"iconURL","description":"The icon URL of the footer","optional":true,"type":[[["string"]]]}],"returns":[[["MessageEmbed"]]],"meta":{"line":282,"file":"MessageEmbed.js","path":"src/structures"}},{"name":"setImage","description":"Sets the image of this embed.","params":[{"name":"url","description":"The URL of the image","type":[[["string"]]]}],"returns":[[["MessageEmbed"]]],"meta":{"line":293,"file":"MessageEmbed.js","path":"src/structures"}},{"name":"setThumbnail","description":"Sets the thumbnail of this embed.","params":[{"name":"url","description":"The URL of the thumbnail","type":[[["string"]]]}],"returns":[[["MessageEmbed"]]],"meta":{"line":303,"file":"MessageEmbed.js","path":"src/structures"}},{"name":"setTimestamp","description":"Sets the timestamp of this embed.","params":[{"name":"timestamp","description":"The timestamp or date","optional":true,"default":"Date.now()","type":[[["Date"]],[["number"]]]}],"returns":[[["MessageEmbed"]]],"meta":{"line":313,"file":"MessageEmbed.js","path":"src/structures"}},{"name":"setTitle","description":"Sets the title of this embed.","params":[{"name":"title","description":"The title","type":[[["StringResolvable"]]]}],"returns":[[["MessageEmbed"]]],"meta":{"line":324,"file":"MessageEmbed.js","path":"src/structures"}},{"name":"setURL","description":"Sets the URL of this embed.","params":[{"name":"url","description":"The URL","type":[[["string"]]]}],"returns":[[["MessageEmbed"]]],"meta":{"line":335,"file":"MessageEmbed.js","path":"src/structures"}},{"name":"_apiTransform","description":"Transforms the embed object to be processed.","access":"private","returns":{"types":[[["Object"]]],"description":"The raw data of this embed"},"meta":{"line":349,"file":"MessageEmbed.js","path":"src/structures"}},{"name":"checkField","description":"Checks for valid field input and resolves strings","scope":"static","params":[{"name":"name","description":"The name of the field","type":[[["StringResolvable"]]]},{"name":"value","description":"The value of the field","type":[[["StringResolvable"]]]},{"name":"inline","description":"Set the field to display inline","optional":true,"default":false,"type":[[["boolean"]]]}],"returns":[[["EmbedField"]]],"meta":{"line":379,"file":"MessageEmbed.js","path":"src/structures"}}],"meta":{"line":10,"file":"MessageEmbed.js","path":"src/structures"}},{"name":"MessageMentions","description":"Keeps track of mentions in a {@link Message}.","props":[{"name":"everyone","description":"Whether `@everyone` or `@here` were mentioned","type":[[["boolean"]]],"meta":{"line":39,"file":"MessageMentions.js","path":"src/structures"}},{"name":"users","description":"Any users that were mentioned","type":[[["Collection","<"],["Snowflake",", "],["User",">"]]],"meta":{"line":47,"file":"MessageMentions.js","path":"src/structures"}},{"name":"roles","description":"Any roles that were mentioned","type":[[["Collection","<"],["Snowflake",", "],["Role",">"]]],"meta":{"line":68,"file":"MessageMentions.js","path":"src/structures"}},{"name":"_members","description":"Cached members for {@link MessageMention#members}","access":"private","nullable":true,"type":[[["Collection","<"],["Snowflake",", "],["GuildMember",">"]]],"meta":{"line":85,"file":"MessageMentions.js","path":"src/structures"}},{"name":"_channels","description":"Cached channels for {@link MessageMention#channels}","access":"private","nullable":true,"type":[[["Collection","<"],["Snowflake",", "],["GuildChannel",">"]]],"meta":{"line":92,"file":"MessageMentions.js","path":"src/structures"}},{"name":"crosspostedChannels","description":"A collection of crossposted channels","type":[[["Collection","<"],["Snowflake",", "],["CrosspostedChannel",">"]]],"meta":{"line":109,"file":"MessageMentions.js","path":"src/structures"}},{"name":"members","description":"Any members that were mentioned (only in {@link TextChannel}s)","readonly":true,"nullable":true,"type":[[["Collection","<"],["Snowflake",", "],["GuildMember",">"]]],"meta":{"line":133,"file":"MessageMentions.js","path":"src/structures"}},{"name":"channels","description":"Any channels that were mentioned","readonly":true,"type":[[["Collection","<"],["Snowflake",", "],["GuildChannel",">"]]],"meta":{"line":149,"file":"MessageMentions.js","path":"src/structures"}},{"name":"EVERYONE_PATTERN","description":"Regular expression that globally matches `@everyone` and `@here`","scope":"static","type":[[["RegExp"]]],"meta":{"line":196,"file":"MessageMentions.js","path":"src/structures"}},{"name":"USERS_PATTERN","description":"Regular expression that globally matches user mentions like `<@81440962496172032>`","scope":"static","type":[[["RegExp"]]],"meta":{"line":202,"file":"MessageMentions.js","path":"src/structures"}},{"name":"ROLES_PATTERN","description":"Regular expression that globally matches role mentions like `<@&297577916114403338>`","scope":"static","type":[[["RegExp"]]],"meta":{"line":208,"file":"MessageMentions.js","path":"src/structures"}},{"name":"CHANNELS_PATTERN","description":"Regular expression that globally matches channel mentions like `<#222079895583457280>`","scope":"static","type":[[["RegExp"]]],"meta":{"line":214,"file":"MessageMentions.js","path":"src/structures"}}],"methods":[{"name":"has","description":"Checks if a user, guild member, role, or channel is mentioned.\nTakes into account user mentions, role mentions, and @everyone/@here mentions.","params":[{"name":"data","description":"User/GuildMember/Role/Channel to check","type":[[["UserResolvable"]],[["GuildMember"]],[["Role"]],[["GuildChannel"]]]},{"name":"options","description":"Options","optional":true,"type":[[["Object"]]]},{"name":"options.ignoreDirect","description":"Whether to ignore direct mentions to the item","optional":true,"default":false,"type":[[["boolean"]]]},{"name":"options.ignoreRoles","description":"Whether to ignore role mentions to a guild member","optional":true,"default":false,"type":[[["boolean"]]]},{"name":"options.ignoreEveryone","description":"Whether to ignore everyone/here mentions","optional":true,"default":false,"type":[[["boolean"]]]}],"returns":[[["boolean"]]],"meta":{"line":170,"file":"MessageMentions.js","path":"src/structures"}}],"meta":{"line":12,"file":"MessageMentions.js","path":"src/structures"}},{"name":"MessageReaction","description":"Represents a reaction to a message.","construct":{"name":"MessageReaction","params":[{"name":"client","description":"The instantiating client","type":[[["Client"]]]},{"name":"data","description":"The data for the message reaction","type":[[["Object"]]]},{"name":"message","description":"The message the reaction refers to","type":[[["Message"]]]}]},"props":[{"name":"message","description":"The message that this reaction refers to","type":[[["Message"]]],"meta":{"line":22,"file":"MessageReaction.js","path":"src/structures"}},{"name":"me","description":"Whether the client has given this reaction","type":[[["boolean"]]],"meta":{"line":28,"file":"MessageReaction.js","path":"src/structures"}},{"name":"count","description":"The number of people that have given the same reaction","type":[[["number"]]],"meta":{"line":34,"file":"MessageReaction.js","path":"src/structures"}},{"name":"users","description":"The users that have given this reaction, mapped by their ID","type":[[["ReactionUserStore","<"],["Snowflake",", "],["User",">"]]],"meta":{"line":40,"file":"MessageReaction.js","path":"src/structures"}},{"name":"emoji","description":"The emoji of this reaction, either an GuildEmoji object for known custom emojis, or a ReactionEmoji\nobject which has fewer properties. Whatever the prototype of the emoji, it will still have\n`name`, `id`, `identifier` and `toString()`","readonly":true,"type":[[["GuildEmoji"]],[["ReactionEmoji"]]],"meta":{"line":52,"file":"MessageReaction.js","path":"src/structures"}}],"meta":{"line":17,"file":"MessageReaction.js","path":"src/structures"}},{"name":"NewsChannel","description":"Represents a guild news channel on Discord.","extends":[[["TextChannel"]]],"props":[{"name":"messages","description":"A collection containing the messages sent to this channel","type":[[["MessageStore","<"],["Snowflake",", "],["Message",">"]]],"meta":{"line":26,"file":"TextChannel.js","path":"src/structures"}},{"name":"topic","description":"The topic of the text channel","nullable":true,"type":[[["string"]]],"meta":{"line":37,"file":"TextChannel.js","path":"src/structures"}},{"name":"nsfw","description":"If the guild considers this channel NSFW","readonly":true,"type":[[["boolean"]]],"meta":{"line":44,"file":"TextChannel.js","path":"src/structures"}},{"name":"lastMessageID","description":"The ID of the last message sent in this channel, if one was sent","nullable":true,"type":[[["Snowflake"]]],"meta":{"line":50,"file":"TextChannel.js","path":"src/structures"}},{"name":"rateLimitPerUser","description":"The ratelimit per user for this channel in seconds","type":[[["number"]]],"meta":{"line":56,"file":"TextChannel.js","path":"src/structures"}},{"name":"lastPinTimestamp","description":"The timestamp when the last pinned message was pinned, if there was one","nullable":true,"type":[[["number"]]],"meta":{"line":62,"file":"TextChannel.js","path":"src/structures"}},{"name":"lastMessage","description":"The Message object of the last message in the channel, if one was sent","readonly":true,"nullable":true,"type":[[["Message"]]],"meta":{"line":39,"file":"TextBasedChannel.js","path":"src/structures/interfaces"}},{"name":"lastPinAt","description":"The date when the last pinned message was pinned, if there was one","readonly":true,"nullable":true,"type":[[["Date"]]],"meta":{"line":48,"file":"TextBasedChannel.js","path":"src/structures/interfaces"}},{"name":"typing","description":"Whether or not the typing indicator is being shown in the channel","readonly":true,"type":[[["boolean"]]],"meta":{"line":223,"file":"TextBasedChannel.js","path":"src/structures/interfaces"}},{"name":"typingCount","description":"Number of times `startTyping` has been called","readonly":true,"type":[[["number"]]],"meta":{"line":232,"file":"TextBasedChannel.js","path":"src/structures/interfaces"}},{"name":"guild","description":"The guild the channel is in","type":[[["Guild"]]],"meta":{"line":33,"file":"GuildChannel.js","path":"src/structures"}},{"name":"name","description":"The name of the guild channel","type":[[["string"]]],"meta":{"line":43,"file":"GuildChannel.js","path":"src/structures"}},{"name":"rawPosition","description":"The raw position of the channel from discord","type":[[["number"]]],"meta":{"line":49,"file":"GuildChannel.js","path":"src/structures"}},{"name":"parentID","description":"The ID of the category parent of this channel","nullable":true,"type":[[["Snowflake"]]],"meta":{"line":55,"file":"GuildChannel.js","path":"src/structures"}},{"name":"permissionOverwrites","description":"A map of permission overwrites in this channel for roles and users","type":[[["Collection","<"],["Snowflake",", "],["PermissionOverwrites",">"]]],"meta":{"line":61,"file":"GuildChannel.js","path":"src/structures"}},{"name":"parent","description":"The category parent of this channel","readonly":true,"nullable":true,"type":[[["CategoryChannel"]]],"meta":{"line":74,"file":"GuildChannel.js","path":"src/structures"}},{"name":"permissionsLocked","description":"If the permissionOverwrites match the parent channel, null if no parent","readonly":true,"nullable":true,"type":[[["boolean"]]],"meta":{"line":83,"file":"GuildChannel.js","path":"src/structures"}},{"name":"position","description":"The position of the channel","readonly":true,"type":[[["number"]]],"meta":{"line":99,"file":"GuildChannel.js","path":"src/structures"}},{"name":"members","description":"A collection of members that can see this channel, mapped by their ID","readonly":true,"type":[[["Collection","<"],["Snowflake",", "],["GuildMember",">"]]],"meta":{"line":275,"file":"GuildChannel.js","path":"src/structures"}},{"name":"deletable","description":"Whether the channel is deletable by the client user","readonly":true,"type":[[["boolean"]]],"meta":{"line":525,"file":"GuildChannel.js","path":"src/structures"}},{"name":"manageable","description":"Whether the channel is manageable by the client user","readonly":true,"type":[[["boolean"]]],"meta":{"line":534,"file":"GuildChannel.js","path":"src/structures"}},{"name":"viewable","description":"Whether the channel is viewable by the client user","readonly":true,"type":[[["boolean"]]],"meta":{"line":545,"file":"GuildChannel.js","path":"src/structures"}},{"name":"type","description":"The type of the channel, either:\n* `dm` - a DM channel\n* `text` - a guild text channel\n* `voice` - a guild voice channel\n* `category` - a guild category channel\n* `news` - a guild news channel\n* `store` - a guild store channel\n* `unknown` - a generic channel of unknown type, could be Channel or GuildChannel","type":[[["string"]]],"meta":{"line":27,"file":"Channel.js","path":"src/structures"}},{"name":"deleted","description":"Whether the channel has been deleted","type":[[["boolean"]]],"meta":{"line":33,"file":"Channel.js","path":"src/structures"}},{"name":"id","description":"The unique ID of the channel","type":[[["Snowflake"]]],"meta":{"line":43,"file":"Channel.js","path":"src/structures"}},{"name":"createdTimestamp","description":"The timestamp the channel was created at","readonly":true,"type":[[["number"]]],"meta":{"line":51,"file":"Channel.js","path":"src/structures"}},{"name":"createdAt","description":"The time the channel was created at","readonly":true,"type":[[["Date"]]],"meta":{"line":60,"file":"Channel.js","path":"src/structures"}},{"name":"client","description":"The client that instantiated this","readonly":true,"type":[[["Client"]]],"meta":{"line":10,"file":"Base.js","path":"src/structures"}}],"methods":[{"name":"setRateLimitPerUser","description":"Sets the rate limit per user for this channel.","inherits":"TextChannel#setRateLimitPerUser","inherited":true,"params":[{"name":"rateLimitPerUser","description":"The new ratelimit in seconds","type":[[["number"]]]},{"name":"reason","description":"Reason for changing the channel's ratelimits","optional":true,"type":[[["string"]]]}],"returns":[[["Promise","<"],["TextChannel",">"]]],"meta":{"line":73,"file":"TextChannel.js","path":"src/structures"}},{"name":"setNSFW","description":"Sets whether this channel is flagged as NSFW.","inherits":"TextChannel#setNSFW","inherited":true,"params":[{"name":"nsfw","description":"Whether the channel should be considered NSFW","type":[[["boolean"]]]},{"name":"reason","description":"Reason for changing the channel's NSFW flag","optional":true,"type":[[["string"]]]}],"returns":[[["Promise","<"],["TextChannel",">"]]],"meta":{"line":83,"file":"TextChannel.js","path":"src/structures"}},{"name":"fetchWebhooks","description":"Fetches all webhooks for the channel.","inherits":"TextChannel#fetchWebhooks","inherited":true,"examples":["// Fetch webhooks\nchannel.fetchWebhooks()\n  .then(hooks => console.log(`This channel has ${hooks.size} hooks`))\n  .catch(console.error);"],"returns":[[["Promise","<"],["Collection","<"],["Snowflake",", "],["Webhook",">>"]]],"meta":{"line":96,"file":"TextChannel.js","path":"src/structures"}},{"name":"createWebhook","description":"Creates a webhook for the channel.","inherits":"TextChannel#createWebhook","inherited":true,"examples":["// Create a webhook for the current channel\nchannel.createWebhook('Snek', {\n  avatar: 'https://i.imgur.com/mI8XcpG.jpg',\n  reason: 'Needed a cool new Webhook'\n})\n  .then(console.log)\n  .catch(console.error)"],"params":[{"name":"name","description":"The name of the webhook","type":[[["string"]]]},{"name":"options","description":"Options for creating the webhook","optional":true,"type":[[["Object"]]]},{"name":"options.avatar","description":"Avatar for the webhook","optional":true,"type":[[["BufferResolvable"]],[["Base64Resolvable"]]]},{"name":"options.reason","description":"Reason for creating the webhook","optional":true,"type":[[["string"]]]}],"async":true,"returns":{"types":[[["Promise","<"],["Webhook",">"]]],"description":"webhook The created webhook"},"meta":{"line":120,"file":"TextChannel.js","path":"src/structures"}},{"name":"send","description":"Sends a message to this channel.","inherits":"TextChannel#send","inherited":true,"implements":["TextBasedChannel#send"],"examples":["// Send a basic message\nchannel.send('hello!')\n  .then(message => console.log(`Sent message: ${message.content}`))\n  .catch(console.error);","// Send a remote file\nchannel.send({\n  files: ['https://cdn.discordapp.com/icons/222078108977594368/6e1019b3179d71046e463a75915e7244.png?size=2048']\n})\n  .then(console.log)\n  .catch(console.error);","// Send a local file\nchannel.send({\n  files: [{\n    attachment: 'entire/path/to/file.jpg',\n    name: 'file.jpg'\n  }]\n})\n  .then(console.log)\n  .catch(console.error);","// Send an embed with a local image inside\nchannel.send('This is an embed', {\n  embed: {\n    thumbnail: {\n         url: 'attachment://file.jpg'\n      }\n   },\n   files: [{\n      attachment: 'entire/path/to/file.jpg',\n      name: 'file.jpg'\n   }]\n})\n  .then(console.log)\n  .catch(console.error);"],"params":[{"name":"content","description":"The content to send","optional":true,"default":"''","type":[[["StringResolvable"]],[["APIMessage"]]]},{"name":"options","description":"The options to provide","optional":true,"default":"{}","type":[[["MessageOptions"]],[["MessageAdditions"]]]}],"async":true,"returns":[[["Promise","<("],["Message","|"],["Array","<"],["Message",">)>"]]],"meta":{"line":127,"file":"TextBasedChannel.js","path":"src/structures/interfaces"}},{"name":"startTyping","description":"Starts a typing indicator in the channel.","inherits":"TextChannel#startTyping","inherited":true,"implements":["TextBasedChannel#startTyping"],"examples":["// Start typing in a channel, or increase the typing count by one\nchannel.startTyping();","// Start typing in a channel with a typing count of five, or set it to five\nchannel.startTyping(5);"],"params":[{"name":"count","description":"The number of times startTyping should be considered to have been called","optional":true,"default":1,"type":[[["number"]]]}],"returns":{"types":[[["Promise"]]],"description":"Resolves once the bot stops typing gracefully, or rejects when an error occurs"},"meta":{"line":162,"file":"TextBasedChannel.js","path":"src/structures/interfaces"}},{"name":"stopTyping","description":"Stops the typing indicator in the channel.\nThe indicator will only stop if this is called as many times as startTyping().\n<info>It can take a few seconds for the client user to stop typing.</info>","inherits":"TextChannel#stopTyping","inherited":true,"implements":["TextBasedChannel#stopTyping"],"examples":["// Reduce the typing count by one and stop typing if it reached 0\nchannel.stopTyping();","// Force typing to fully stop regardless of typing count\nchannel.stopTyping(true);"],"params":[{"name":"force","description":"Whether or not to reset the call count and force the indicator to stop","optional":true,"default":false,"type":[[["boolean"]]]}],"meta":{"line":206,"file":"TextBasedChannel.js","path":"src/structures/interfaces"}},{"name":"createMessageCollector","description":"Creates a Message Collector.","inherits":"TextChannel#createMessageCollector","inherited":true,"implements":["TextBasedChannel#createMessageCollector"],"examples":["// Create a message collector\nconst filter = m => m.content.includes('discord');\nconst collector = channel.createMessageCollector(filter, { time: 15000 });\ncollector.on('collect', m => console.log(`Collected ${m.content}`));\ncollector.on('end', collected => console.log(`Collected ${collected.size} items`));"],"params":[{"name":"filter","description":"The filter to create the collector with","type":[[["CollectorFilter"]]]},{"name":"options","description":"The options to pass to the collector","optional":true,"default":"{}","type":[[["MessageCollectorOptions"]]]}],"returns":[[["MessageCollector"]]],"meta":{"line":249,"file":"TextBasedChannel.js","path":"src/structures/interfaces"}},{"name":"awaitMessages","description":"Similar to createMessageCollector but in promise form.\nResolves with a collection of messages that pass the specified filter.","inherits":"TextChannel#awaitMessages","inherited":true,"implements":["TextBasedChannel#awaitMessages"],"examples":["// Await !vote messages\nconst filter = m => m.content.startsWith('!vote');\n// Errors: ['time'] treats ending because of the time limit as an error\nchannel.awaitMessages(filter, { max: 4, time: 60000, errors: ['time'] })\n  .then(collected => console.log(collected.size))\n  .catch(collected => console.log(`After a minute, only ${collected.size} out of 4 voted.`));"],"params":[{"name":"filter","description":"The filter function to use","type":[[["CollectorFilter"]]]},{"name":"options","description":"Optional options to pass to the internal collector","optional":true,"default":"{}","type":[[["AwaitMessagesOptions"]]]}],"returns":[[["Promise","<"],["Collection","<"],["Snowflake",", "],["Message",">>"]]],"meta":{"line":273,"file":"TextBasedChannel.js","path":"src/structures/interfaces"}},{"name":"bulkDelete","description":"Bulk deletes given messages that are newer than two weeks.","inherits":"TextChannel#bulkDelete","inherited":true,"implements":["TextBasedChannel#bulkDelete"],"examples":["// Bulk delete messages\nchannel.bulkDelete(5)\n  .then(messages => console.log(`Bulk deleted ${messages.size} messages`))\n  .catch(console.error);"],"params":[{"name":"messages","description":"Messages or number of messages to delete","type":[[["Collection","<"],["Snowflake",", "],["Message",">"]],[["Array","<"],["Message",">"]],[["Array","<"],["Snowflake",">"]],[["number"]]]},{"name":"filterOld","description":"Filter messages to remove those which are older than two weeks automatically","optional":true,"default":false,"type":[[["boolean"]]]}],"async":true,"returns":{"types":[[["Promise","<"],["Collection","<"],["Snowflake",", "],["Message",">>"]]],"description":"Deleted messages"},"meta":{"line":298,"file":"TextBasedChannel.js","path":"src/structures/interfaces"}},{"name":"permissionsFor","description":"Gets the overall set of permissions for a member or role in this channel, taking into account channel overwrites.","inherits":"GuildChannel#permissionsFor","inherited":true,"params":[{"name":"memberOrRole","description":"The member or role to obtain the overall permissions for","type":[[["GuildMemberResolvable"]],[["RoleResolvable"]]]}],"returns":{"types":[[["Readonly","<"],["Permissions",">"]]],"nullable":true},"meta":{"line":109,"file":"GuildChannel.js","path":"src/structures"}},{"name":"memberPermissions","description":"Gets the overall set of permissions for a member in this channel, taking into account channel overwrites.","access":"private","inherits":"GuildChannel#memberPermissions","inherited":true,"params":[{"name":"member","description":"The member to obtain the overall permissions for","type":[[["GuildMember"]]]}],"returns":[[["Readonly","<"],["Permissions",">"]]],"meta":{"line":149,"file":"GuildChannel.js","path":"src/structures"}},{"name":"rolePermissions","description":"Gets the overall set of permissions for a role in this channel, taking into account channel overwrites.","access":"private","inherits":"GuildChannel#rolePermissions","inherited":true,"params":[{"name":"role","description":"The role to obtain the overall permissions for","type":[[["Role"]]]}],"returns":[[["Readonly","<"],["Permissions",">"]]],"meta":{"line":175,"file":"GuildChannel.js","path":"src/structures"}},{"name":"overwritePermissions","description":"Replaces the permission overwrites in this channel.","inherits":"GuildChannel#overwritePermissions","inherited":true,"examples":["channel.overwritePermissions({\npermissionOverwrites: [\n  {\n     id: message.author.id,\n     deny: ['VIEW_CHANNEL'],\n  },\n],\n  reason: 'Needed to change permissions'\n});"],"params":[{"name":"options","description":"Options","optional":true,"type":[[["Object"]]]},{"name":"options.permissionOverwrites","description":"Permission overwrites the channel gets updated with","optional":true,"type":[[["Array","<"],["OverwriteResolvable",">"]],[["Collection","<"],["Snowflake",", "],["OverwriteResolvable",">"]]]},{"name":"options.reason","description":"Reason for updating the channel overwrites","optional":true,"type":[[["string"]]]}],"returns":[[["Promise","<"],["GuildChannel",">"]]],"meta":{"line":207,"file":"GuildChannel.js","path":"src/structures"}},{"name":"updateOverwrite","description":"Updates Overwrites for a user or role in this channel. (creates if non-existent)","inherits":"GuildChannel#updateOverwrite","inherited":true,"examples":["// Update or Create permission overwrites for a message author\nmessage.channel.updateOverwrite(message.author, {\n  SEND_MESSAGES: false\n})\n  .then(channel => console.log(channel.permissionOverwrites.get(message.author.id)))\n  .catch(console.error);"],"params":[{"name":"userOrRole","description":"The user or role to update","type":[[["RoleResolvable"]],[["UserResolvable"]]]},{"name":"options","description":"The options for the update","type":[[["PermissionOverwriteOption"]]]},{"name":"reason","description":"Reason for creating/editing this overwrite","optional":true,"type":[[["string"]]]}],"returns":[[["Promise","<"],["GuildChannel",">"]]],"meta":{"line":225,"file":"GuildChannel.js","path":"src/structures"}},{"name":"createOverwrite","description":"Overwrites the permissions for a user or role in this channel. (replaces if existent)","inherits":"GuildChannel#createOverwrite","inherited":true,"examples":["// Create or Replace permissions overwrites for a message author\nmessage.channel.createOverwrite(message.author, {\n  SEND_MESSAGES: false\n})\n  .then(channel => console.log(channel.permissionOverwrites.get(message.author.id)))\n  .catch(console.error);"],"params":[{"name":"userOrRole","description":"The user or role to update","type":[[["RoleResolvable"]],[["UserResolvable"]]]},{"name":"options","description":"The options for the update","type":[[["PermissionOverwriteOption"]]]},{"name":"reason","description":"Reason for creating/editing this overwrite","optional":true,"type":[[["string"]]]}],"returns":[[["Promise","<"],["GuildChannel",">"]]],"meta":{"line":248,"file":"GuildChannel.js","path":"src/structures"}},{"name":"lockPermissions","description":"Locks in the permission overwrites from the parent channel.","inherits":"GuildChannel#lockPermissions","inherited":true,"returns":[[["Promise","<"],["GuildChannel",">"]]],"meta":{"line":264,"file":"GuildChannel.js","path":"src/structures"}},{"name":"edit","description":"Edits the channel.","inherits":"GuildChannel#edit","inherited":true,"examples":["// Edit a channel\nchannel.edit({ name: 'new-channel' })\n  .then(console.log)\n  .catch(console.error);"],"params":[{"name":"data","description":"The new data for the channel","type":[[["ChannelData"]]]},{"name":"reason","description":"Reason for editing this channel","optional":true,"type":[[["string"]]]}],"async":true,"returns":[[["Promise","<"],["GuildChannel",">"]]],"meta":{"line":313,"file":"GuildChannel.js","path":"src/structures"}},{"name":"setName","description":"Sets a new name for the guild channel.","inherits":"GuildChannel#setName","inherited":true,"examples":["// Set a new channel name\nchannel.setName('not_general')\n  .then(newChannel => console.log(`Channel's new name is ${newChannel.name}`))\n  .catch(console.error);"],"params":[{"name":"name","description":"The new name for the guild channel","type":[[["string"]]]},{"name":"reason","description":"Reason for changing the guild channel's name","optional":true,"type":[[["string"]]]}],"returns":[[["Promise","<"],["GuildChannel",">"]]],"meta":{"line":359,"file":"GuildChannel.js","path":"src/structures"}},{"name":"setParent","description":"Sets the category parent of this channel.","inherits":"GuildChannel#setParent","inherited":true,"examples":["// Add a parent to a channel\nmessage.channel.setParent('355908108431917066', { lockPermissions: false })\n  .then(channel => console.log(`New parent of ${message.channel.name}: ${channel.name}`))\n  .catch(console.error);"],"params":[{"name":"channel","description":"Parent channel","type":[[["CategoryChannel"]],[["Snowflake"]]]},{"name":"options","description":"Options to pass","optional":true,"default":"{}","type":[[["Object"]]]},{"name":"options.lockPermissions","description":"Lock the permissions to what the parent's permissions are","optional":true,"default":true,"type":[[["boolean"]]]},{"name":"options.reason","description":"Reason for modifying the parent of this channel","optional":true,"type":[[["string"]]]}],"returns":[[["Promise","<"],["GuildChannel",">"]]],"meta":{"line":376,"file":"GuildChannel.js","path":"src/structures"}},{"name":"setTopic","description":"Sets a new topic for the guild channel.","inherits":"GuildChannel#setTopic","inherited":true,"examples":["// Set a new channel topic\nchannel.setTopic('needs more rate limiting')\n  .then(newChannel => console.log(`Channel's new topic is ${newChannel.topic}`))\n  .catch(console.error);"],"params":[{"name":"topic","description":"The new topic for the guild channel","type":[[["string"]]]},{"name":"reason","description":"Reason for changing the guild channel's topic","optional":true,"type":[[["string"]]]}],"returns":[[["Promise","<"],["GuildChannel",">"]]],"meta":{"line":394,"file":"GuildChannel.js","path":"src/structures"}},{"name":"setPosition","description":"Sets a new position for the guild channel.","inherits":"GuildChannel#setPosition","inherited":true,"examples":["// Set a new channel position\nchannel.setPosition(2)\n  .then(newChannel => console.log(`Channel's new position is ${newChannel.position}`))\n  .catch(console.error);"],"params":[{"name":"position","description":"The new position for the guild channel","type":[[["number"]]]},{"name":"options","description":"Options for setting position","optional":true,"type":[[["Object"]]]},{"name":"options.relative","description":"Change the position relative to its current value","optional":true,"default":false,"type":[[["boolean"]]]},{"name":"options.reason","description":"Reason for changing the position","optional":true,"type":[[["string"]]]}],"returns":[[["Promise","<"],["GuildChannel",">"]]],"meta":{"line":411,"file":"GuildChannel.js","path":"src/structures"}},{"name":"createInvite","description":"Creates an invite to this guild channel.","inherits":"GuildChannel#createInvite","inherited":true,"examples":["// Create an invite to a channel\nchannel.createInvite()\n  .then(invite => console.log(`Created an invite with a code of ${invite.code}`))\n  .catch(console.error);"],"params":[{"name":"options","description":"Options for the invite","optional":true,"default":"{}","type":[[["Object"]]]},{"name":"options.temporary","description":"Whether members that joined via the invite should be automatically\nkicked after 24 hours if they have not yet received a role","optional":true,"default":false,"type":[[["boolean"]]]},{"name":"options.maxAge","description":"How long the invite should last (in seconds, 0 for forever)","optional":true,"default":86400,"type":[[["number"]]]},{"name":"options.maxUses","description":"Maximum number of uses","optional":true,"default":0,"type":[[["number"]]]},{"name":"options.unique","description":"Create a unique invite, or use an existing one with similar settings","optional":true,"default":false,"type":[[["boolean"]]]},{"name":"options.reason","description":"Reason for creating this","optional":true,"type":[[["string"]]]}],"returns":[[["Promise","<"],["Invite",">"]]],"meta":{"line":439,"file":"GuildChannel.js","path":"src/structures"}},{"name":"fetchInvites","description":"Fetches a collection of invites to this guild channel.\nResolves with a collection mapping invites by their codes.","inherits":"GuildChannel#fetchInvites","inherited":true,"async":true,"returns":[[["Promise","<"],["Collection","<"],["string",", "],["Invite",">>"]]],"meta":{"line":451,"file":"GuildChannel.js","path":"src/structures"}},{"name":"clone","description":"Clones this channel.","inherits":"GuildChannel#clone","inherited":true,"params":[{"name":"options","description":"The options","optional":true,"type":[[["Object"]]]},{"name":"options.name","description":"Name of the new channel","optional":true,"default":"this.name","type":[[["string"]]]},{"name":"options.permissionOverwrites","description":"Permission overwrites of the new channel","optional":true,"default":"this.permissionOverwrites","type":[[["Array","<"],["OverwriteResolvable",">"]],[["Collection","<"],["Snowflake",", "],["OverwriteResolvable",">"]]]},{"name":"options.type","description":"Type of the new channel","optional":true,"default":"this.type","type":[[["string"]]]},{"name":"options.topic","description":"Topic of the new channel (only text)","optional":true,"default":"this.topic","type":[[["string"]]]},{"name":"options.nsfw","description":"Whether the new channel is nsfw (only text)","optional":true,"default":"this.nsfw","type":[[["boolean"]]]},{"name":"options.bitrate","description":"Bitrate of the new channel in bits (only voice)","optional":true,"default":"this.bitrate","type":[[["number"]]]},{"name":"options.userLimit","description":"Maximum amount of users allowed in the new channel (only voice)","optional":true,"default":"this.userLimit","type":[[["number"]]]},{"name":"options.rateLimitPerUser","description":"Ratelimit per user for the new channel (only text)","optional":true,"default":"ThisType.rateLimitPerUser","type":[[["number"]]]},{"name":"options.parent","description":"Parent of the new channel","optional":true,"default":"this.parent","type":[[["ChannelResolvable"]]]},{"name":"options.reason","description":"Reason for cloning this channel","optional":true,"type":[[["string"]]]}],"returns":[[["Promise","<"],["GuildChannel",">"]]],"meta":{"line":478,"file":"GuildChannel.js","path":"src/structures"}},{"name":"equals","description":"Checks if this channel has the same type, topic, position, name, overwrites and ID as another channel.\nIn most cases, a simple `channel.id === channel2.id` will do, and is much faster too.","inherits":"GuildChannel#equals","inherited":true,"params":[{"name":"channel","description":"Channel to compare with","type":[[["GuildChannel"]]]}],"returns":[[["boolean"]]],"meta":{"line":501,"file":"GuildChannel.js","path":"src/structures"}},{"name":"delete","description":"Deletes this channel.","inherits":"GuildChannel#delete","inherited":true,"examples":["// Delete the channel\nchannel.delete('making room for new channels')\n  .then(console.log)\n  .catch(console.error);"],"params":[{"name":"reason","description":"Reason for deleting this channel","optional":true,"type":[[["string"]]]}],"returns":[[["Promise","<"],["GuildChannel",">"]]],"meta":{"line":562,"file":"GuildChannel.js","path":"src/structures"}},{"name":"toString","description":"When concatenated with a string, this automatically returns the channel's mention instead of the Channel object.","inherits":"Channel#toString","inherited":true,"examples":["// Logs: Hello from <#123456789012345678>!\nconsole.log(`Hello from ${channel}!`);"],"returns":[[["string"]]],"meta":{"line":71,"file":"Channel.js","path":"src/structures"}},{"name":"fetch","description":"Fetches this channel.","inherits":"Channel#fetch","inherited":true,"returns":[[["Promise","<"],["Channel",">"]]],"meta":{"line":92,"file":"Channel.js","path":"src/structures"}}],"meta":{"line":9,"file":"NewsChannel.js","path":"src/structures"}},{"name":"PermissionOverwrites","description":"Represents a permission overwrite for a role or member in a guild channel.","props":[{"name":"channel","description":"The GuildChannel this overwrite is for","readonly":true,"type":[[["GuildChannel"]]],"meta":{"line":13,"file":"PermissionOverwrites.js","path":"src/structures"}},{"name":"id","description":"The ID of this overwrite, either a user ID or a role ID","type":[[["Snowflake"]]],"meta":{"line":29,"file":"PermissionOverwrites.js","path":"src/structures"}},{"name":"type","description":"The type of this overwrite","type":[[["OverwriteType"]]],"meta":{"line":42,"file":"PermissionOverwrites.js","path":"src/structures"}},{"name":"deny","description":"The permissions that are denied for the user or role.","type":[[["Readonly","<"],["Permissions",">"]]],"meta":{"line":48,"file":"PermissionOverwrites.js","path":"src/structures"}},{"name":"allow","description":"The permissions that are allowed for the user or role.","type":[[["Readonly","<"],["Permissions",">"]]],"meta":{"line":54,"file":"PermissionOverwrites.js","path":"src/structures"}}],"methods":[{"name":"update","description":"Updates this permissionOverwrites.","examples":["// Update permission overwrites\npermissionOverwrites.update({\n  SEND_MESSAGES: false\n})\n  .then(channel => console.log(channel.permissionOverwrites.get(message.author.id)))\n  .catch(console.error);"],"params":[{"name":"options","description":"The options for the update","type":[[["PermissionOverwriteOption"]]]},{"name":"reason","description":"Reason for creating/editing this overwrite","optional":true,"type":[[["string"]]]}],"returns":[[["Promise","<"],["PermissionOverwrites",">"]]],"meta":{"line":70,"file":"PermissionOverwrites.js","path":"src/structures"}},{"name":"delete","description":"Deletes this Permission Overwrite.","params":[{"name":"reason","description":"Reason for deleting this overwrite","optional":true,"type":[[["string"]]]}],"returns":[[["Promise","<"],["PermissionOverwrites",">"]]],"meta":{"line":83,"file":"PermissionOverwrites.js","path":"src/structures"}},{"name":"resolveOverwriteOptions","description":"Deletes this Permission Overwrite.","scope":"static","params":[{"name":"options","description":"The options for the update","type":[[["PermissionOverwriteOption"]]]},{"name":"initialPermissions","description":"The initial permissions","type":[[["Object"]]]},{"name":"initialPermissions.allow","description":"Initial allowed permissions","type":[[["PermissionResolvable"]]]},{"name":"initialPermissions.deny","description":"Initial denied permissions","type":[[["PermissionResolvable"]]]}],"returns":[[["ResolvedOverwriteOptions"]]],"meta":{"line":119,"file":"PermissionOverwrites.js","path":"src/structures"}},{"name":"resolve","description":"Resolves an overwrite into {@link RawOverwriteData}.","scope":"static","params":[{"name":"overwrite","description":"The overwrite-like data to resolve","type":[[["OverwriteResolvable"]]]},{"name":"guild","description":"The guild to resolve from","type":[[["Guild"]]]}],"returns":[[["RawOverwriteData"]]],"meta":{"line":168,"file":"PermissionOverwrites.js","path":"src/structures"}}],"meta":{"line":12,"file":"PermissionOverwrites.js","path":"src/structures"}},{"name":"Presence","description":"Represents a user's presence.","construct":{"name":"Presence","params":[{"name":"client","description":"The instantiating client","type":[[["Client"]]]},{"name":"data","description":"The data for the presence","optional":true,"default":"{}","type":[[["Object"]]]}]},"props":[{"name":"client","description":"The client that instantiated this","readonly":true,"type":[[["Client"]]],"meta":{"line":41,"file":"Presence.js","path":"src/structures"}},{"name":"userID","description":"The user ID of this presence","type":[[["Snowflake"]]],"meta":{"line":52,"file":"Presence.js","path":"src/structures"}},{"name":"guild","description":"The guild of this presence","nullable":true,"type":[[["Guild"]]],"meta":{"line":58,"file":"Presence.js","path":"src/structures"}},{"name":"user","description":"The user of this presence","readonly":true,"nullable":true,"type":[[["User"]]],"meta":{"line":68,"file":"Presence.js","path":"src/structures"}},{"name":"member","description":"The member of this presence","readonly":true,"nullable":true,"type":[[["GuildMember"]]],"meta":{"line":77,"file":"Presence.js","path":"src/structures"}},{"name":"status","description":"The status of this presence","type":[[["PresenceStatus"]]],"meta":{"line":86,"file":"Presence.js","path":"src/structures"}},{"name":"activity","description":"The activity of this presence","nullable":true,"type":[[["Activity"]]],"meta":{"line":93,"file":"Presence.js","path":"src/structures"}},{"name":"clientStatus","description":"The devices this presence is on","nullable":true,"type":[[["Object"]]],"props":[{"name":"web","description":"The current presence in the web application","nullable":true,"type":[[["ClientPresenceStatus"]]]},{"name":"mobile","description":"The current presence in the mobile application","nullable":true,"type":[[["ClientPresenceStatus"]]]},{"name":"desktop","description":"The current presence in the desktop application","nullable":true,"type":[[["ClientPresenceStatus"]]]}],"meta":{"line":102,"file":"Presence.js","path":"src/structures"}}],"methods":[{"name":"equals","description":"Whether this presence is equal to another.","params":[{"name":"presence","description":"The presence to compare with","type":[[["Presence"]]]}],"returns":[[["boolean"]]],"meta":{"line":118,"file":"Presence.js","path":"src/structures"}}],"meta":{"line":40,"file":"Presence.js","path":"src/structures"}},{"name":"Activity","description":"Represents an activity that is part of a user's presence.","props":[{"name":"name","description":"The name of the activity being played","type":[[["string"]]],"meta":{"line":145,"file":"Presence.js","path":"src/structures"}},{"name":"type","description":"The type of the activity status","type":[[["ActivityType"]]],"meta":{"line":151,"file":"Presence.js","path":"src/structures"}},{"name":"url","description":"If the activity is being streamed, a link to the stream","nullable":true,"type":[[["string"]]],"meta":{"line":157,"file":"Presence.js","path":"src/structures"}},{"name":"details","description":"Details about the activity","nullable":true,"type":[[["string"]]],"meta":{"line":163,"file":"Presence.js","path":"src/structures"}},{"name":"state","description":"State of the activity","nullable":true,"type":[[["string"]]],"meta":{"line":169,"file":"Presence.js","path":"src/structures"}},{"name":"applicationID","description":"Application ID associated with this activity","nullable":true,"type":[[["Snowflake"]]],"meta":{"line":175,"file":"Presence.js","path":"src/structures"}},{"name":"timestamps","description":"Timestamps for the activity","nullable":true,"type":[[["Object"]]],"props":[{"name":"start","description":"When the activity started","nullable":true,"type":[[["Date"]]]},{"name":"end","description":"When the activity will end","nullable":true,"type":[[["Date"]]]}],"meta":{"line":183,"file":"Presence.js","path":"src/structures"}},{"name":"party","description":"Party of the activity","nullable":true,"type":[[["Object"]]],"props":[{"name":"id","description":"ID of the party","nullable":true,"type":[[["string"]]]},{"name":"size","description":"Size of the party as `[current, max]`","type":[[["Array","<"],["number",">"]]]}],"meta":{"line":194,"file":"Presence.js","path":"src/structures"}},{"name":"assets","description":"Assets for rich presence","nullable":true,"type":[[["RichPresenceAssets"]]],"meta":{"line":200,"file":"Presence.js","path":"src/structures"}},{"name":"flags","description":"Flags that describe the activity","type":[[["Readonly","<"],["ActivityFlags",">"]]],"meta":{"line":208,"file":"Presence.js","path":"src/structures"}},{"name":"emoji","description":"Emoji for a custom activity","nullable":true,"type":[[["Emoji"]]],"meta":{"line":214,"file":"Presence.js","path":"src/structures"}},{"name":"createdTimestamp","description":"Creation date of the activity","type":[[["number"]]],"meta":{"line":220,"file":"Presence.js","path":"src/structures"}},{"name":"createdAt","description":"The time the activity was created at","readonly":true,"type":[[["Date"]]],"meta":{"line":242,"file":"Presence.js","path":"src/structures"}}],"methods":[{"name":"equals","description":"Whether this activity is equal to another activity.","params":[{"name":"activity","description":"The activity to compare with","type":[[["Activity"]]]}],"returns":[[["boolean"]]],"meta":{"line":228,"file":"Presence.js","path":"src/structures"}},{"name":"toString","description":"When concatenated with a string, this automatically returns the activities' name instead of the Activity object.","returns":[[["string"]]],"meta":{"line":250,"file":"Presence.js","path":"src/structures"}}],"meta":{"line":138,"file":"Presence.js","path":"src/structures"}},{"name":"RichPresenceAssets","description":"Assets for a rich presence","props":[{"name":"largeText","description":"Hover text for the large image","nullable":true,"type":[[["string"]]],"meta":{"line":270,"file":"Presence.js","path":"src/structures"}},{"name":"smallText","description":"Hover text for the small image","nullable":true,"type":[[["string"]]],"meta":{"line":276,"file":"Presence.js","path":"src/structures"}},{"name":"largeImage","description":"ID of the large image asset","nullable":true,"type":[[["Snowflake"]]],"meta":{"line":282,"file":"Presence.js","path":"src/structures"}},{"name":"smallImage","description":"ID of the small image asset","nullable":true,"type":[[["Snowflake"]]],"meta":{"line":288,"file":"Presence.js","path":"src/structures"}}],"methods":[{"name":"smallImageURL","description":"Gets the URL of the small image asset","params":[{"name":"options","description":"Options for the image url","optional":true,"type":[[["Object"]]]},{"name":"options.format","description":"Format of the image","optional":true,"type":[[["string"]]]},{"name":"options.size","description":"Size of the image","optional":true,"type":[[["number"]]]}],"returns":{"types":[[["string"]]],"description":"The small image URL","nullable":true},"meta":{"line":298,"file":"Presence.js","path":"src/structures"}},{"name":"largeImageURL","description":"Gets the URL of the large image asset","params":[{"name":"options","description":"Options for the image url","optional":true,"type":[[["Object"]]]},{"name":"options.format","description":"Format of the image","optional":true,"type":[[["string"]]]},{"name":"options.size","description":"Size of the image","optional":true,"type":[[["number"]]]}],"returns":{"types":[[["string"]]],"description":"The large image URL","nullable":true},"meta":{"line":311,"file":"Presence.js","path":"src/structures"}}],"meta":{"line":263,"file":"Presence.js","path":"src/structures"}},{"name":"ReactionCollector","description":"Collects reactions on messages.","extends":[[["Collector"]]],"construct":{"name":"ReactionCollector","params":[{"name":"message","description":"The message upon which to collect reactions","type":[[["Message"]]]},{"name":"filter","description":"The filter to apply to this collector","type":[[["CollectorFilter"]]]},{"name":"options","description":"The options to apply to this collector","optional":true,"default":"{}","type":[[["ReactionCollectorOptions"]]]}]},"props":[{"name":"message","description":"The message upon which to collect reactions","type":[[["Message"]]],"meta":{"line":31,"file":"ReactionCollector.js","path":"src/structures"}},{"name":"users","description":"The users which have reacted to this message","type":[[["Collection"]]],"meta":{"line":37,"file":"ReactionCollector.js","path":"src/structures"}},{"name":"total","description":"The total number of reactions collected","type":[[["number"]]],"meta":{"line":43,"file":"ReactionCollector.js","path":"src/structures"}},{"name":"client","description":"The client that instantiated this Collector","readonly":true,"type":[[["Client"]]],"meta":{"line":31,"file":"Collector.js","path":"src/structures/interfaces"}},{"name":"filter","description":"The filter applied to this collector","type":[[["CollectorFilter"]]],"meta":{"line":43,"file":"Collector.js","path":"src/structures/interfaces"}},{"name":"options","description":"The options of this collector","type":[[["CollectorOptions"]]],"meta":{"line":49,"file":"Collector.js","path":"src/structures/interfaces"}},{"name":"collected","description":"The items collected by this collector","type":[[["Collection"]]],"meta":{"line":55,"file":"Collector.js","path":"src/structures/interfaces"}},{"name":"ended","description":"Whether this collector has finished collecting","type":[[["boolean"]]],"meta":{"line":61,"file":"Collector.js","path":"src/structures/interfaces"}},{"name":"_timeout","description":"Timeout for cleanup","access":"private","nullable":true,"type":[[["Timeout"]]],"meta":{"line":68,"file":"Collector.js","path":"src/structures/interfaces"}},{"name":"_idletimeout","description":"Timeout for cleanup due to inactivity","access":"private","nullable":true,"type":[[["Timeout"]]],"meta":{"line":75,"file":"Collector.js","path":"src/structures/interfaces"}},{"name":"next","description":"Returns a promise that resolves with the next collected element;\nrejects with collected elements if the collector finishes without receiving a next element","readonly":true,"type":[[["Promise"]]],"meta":{"line":137,"file":"Collector.js","path":"src/structures/interfaces"}}],"methods":[{"name":"collect","description":"Handles an incoming reaction for possible collection.","access":"private","params":[{"name":"reaction","description":"The reaction to possibly collect","type":[[["MessageReaction"]]]}],"returns":[[["Snowflake"]],[["string"]]],"meta":{"line":76,"file":"ReactionCollector.js","path":"src/structures"}},{"name":"dispose","description":"Handles a reaction deletion for possible disposal.","params":[{"name":"reaction","description":"The reaction to possibly dispose of","type":[[["MessageReaction"]]]},{"name":"user","description":"The user that removed the reaction","type":[[["User"]]]}],"returns":[[["Snowflake"]],[["string"]]],"meta":{"line":93,"file":"ReactionCollector.js","path":"src/structures"}},{"name":"empty","description":"Empties this reaction collector.","meta":{"line":120,"file":"ReactionCollector.js","path":"src/structures"}},{"name":"handleCollect","description":"Call this to handle an event as a collectable element. Accepts any event data as parameters.","inherits":"Collector#handleCollect","inherited":true,"emits":["Collector#event:collect"],"params":[{"name":"args","description":"The arguments emitted by the listener","variable":true,"type":[["*"]]}],"meta":{"line":89,"file":"Collector.js","path":"src/structures/interfaces"}},{"name":"handleDispose","description":"Call this to remove an element from the collection. Accepts any event data as parameters.","inherits":"Collector#handleDispose","inherited":true,"emits":["Collector#event:dispose"],"params":[{"name":"args","description":"The arguments emitted by the listener","variable":true,"type":[["*"]]}],"meta":{"line":115,"file":"Collector.js","path":"src/structures/interfaces"}},{"name":"stop","description":"Stops this collector and emits the `end` event.","inherits":"Collector#stop","inherited":true,"emits":["Collector#event:end"],"params":[{"name":"reason","description":"The reason this collector is ending","optional":true,"default":"'user'","type":[[["string"]]]}],"meta":{"line":169,"file":"Collector.js","path":"src/structures/interfaces"}},{"name":"checkEnd","description":"Checks whether the collector should end, and if so, ends it.","inherits":"Collector#checkEnd","inherited":true,"meta":{"line":194,"file":"Collector.js","path":"src/structures/interfaces"}},{"name":"endReason","description":"The reason this collector has ended or will end with.","inherits":"Collector#endReason","inherited":true,"abstract":false,"returns":{"types":[[["string"]]],"description":"Reason to end the collector, if any","nullable":true},"meta":{"line":260,"file":"Collector.js","path":"src/structures/interfaces"}},{"name":"key","description":"Gets the collector key for a reaction.","scope":"static","params":[{"name":"reaction","description":"The message reaction to get the key for","type":[[["MessageReaction"]]]}],"returns":[[["Snowflake"]],[["string"]]],"meta":{"line":139,"file":"ReactionCollector.js","path":"src/structures"}}],"events":[{"name":"collect","description":"Emitted whenever a reaction is collected.","params":[{"name":"reaction","description":"The reaction that was collected","type":[[["MessageReaction"]]]},{"name":"user","description":"The user that added the reaction","type":[[["User"]]]}],"meta":{"line":77,"file":"ReactionCollector.js","path":"src/structures"}},{"name":"dispose","description":"Emitted whenever a reaction is disposed of.","params":[{"name":"reaction","description":"The reaction that was disposed of","type":[[["MessageReaction"]]]},{"name":"user","description":"The user that removed the reaction","type":[[["User"]]]}],"meta":{"line":94,"file":"ReactionCollector.js","path":"src/structures"}},{"name":"remove","description":"Emitted whenever a reaction is removed from a message. Will emit on all reaction removals,\nas opposed to {@link Collector#dispose} which will only be emitted when the entire reaction\nis removed.","params":[{"name":"reaction","description":"The reaction that was removed","type":[[["MessageReaction"]]]},{"name":"user","description":"The user that removed the reaction","type":[[["User"]]]}],"meta":{"line":102,"file":"ReactionCollector.js","path":"src/structures"}},{"name":"end","description":"Emitted when the collector is finished collecting.","params":[{"name":"collected","description":"The elements collected by the collector","type":[[["Collection"]]]},{"name":"reason","description":"The reason the collector ended","type":[[["string"]]]}],"meta":{"line":182,"file":"Collector.js","path":"src/structures/interfaces"}}],"meta":{"line":24,"file":"ReactionCollector.js","path":"src/structures"}},{"name":"ReactionEmoji","description":"Represents a limited emoji set used for both custom and unicode emojis. Custom emojis\nwill use this class opposed to the Emoji class when the client doesn't know enough\ninformation about them.","extends":[[["Emoji"]]],"props":[{"name":"reaction","description":"The message reaction this emoji refers to","type":[[["MessageReaction"]]],"meta":{"line":19,"file":"ReactionEmoji.js","path":"src/structures"}},{"name":"animated","description":"Whether this emoji is animated","type":[[["boolean"]]],"meta":{"line":18,"file":"Emoji.js","path":"src/structures"}},{"name":"name","description":"The name of this emoji","type":[[["string"]]],"meta":{"line":24,"file":"Emoji.js","path":"src/structures"}},{"name":"id","description":"The ID of this emoji","nullable":true,"type":[[["Snowflake"]]],"meta":{"line":30,"file":"Emoji.js","path":"src/structures"}},{"name":"deleted","description":"Whether this emoji has been deleted","type":[[["boolean"]]],"meta":{"line":36,"file":"Emoji.js","path":"src/structures"}},{"name":"identifier","description":"The identifier of this emoji, used for message reactions","readonly":true,"type":[[["string"]]],"meta":{"line":44,"file":"Emoji.js","path":"src/structures"}},{"name":"url","description":"The URL to the emoji file if its a custom emoji","readonly":true,"nullable":true,"type":[[["string"]]],"meta":{"line":54,"file":"Emoji.js","path":"src/structures"}},{"name":"createdTimestamp","description":"The timestamp the emoji was created at, or null if unicode","readonly":true,"nullable":true,"type":[[["number"]]],"meta":{"line":64,"file":"Emoji.js","path":"src/structures"}},{"name":"createdAt","description":"The time the emoji was created at, or null if unicode","readonly":true,"nullable":true,"type":[[["Date"]]],"meta":{"line":74,"file":"Emoji.js","path":"src/structures"}},{"name":"client","description":"The client that instantiated this","readonly":true,"type":[[["Client"]]],"meta":{"line":10,"file":"Base.js","path":"src/structures"}}],"methods":[{"name":"toString","description":"When concatenated with a string, this automatically returns the text required to form a graphical emoji on Discord\ninstead of the Emoji object.","inherits":"Emoji#toString","inherited":true,"examples":["// Send a custom emoji from a guild:\nconst emoji = guild.emojis.first();\nmsg.reply(`Hello! ${emoji}`);","// Send the emoji used in a reaction to the channel the reaction is part of\nreaction.message.channel.send(`The emoji used was: ${reaction.emoji}`);"],"returns":[[["string"]]],"meta":{"line":91,"file":"Emoji.js","path":"src/structures"}}],"meta":{"line":13,"file":"ReactionEmoji.js","path":"src/structures"}},{"name":"Role","description":"Represents a role on Discord.","extends":[[["Base"]]],"construct":{"name":"Role","params":[{"name":"client","description":"The instantiating client","type":[[["Client"]]]},{"name":"data","description":"The data for the role","type":[[["Object"]]]},{"name":"guild","description":"The guild the role is part of","type":[[["Guild"]]]}]},"props":[{"name":"guild","description":"The guild that the role belongs to","type":[[["Guild"]]],"meta":{"line":26,"file":"Role.js","path":"src/structures"}},{"name":"id","description":"The ID of the role (unique to the guild it is part of)","type":[[["Snowflake"]]],"meta":{"line":36,"file":"Role.js","path":"src/structures"}},{"name":"name","description":"The name of the role","type":[[["string"]]],"meta":{"line":42,"file":"Role.js","path":"src/structures"}},{"name":"color","description":"The base 10 color of the role","type":[[["number"]]],"meta":{"line":48,"file":"Role.js","path":"src/structures"}},{"name":"hoist","description":"If true, users that are part of this role will appear in a separate category in the users list","type":[[["boolean"]]],"meta":{"line":54,"file":"Role.js","path":"src/structures"}},{"name":"rawPosition","description":"The raw position of the role from the API","type":[[["number"]]],"meta":{"line":60,"file":"Role.js","path":"src/structures"}},{"name":"permissions","description":"The permissions of the role","type":[[["Readonly","<"],["Permissions",">"]]],"meta":{"line":66,"file":"Role.js","path":"src/structures"}},{"name":"managed","description":"Whether or not the role is managed by an external service","type":[[["boolean"]]],"meta":{"line":72,"file":"Role.js","path":"src/structures"}},{"name":"mentionable","description":"Whether or not the role can be mentioned by anyone","type":[[["boolean"]]],"meta":{"line":78,"file":"Role.js","path":"src/structures"}},{"name":"deleted","description":"Whether the role has been deleted","type":[[["boolean"]]],"meta":{"line":84,"file":"Role.js","path":"src/structures"}},{"name":"createdTimestamp","description":"The timestamp the role was created at","readonly":true,"type":[[["number"]]],"meta":{"line":92,"file":"Role.js","path":"src/structures"}},{"name":"createdAt","description":"The time the role was created at","readonly":true,"type":[[["Date"]]],"meta":{"line":101,"file":"Role.js","path":"src/structures"}},{"name":"hexColor","description":"The hexadecimal version of the role color, with a leading hashtag","readonly":true,"type":[[["string"]]],"meta":{"line":110,"file":"Role.js","path":"src/structures"}},{"name":"members","description":"The cached guild members that have this role","readonly":true,"type":[[["Collection","<"],["Snowflake",", "],["GuildMember",">"]]],"meta":{"line":119,"file":"Role.js","path":"src/structures"}},{"name":"editable","description":"Whether the role is editable by the client user","readonly":true,"type":[[["boolean"]]],"meta":{"line":128,"file":"Role.js","path":"src/structures"}},{"name":"position","description":"The position of the role in the role manager","readonly":true,"type":[[["number"]]],"meta":{"line":140,"file":"Role.js","path":"src/structures"}},{"name":"client","description":"The client that instantiated this","readonly":true,"type":[[["Client"]]],"meta":{"line":10,"file":"Base.js","path":"src/structures"}}],"methods":[{"name":"comparePositionTo","description":"Compares this role's position to another role's.","params":[{"name":"role","description":"Role to compare to this one","type":[[["RoleResolvable"]]]}],"returns":{"types":[[["number"]]],"description":"Negative number if this role's position is lower (other role's is higher),\npositive number if this one is higher (other's is lower), 0 if equal"},"meta":{"line":151,"file":"Role.js","path":"src/structures"}},{"name":"edit","description":"Edits the role.","examples":["// Edit a role\nrole.edit({ name: 'new role' })\n  .then(updated => console.log(`Edited role ${updated.name} name to ${updated.name}`))\n  .catch(console.error);"],"params":[{"name":"data","description":"The new data for the role","type":[[["RoleData"]]]},{"name":"reason","description":"Reason for editing this role","optional":true,"type":[[["string"]]]}],"async":true,"returns":[[["Promise","<"],["Role",">"]]],"meta":{"line":179,"file":"Role.js","path":"src/structures"}},{"name":"permissionsIn","description":"Returns `channel.permissionsFor(role)`. Returns permissions for a role in a guild channel,\ntaking into account permission overwrites.","params":[{"name":"channel","description":"The guild channel to use as context","type":[[["ChannelResolvable"]]]}],"returns":[[["Readonly","<"],["Permissions",">"]]],"meta":{"line":215,"file":"Role.js","path":"src/structures"}},{"name":"setName","description":"Sets a new name for the role.","examples":["// Set the name of the role\nrole.setName('new role')\n  .then(updated => console.log(`Edited name of role ${role.name} to ${updated.name}`))\n  .catch(console.error);"],"params":[{"name":"name","description":"The new name of the role","type":[[["string"]]]},{"name":"reason","description":"Reason for changing the role's name","optional":true,"type":[[["string"]]]}],"returns":[[["Promise","<"],["Role",">"]]],"meta":{"line":232,"file":"Role.js","path":"src/structures"}},{"name":"setColor","description":"Sets a new color for the role.","examples":["// Set the color of a role\nrole.setColor('#FF0000')\n  .then(updated => console.log(`Set color of role to ${updated.color}`))\n  .catch(console.error);"],"params":[{"name":"color","description":"The color of the role","type":[[["ColorResolvable"]]]},{"name":"reason","description":"Reason for changing the role's color","optional":true,"type":[[["string"]]]}],"returns":[[["Promise","<"],["Role",">"]]],"meta":{"line":247,"file":"Role.js","path":"src/structures"}},{"name":"setHoist","description":"Sets whether or not the role should be hoisted.","examples":["// Set the hoist of the role\nrole.setHoist(true)\n  .then(r => console.log(`Role hoisted: ${r.hoist}`))\n  .catch(console.error);"],"params":[{"name":"hoist","description":"Whether or not to hoist the role","type":[[["boolean"]]]},{"name":"reason","description":"Reason for setting whether or not the role should be hoisted","optional":true,"type":[[["string"]]]}],"returns":[[["Promise","<"],["Role",">"]]],"meta":{"line":262,"file":"Role.js","path":"src/structures"}},{"name":"setPermissions","description":"Sets the permissions of the role.","examples":["// Set the permissions of the role\nrole.setPermissions(['KICK_MEMBERS', 'BAN_MEMBERS'])\n  .then(updated => console.log(`Updated permissions to ${updated.permissions.bitfield}`))\n  .catch(console.error);","// Remove all permissions from a role\nrole.setPermissions(0)\n  .then(updated => console.log(`Updated permissions to ${updated.permissions.bitfield}`))\n  .catch(console.error);"],"params":[{"name":"permissions","description":"The permissions of the role","type":[[["PermissionResolvable"]]]},{"name":"reason","description":"Reason for changing the role's permissions","optional":true,"type":[[["string"]]]}],"returns":[[["Promise","<"],["Role",">"]]],"meta":{"line":282,"file":"Role.js","path":"src/structures"}},{"name":"setMentionable","description":"Sets whether this role is mentionable.","examples":["// Make the role mentionable\nrole.setMentionable(true)\n  .then(updated => console.log(`Role updated ${updated.name}`))\n  .catch(console.error);"],"params":[{"name":"mentionable","description":"Whether this role should be mentionable","type":[[["boolean"]]]},{"name":"reason","description":"Reason for setting whether or not this role should be mentionable","optional":true,"type":[[["string"]]]}],"returns":[[["Promise","<"],["Role",">"]]],"meta":{"line":297,"file":"Role.js","path":"src/structures"}},{"name":"setPosition","description":"Sets the position of the role.","examples":["// Set the position of the role\nrole.setPosition(1)\n  .then(updated => console.log(`Role position: ${updated.position}`))\n  .catch(console.error);"],"params":[{"name":"position","description":"The position of the role","type":[[["number"]]]},{"name":"options","description":"Options for setting position","optional":true,"type":[[["Object"]]]},{"name":"options.relative","description":"Change the position relative to its current value","optional":true,"default":false,"type":[[["boolean"]]]},{"name":"options.reason","description":"Reason for changing the position","optional":true,"type":[[["string"]]]}],"returns":[[["Promise","<"],["Role",">"]]],"meta":{"line":314,"file":"Role.js","path":"src/structures"}},{"name":"delete","description":"Deletes the role.","examples":["// Delete a role\nrole.delete('The role needed to go')\n  .then(deleted => console.log(`Deleted role ${deleted.name}`))\n  .catch(console.error);"],"params":[{"name":"reason","description":"Reason for deleting this role","optional":true,"type":[[["string"]]]}],"returns":[[["Promise","<"],["Role",">"]]],"meta":{"line":336,"file":"Role.js","path":"src/structures"}},{"name":"equals","description":"Whether this role equals another role. It compares all properties, so for most operations\nit is advisable to just compare `role.id === role2.id` as it is much faster and is often\nwhat most users need.","params":[{"name":"role","description":"Role to compare with","type":[[["Role"]]]}],"returns":[[["boolean"]]],"meta":{"line":351,"file":"Role.js","path":"src/structures"}},{"name":"toString","description":"When concatenated with a string, this automatically returns the role's mention instead of the Role object.","examples":["// Logs: Role: <@&123456789012345678>\nconsole.log(`Role: ${role}`);"],"returns":[[["string"]]],"meta":{"line":369,"file":"Role.js","path":"src/structures"}},{"name":"comparePositions","description":"Compares the positions of two roles.","scope":"static","params":[{"name":"role1","description":"First role to compare","type":[[["Role"]]]},{"name":"role2","description":"Second role to compare","type":[[["Role"]]]}],"returns":{"types":[[["number"]]],"description":"Negative number if the first role's position is lower (second role's is higher),\npositive number if the first's is higher (second's is lower), 0 if equal"},"meta":{"line":385,"file":"Role.js","path":"src/structures"}}],"meta":{"line":19,"file":"Role.js","path":"src/structures"}},{"name":"StoreChannel","description":"Represents a guild store channel on Discord.","extends":[[["GuildChannel"]]],"props":[{"name":"nsfw","description":"If the guild considers this channel NSFW","readonly":true,"type":[[["boolean"]]],"meta":{"line":18,"file":"StoreChannel.js","path":"src/structures"}},{"name":"guild","description":"The guild the channel is in","type":[[["Guild"]]],"meta":{"line":33,"file":"GuildChannel.js","path":"src/structures"}},{"name":"name","description":"The name of the guild channel","type":[[["string"]]],"meta":{"line":43,"file":"GuildChannel.js","path":"src/structures"}},{"name":"rawPosition","description":"The raw position of the channel from discord","type":[[["number"]]],"meta":{"line":49,"file":"GuildChannel.js","path":"src/structures"}},{"name":"parentID","description":"The ID of the category parent of this channel","nullable":true,"type":[[["Snowflake"]]],"meta":{"line":55,"file":"GuildChannel.js","path":"src/structures"}},{"name":"permissionOverwrites","description":"A map of permission overwrites in this channel for roles and users","type":[[["Collection","<"],["Snowflake",", "],["PermissionOverwrites",">"]]],"meta":{"line":61,"file":"GuildChannel.js","path":"src/structures"}},{"name":"parent","description":"The category parent of this channel","readonly":true,"nullable":true,"type":[[["CategoryChannel"]]],"meta":{"line":74,"file":"GuildChannel.js","path":"src/structures"}},{"name":"permissionsLocked","description":"If the permissionOverwrites match the parent channel, null if no parent","readonly":true,"nullable":true,"type":[[["boolean"]]],"meta":{"line":83,"file":"GuildChannel.js","path":"src/structures"}},{"name":"position","description":"The position of the channel","readonly":true,"type":[[["number"]]],"meta":{"line":99,"file":"GuildChannel.js","path":"src/structures"}},{"name":"members","description":"A collection of members that can see this channel, mapped by their ID","readonly":true,"type":[[["Collection","<"],["Snowflake",", "],["GuildMember",">"]]],"meta":{"line":275,"file":"GuildChannel.js","path":"src/structures"}},{"name":"deletable","description":"Whether the channel is deletable by the client user","readonly":true,"type":[[["boolean"]]],"meta":{"line":525,"file":"GuildChannel.js","path":"src/structures"}},{"name":"manageable","description":"Whether the channel is manageable by the client user","readonly":true,"type":[[["boolean"]]],"meta":{"line":534,"file":"GuildChannel.js","path":"src/structures"}},{"name":"viewable","description":"Whether the channel is viewable by the client user","readonly":true,"type":[[["boolean"]]],"meta":{"line":545,"file":"GuildChannel.js","path":"src/structures"}},{"name":"type","description":"The type of the channel, either:\n* `dm` - a DM channel\n* `text` - a guild text channel\n* `voice` - a guild voice channel\n* `category` - a guild category channel\n* `news` - a guild news channel\n* `store` - a guild store channel\n* `unknown` - a generic channel of unknown type, could be Channel or GuildChannel","type":[[["string"]]],"meta":{"line":27,"file":"Channel.js","path":"src/structures"}},{"name":"deleted","description":"Whether the channel has been deleted","type":[[["boolean"]]],"meta":{"line":33,"file":"Channel.js","path":"src/structures"}},{"name":"id","description":"The unique ID of the channel","type":[[["Snowflake"]]],"meta":{"line":43,"file":"Channel.js","path":"src/structures"}},{"name":"createdTimestamp","description":"The timestamp the channel was created at","readonly":true,"type":[[["number"]]],"meta":{"line":51,"file":"Channel.js","path":"src/structures"}},{"name":"createdAt","description":"The time the channel was created at","readonly":true,"type":[[["Date"]]],"meta":{"line":60,"file":"Channel.js","path":"src/structures"}},{"name":"client","description":"The client that instantiated this","readonly":true,"type":[[["Client"]]],"meta":{"line":10,"file":"Base.js","path":"src/structures"}}],"methods":[{"name":"permissionsFor","description":"Gets the overall set of permissions for a member or role in this channel, taking into account channel overwrites.","inherits":"GuildChannel#permissionsFor","inherited":true,"params":[{"name":"memberOrRole","description":"The member or role to obtain the overall permissions for","type":[[["GuildMemberResolvable"]],[["RoleResolvable"]]]}],"returns":{"types":[[["Readonly","<"],["Permissions",">"]]],"nullable":true},"meta":{"line":109,"file":"GuildChannel.js","path":"src/structures"}},{"name":"memberPermissions","description":"Gets the overall set of permissions for a member in this channel, taking into account channel overwrites.","access":"private","inherits":"GuildChannel#memberPermissions","inherited":true,"params":[{"name":"member","description":"The member to obtain the overall permissions for","type":[[["GuildMember"]]]}],"returns":[[["Readonly","<"],["Permissions",">"]]],"meta":{"line":149,"file":"GuildChannel.js","path":"src/structures"}},{"name":"rolePermissions","description":"Gets the overall set of permissions for a role in this channel, taking into account channel overwrites.","access":"private","inherits":"GuildChannel#rolePermissions","inherited":true,"params":[{"name":"role","description":"The role to obtain the overall permissions for","type":[[["Role"]]]}],"returns":[[["Readonly","<"],["Permissions",">"]]],"meta":{"line":175,"file":"GuildChannel.js","path":"src/structures"}},{"name":"overwritePermissions","description":"Replaces the permission overwrites in this channel.","inherits":"GuildChannel#overwritePermissions","inherited":true,"examples":["channel.overwritePermissions({\npermissionOverwrites: [\n  {\n     id: message.author.id,\n     deny: ['VIEW_CHANNEL'],\n  },\n],\n  reason: 'Needed to change permissions'\n});"],"params":[{"name":"options","description":"Options","optional":true,"type":[[["Object"]]]},{"name":"options.permissionOverwrites","description":"Permission overwrites the channel gets updated with","optional":true,"type":[[["Array","<"],["OverwriteResolvable",">"]],[["Collection","<"],["Snowflake",", "],["OverwriteResolvable",">"]]]},{"name":"options.reason","description":"Reason for updating the channel overwrites","optional":true,"type":[[["string"]]]}],"returns":[[["Promise","<"],["GuildChannel",">"]]],"meta":{"line":207,"file":"GuildChannel.js","path":"src/structures"}},{"name":"updateOverwrite","description":"Updates Overwrites for a user or role in this channel. (creates if non-existent)","inherits":"GuildChannel#updateOverwrite","inherited":true,"examples":["// Update or Create permission overwrites for a message author\nmessage.channel.updateOverwrite(message.author, {\n  SEND_MESSAGES: false\n})\n  .then(channel => console.log(channel.permissionOverwrites.get(message.author.id)))\n  .catch(console.error);"],"params":[{"name":"userOrRole","description":"The user or role to update","type":[[["RoleResolvable"]],[["UserResolvable"]]]},{"name":"options","description":"The options for the update","type":[[["PermissionOverwriteOption"]]]},{"name":"reason","description":"Reason for creating/editing this overwrite","optional":true,"type":[[["string"]]]}],"returns":[[["Promise","<"],["GuildChannel",">"]]],"meta":{"line":225,"file":"GuildChannel.js","path":"src/structures"}},{"name":"createOverwrite","description":"Overwrites the permissions for a user or role in this channel. (replaces if existent)","inherits":"GuildChannel#createOverwrite","inherited":true,"examples":["// Create or Replace permissions overwrites for a message author\nmessage.channel.createOverwrite(message.author, {\n  SEND_MESSAGES: false\n})\n  .then(channel => console.log(channel.permissionOverwrites.get(message.author.id)))\n  .catch(console.error);"],"params":[{"name":"userOrRole","description":"The user or role to update","type":[[["RoleResolvable"]],[["UserResolvable"]]]},{"name":"options","description":"The options for the update","type":[[["PermissionOverwriteOption"]]]},{"name":"reason","description":"Reason for creating/editing this overwrite","optional":true,"type":[[["string"]]]}],"returns":[[["Promise","<"],["GuildChannel",">"]]],"meta":{"line":248,"file":"GuildChannel.js","path":"src/structures"}},{"name":"lockPermissions","description":"Locks in the permission overwrites from the parent channel.","inherits":"GuildChannel#lockPermissions","inherited":true,"returns":[[["Promise","<"],["GuildChannel",">"]]],"meta":{"line":264,"file":"GuildChannel.js","path":"src/structures"}},{"name":"edit","description":"Edits the channel.","inherits":"GuildChannel#edit","inherited":true,"examples":["// Edit a channel\nchannel.edit({ name: 'new-channel' })\n  .then(console.log)\n  .catch(console.error);"],"params":[{"name":"data","description":"The new data for the channel","type":[[["ChannelData"]]]},{"name":"reason","description":"Reason for editing this channel","optional":true,"type":[[["string"]]]}],"async":true,"returns":[[["Promise","<"],["GuildChannel",">"]]],"meta":{"line":313,"file":"GuildChannel.js","path":"src/structures"}},{"name":"setName","description":"Sets a new name for the guild channel.","inherits":"GuildChannel#setName","inherited":true,"examples":["// Set a new channel name\nchannel.setName('not_general')\n  .then(newChannel => console.log(`Channel's new name is ${newChannel.name}`))\n  .catch(console.error);"],"params":[{"name":"name","description":"The new name for the guild channel","type":[[["string"]]]},{"name":"reason","description":"Reason for changing the guild channel's name","optional":true,"type":[[["string"]]]}],"returns":[[["Promise","<"],["GuildChannel",">"]]],"meta":{"line":359,"file":"GuildChannel.js","path":"src/structures"}},{"name":"setParent","description":"Sets the category parent of this channel.","inherits":"GuildChannel#setParent","inherited":true,"examples":["// Add a parent to a channel\nmessage.channel.setParent('355908108431917066', { lockPermissions: false })\n  .then(channel => console.log(`New parent of ${message.channel.name}: ${channel.name}`))\n  .catch(console.error);"],"params":[{"name":"channel","description":"Parent channel","type":[[["CategoryChannel"]],[["Snowflake"]]]},{"name":"options","description":"Options to pass","optional":true,"default":"{}","type":[[["Object"]]]},{"name":"options.lockPermissions","description":"Lock the permissions to what the parent's permissions are","optional":true,"default":true,"type":[[["boolean"]]]},{"name":"options.reason","description":"Reason for modifying the parent of this channel","optional":true,"type":[[["string"]]]}],"returns":[[["Promise","<"],["GuildChannel",">"]]],"meta":{"line":376,"file":"GuildChannel.js","path":"src/structures"}},{"name":"setTopic","description":"Sets a new topic for the guild channel.","inherits":"GuildChannel#setTopic","inherited":true,"examples":["// Set a new channel topic\nchannel.setTopic('needs more rate limiting')\n  .then(newChannel => console.log(`Channel's new topic is ${newChannel.topic}`))\n  .catch(console.error);"],"params":[{"name":"topic","description":"The new topic for the guild channel","type":[[["string"]]]},{"name":"reason","description":"Reason for changing the guild channel's topic","optional":true,"type":[[["string"]]]}],"returns":[[["Promise","<"],["GuildChannel",">"]]],"meta":{"line":394,"file":"GuildChannel.js","path":"src/structures"}},{"name":"setPosition","description":"Sets a new position for the guild channel.","inherits":"GuildChannel#setPosition","inherited":true,"examples":["// Set a new channel position\nchannel.setPosition(2)\n  .then(newChannel => console.log(`Channel's new position is ${newChannel.position}`))\n  .catch(console.error);"],"params":[{"name":"position","description":"The new position for the guild channel","type":[[["number"]]]},{"name":"options","description":"Options for setting position","optional":true,"type":[[["Object"]]]},{"name":"options.relative","description":"Change the position relative to its current value","optional":true,"default":false,"type":[[["boolean"]]]},{"name":"options.reason","description":"Reason for changing the position","optional":true,"type":[[["string"]]]}],"returns":[[["Promise","<"],["GuildChannel",">"]]],"meta":{"line":411,"file":"GuildChannel.js","path":"src/structures"}},{"name":"createInvite","description":"Creates an invite to this guild channel.","inherits":"GuildChannel#createInvite","inherited":true,"examples":["// Create an invite to a channel\nchannel.createInvite()\n  .then(invite => console.log(`Created an invite with a code of ${invite.code}`))\n  .catch(console.error);"],"params":[{"name":"options","description":"Options for the invite","optional":true,"default":"{}","type":[[["Object"]]]},{"name":"options.temporary","description":"Whether members that joined via the invite should be automatically\nkicked after 24 hours if they have not yet received a role","optional":true,"default":false,"type":[[["boolean"]]]},{"name":"options.maxAge","description":"How long the invite should last (in seconds, 0 for forever)","optional":true,"default":86400,"type":[[["number"]]]},{"name":"options.maxUses","description":"Maximum number of uses","optional":true,"default":0,"type":[[["number"]]]},{"name":"options.unique","description":"Create a unique invite, or use an existing one with similar settings","optional":true,"default":false,"type":[[["boolean"]]]},{"name":"options.reason","description":"Reason for creating this","optional":true,"type":[[["string"]]]}],"returns":[[["Promise","<"],["Invite",">"]]],"meta":{"line":439,"file":"GuildChannel.js","path":"src/structures"}},{"name":"fetchInvites","description":"Fetches a collection of invites to this guild channel.\nResolves with a collection mapping invites by their codes.","inherits":"GuildChannel#fetchInvites","inherited":true,"async":true,"returns":[[["Promise","<"],["Collection","<"],["string",", "],["Invite",">>"]]],"meta":{"line":451,"file":"GuildChannel.js","path":"src/structures"}},{"name":"clone","description":"Clones this channel.","inherits":"GuildChannel#clone","inherited":true,"params":[{"name":"options","description":"The options","optional":true,"type":[[["Object"]]]},{"name":"options.name","description":"Name of the new channel","optional":true,"default":"this.name","type":[[["string"]]]},{"name":"options.permissionOverwrites","description":"Permission overwrites of the new channel","optional":true,"default":"this.permissionOverwrites","type":[[["Array","<"],["OverwriteResolvable",">"]],[["Collection","<"],["Snowflake",", "],["OverwriteResolvable",">"]]]},{"name":"options.type","description":"Type of the new channel","optional":true,"default":"this.type","type":[[["string"]]]},{"name":"options.topic","description":"Topic of the new channel (only text)","optional":true,"default":"this.topic","type":[[["string"]]]},{"name":"options.nsfw","description":"Whether the new channel is nsfw (only text)","optional":true,"default":"this.nsfw","type":[[["boolean"]]]},{"name":"options.bitrate","description":"Bitrate of the new channel in bits (only voice)","optional":true,"default":"this.bitrate","type":[[["number"]]]},{"name":"options.userLimit","description":"Maximum amount of users allowed in the new channel (only voice)","optional":true,"default":"this.userLimit","type":[[["number"]]]},{"name":"options.rateLimitPerUser","description":"Ratelimit per user for the new channel (only text)","optional":true,"default":"ThisType.rateLimitPerUser","type":[[["number"]]]},{"name":"options.parent","description":"Parent of the new channel","optional":true,"default":"this.parent","type":[[["ChannelResolvable"]]]},{"name":"options.reason","description":"Reason for cloning this channel","optional":true,"type":[[["string"]]]}],"returns":[[["Promise","<"],["GuildChannel",">"]]],"meta":{"line":478,"file":"GuildChannel.js","path":"src/structures"}},{"name":"equals","description":"Checks if this channel has the same type, topic, position, name, overwrites and ID as another channel.\nIn most cases, a simple `channel.id === channel2.id` will do, and is much faster too.","inherits":"GuildChannel#equals","inherited":true,"params":[{"name":"channel","description":"Channel to compare with","type":[[["GuildChannel"]]]}],"returns":[[["boolean"]]],"meta":{"line":501,"file":"GuildChannel.js","path":"src/structures"}},{"name":"delete","description":"Deletes this channel.","inherits":"GuildChannel#delete","inherited":true,"examples":["// Delete the channel\nchannel.delete('making room for new channels')\n  .then(console.log)\n  .catch(console.error);"],"params":[{"name":"reason","description":"Reason for deleting this channel","optional":true,"type":[[["string"]]]}],"returns":[[["Promise","<"],["GuildChannel",">"]]],"meta":{"line":562,"file":"GuildChannel.js","path":"src/structures"}},{"name":"toString","description":"When concatenated with a string, this automatically returns the channel's mention instead of the Channel object.","inherits":"Channel#toString","inherited":true,"examples":["// Logs: Hello from <#123456789012345678>!\nconsole.log(`Hello from ${channel}!`);"],"returns":[[["string"]]],"meta":{"line":71,"file":"Channel.js","path":"src/structures"}},{"name":"fetch","description":"Fetches this channel.","inherits":"Channel#fetch","inherited":true,"returns":[[["Promise","<"],["Channel",">"]]],"meta":{"line":92,"file":"Channel.js","path":"src/structures"}}],"meta":{"line":9,"file":"StoreChannel.js","path":"src/structures"}},{"name":"Team","description":"Represents a Client OAuth2 Application Team.","extends":[[["Base"]]],"props":[{"name":"id","description":"The ID of the Team","type":[[["Snowflake"]]],"meta":{"line":23,"file":"Team.js","path":"src/structures"}},{"name":"name","description":"The name of the Team","type":[[["string"]]],"meta":{"line":29,"file":"Team.js","path":"src/structures"}},{"name":"icon","description":"The Team's icon hash","nullable":true,"type":[[["string"]]],"meta":{"line":35,"file":"Team.js","path":"src/structures"}},{"name":"ownerID","description":"The Team's owner id","nullable":true,"type":[[["string"]]],"meta":{"line":41,"file":"Team.js","path":"src/structures"}},{"name":"members","description":"The Team's members","type":[[["Collection","<"],["Snowflake",", "],["TeamMember",">"]]],"meta":{"line":47,"file":"Team.js","path":"src/structures"}},{"name":"owner","description":"The owner of this team","readonly":true,"nullable":true,"type":[[["TeamMember"]]],"meta":{"line":60,"file":"Team.js","path":"src/structures"}},{"name":"createdTimestamp","description":"The timestamp the team was created at","readonly":true,"type":[[["number"]]],"meta":{"line":69,"file":"Team.js","path":"src/structures"}},{"name":"createdAt","description":"The time the team was created at","readonly":true,"type":[[["Date"]]],"meta":{"line":78,"file":"Team.js","path":"src/structures"}},{"name":"client","description":"The client that instantiated this","readonly":true,"type":[[["Client"]]],"meta":{"line":10,"file":"Base.js","path":"src/structures"}}],"methods":[{"name":"iconURL","description":"A link to the teams's icon.","params":[{"name":"options","description":"Options for the Image URL","optional":true,"default":"{}","type":[[["ImageURLOptions"]]]}],"returns":{"types":[[["string"]]],"description":"URL to the icon","nullable":true},"meta":{"line":87,"file":"Team.js","path":"src/structures"}},{"name":"toString","description":"When concatenated with a string, this automatically returns the Team's name instead of the\nTeam object.","examples":["// Logs: Team name: My Team\nconsole.log(`Team name: ${team}`);"],"returns":[[["string"]]],"meta":{"line":100,"file":"Team.js","path":"src/structures"}}],"meta":{"line":13,"file":"Team.js","path":"src/structures"}},{"name":"TeamMember","description":"Represents a Client OAuth2 Application Team Member.","extends":[[["Base"]]],"props":[{"name":"team","description":"The Team this member is part of","type":[[["Team"]]],"meta":{"line":18,"file":"TeamMember.js","path":"src/structures"}},{"name":"permissions","description":"The permissions this Team Member has with regard to the team","type":[[["Array","<"],["string",">"]]],"meta":{"line":28,"file":"TeamMember.js","path":"src/structures"}},{"name":"membershipState","description":"The permissions this Team Member has with regard to the team","type":[[["MembershipStates"]]],"meta":{"line":34,"file":"TeamMember.js","path":"src/structures"}},{"name":"user","description":"The user for this Team Member","type":[[["User"]]],"meta":{"line":40,"file":"TeamMember.js","path":"src/structures"}},{"name":"id","description":"The ID of the Team Member","readonly":true,"type":[[["Snowflake"]]],"meta":{"line":48,"file":"TeamMember.js","path":"src/structures"}},{"name":"client","description":"The client that instantiated this","readonly":true,"type":[[["Client"]]],"meta":{"line":10,"file":"Base.js","path":"src/structures"}}],"methods":[{"name":"toString","description":"When concatenated with a string, this automatically returns the team members's mention instead of the\nTeamMember object.","examples":["// Logs: Team Member's mention: <@123456789012345678>\nconsole.log(`Team Member's mention: ${teamMember}`);"],"returns":[[["string"]]],"meta":{"line":60,"file":"TeamMember.js","path":"src/structures"}}],"meta":{"line":11,"file":"TeamMember.js","path":"src/structures"}},{"name":"TextChannel","description":"Represents a guild text channel on Discord.","extends":[[["GuildChannel"]]],"implements":[[["TextBasedChannel"]]],"construct":{"name":"TextChannel","params":[{"name":"guild","description":"The guild the text channel is part of","type":[[["Guild"]]]},{"name":"data","description":"The data for the text channel","type":[[["Object"]]]}]},"props":[{"name":"messages","description":"A collection containing the messages sent to this channel","type":[[["MessageStore","<"],["Snowflake",", "],["Message",">"]]],"meta":{"line":26,"file":"TextChannel.js","path":"src/structures"}},{"name":"topic","description":"The topic of the text channel","nullable":true,"type":[[["string"]]],"meta":{"line":37,"file":"TextChannel.js","path":"src/structures"}},{"name":"nsfw","description":"If the guild considers this channel NSFW","readonly":true,"type":[[["boolean"]]],"meta":{"line":44,"file":"TextChannel.js","path":"src/structures"}},{"name":"lastMessageID","description":"The ID of the last message sent in this channel, if one was sent","nullable":true,"type":[[["Snowflake"]]],"meta":{"line":50,"file":"TextChannel.js","path":"src/structures"}},{"name":"rateLimitPerUser","description":"The ratelimit per user for this channel in seconds","type":[[["number"]]],"meta":{"line":56,"file":"TextChannel.js","path":"src/structures"}},{"name":"lastPinTimestamp","description":"The timestamp when the last pinned message was pinned, if there was one","nullable":true,"type":[[["number"]]],"meta":{"line":62,"file":"TextChannel.js","path":"src/structures"}},{"name":"lastMessage","description":"The Message object of the last message in the channel, if one was sent","readonly":true,"nullable":true,"type":[[["Message"]]],"meta":{"line":39,"file":"TextBasedChannel.js","path":"src/structures/interfaces"}},{"name":"lastPinAt","description":"The date when the last pinned message was pinned, if there was one","readonly":true,"nullable":true,"type":[[["Date"]]],"meta":{"line":48,"file":"TextBasedChannel.js","path":"src/structures/interfaces"}},{"name":"typing","description":"Whether or not the typing indicator is being shown in the channel","readonly":true,"type":[[["boolean"]]],"meta":{"line":223,"file":"TextBasedChannel.js","path":"src/structures/interfaces"}},{"name":"typingCount","description":"Number of times `startTyping` has been called","readonly":true,"type":[[["number"]]],"meta":{"line":232,"file":"TextBasedChannel.js","path":"src/structures/interfaces"}},{"name":"guild","description":"The guild the channel is in","type":[[["Guild"]]],"meta":{"line":33,"file":"GuildChannel.js","path":"src/structures"}},{"name":"name","description":"The name of the guild channel","type":[[["string"]]],"meta":{"line":43,"file":"GuildChannel.js","path":"src/structures"}},{"name":"rawPosition","description":"The raw position of the channel from discord","type":[[["number"]]],"meta":{"line":49,"file":"GuildChannel.js","path":"src/structures"}},{"name":"parentID","description":"The ID of the category parent of this channel","nullable":true,"type":[[["Snowflake"]]],"meta":{"line":55,"file":"GuildChannel.js","path":"src/structures"}},{"name":"permissionOverwrites","description":"A map of permission overwrites in this channel for roles and users","type":[[["Collection","<"],["Snowflake",", "],["PermissionOverwrites",">"]]],"meta":{"line":61,"file":"GuildChannel.js","path":"src/structures"}},{"name":"parent","description":"The category parent of this channel","readonly":true,"nullable":true,"type":[[["CategoryChannel"]]],"meta":{"line":74,"file":"GuildChannel.js","path":"src/structures"}},{"name":"permissionsLocked","description":"If the permissionOverwrites match the parent channel, null if no parent","readonly":true,"nullable":true,"type":[[["boolean"]]],"meta":{"line":83,"file":"GuildChannel.js","path":"src/structures"}},{"name":"position","description":"The position of the channel","readonly":true,"type":[[["number"]]],"meta":{"line":99,"file":"GuildChannel.js","path":"src/structures"}},{"name":"members","description":"A collection of members that can see this channel, mapped by their ID","readonly":true,"type":[[["Collection","<"],["Snowflake",", "],["GuildMember",">"]]],"meta":{"line":275,"file":"GuildChannel.js","path":"src/structures"}},{"name":"deletable","description":"Whether the channel is deletable by the client user","readonly":true,"type":[[["boolean"]]],"meta":{"line":525,"file":"GuildChannel.js","path":"src/structures"}},{"name":"manageable","description":"Whether the channel is manageable by the client user","readonly":true,"type":[[["boolean"]]],"meta":{"line":534,"file":"GuildChannel.js","path":"src/structures"}},{"name":"viewable","description":"Whether the channel is viewable by the client user","readonly":true,"type":[[["boolean"]]],"meta":{"line":545,"file":"GuildChannel.js","path":"src/structures"}},{"name":"type","description":"The type of the channel, either:\n* `dm` - a DM channel\n* `text` - a guild text channel\n* `voice` - a guild voice channel\n* `category` - a guild category channel\n* `news` - a guild news channel\n* `store` - a guild store channel\n* `unknown` - a generic channel of unknown type, could be Channel or GuildChannel","type":[[["string"]]],"meta":{"line":27,"file":"Channel.js","path":"src/structures"}},{"name":"deleted","description":"Whether the channel has been deleted","type":[[["boolean"]]],"meta":{"line":33,"file":"Channel.js","path":"src/structures"}},{"name":"id","description":"The unique ID of the channel","type":[[["Snowflake"]]],"meta":{"line":43,"file":"Channel.js","path":"src/structures"}},{"name":"createdTimestamp","description":"The timestamp the channel was created at","readonly":true,"type":[[["number"]]],"meta":{"line":51,"file":"Channel.js","path":"src/structures"}},{"name":"createdAt","description":"The time the channel was created at","readonly":true,"type":[[["Date"]]],"meta":{"line":60,"file":"Channel.js","path":"src/structures"}},{"name":"client","description":"The client that instantiated this","readonly":true,"type":[[["Client"]]],"meta":{"line":10,"file":"Base.js","path":"src/structures"}}],"methods":[{"name":"setRateLimitPerUser","description":"Sets the rate limit per user for this channel.","params":[{"name":"rateLimitPerUser","description":"The new ratelimit in seconds","type":[[["number"]]]},{"name":"reason","description":"Reason for changing the channel's ratelimits","optional":true,"type":[[["string"]]]}],"returns":[[["Promise","<"],["TextChannel",">"]]],"meta":{"line":73,"file":"TextChannel.js","path":"src/structures"}},{"name":"setNSFW","description":"Sets whether this channel is flagged as NSFW.","params":[{"name":"nsfw","description":"Whether the channel should be considered NSFW","type":[[["boolean"]]]},{"name":"reason","description":"Reason for changing the channel's NSFW flag","optional":true,"type":[[["string"]]]}],"returns":[[["Promise","<"],["TextChannel",">"]]],"meta":{"line":83,"file":"TextChannel.js","path":"src/structures"}},{"name":"fetchWebhooks","description":"Fetches all webhooks for the channel.","examples":["// Fetch webhooks\nchannel.fetchWebhooks()\n  .then(hooks => console.log(`This channel has ${hooks.size} hooks`))\n  .catch(console.error);"],"returns":[[["Promise","<"],["Collection","<"],["Snowflake",", "],["Webhook",">>"]]],"meta":{"line":96,"file":"TextChannel.js","path":"src/structures"}},{"name":"createWebhook","description":"Creates a webhook for the channel.","examples":["// Create a webhook for the current channel\nchannel.createWebhook('Snek', {\n  avatar: 'https://i.imgur.com/mI8XcpG.jpg',\n  reason: 'Needed a cool new Webhook'\n})\n  .then(console.log)\n  .catch(console.error)"],"params":[{"name":"name","description":"The name of the webhook","type":[[["string"]]]},{"name":"options","description":"Options for creating the webhook","optional":true,"type":[[["Object"]]]},{"name":"options.avatar","description":"Avatar for the webhook","optional":true,"type":[[["BufferResolvable"]],[["Base64Resolvable"]]]},{"name":"options.reason","description":"Reason for creating the webhook","optional":true,"type":[[["string"]]]}],"async":true,"returns":{"types":[[["Promise","<"],["Webhook",">"]]],"description":"webhook The created webhook"},"meta":{"line":120,"file":"TextChannel.js","path":"src/structures"}},{"name":"send","description":"Sends a message to this channel.","implements":["TextBasedChannel#send"],"examples":["// Send a basic message\nchannel.send('hello!')\n  .then(message => console.log(`Sent message: ${message.content}`))\n  .catch(console.error);","// Send a remote file\nchannel.send({\n  files: ['https://cdn.discordapp.com/icons/222078108977594368/6e1019b3179d71046e463a75915e7244.png?size=2048']\n})\n  .then(console.log)\n  .catch(console.error);","// Send a local file\nchannel.send({\n  files: [{\n    attachment: 'entire/path/to/file.jpg',\n    name: 'file.jpg'\n  }]\n})\n  .then(console.log)\n  .catch(console.error);","// Send an embed with a local image inside\nchannel.send('This is an embed', {\n  embed: {\n    thumbnail: {\n         url: 'attachment://file.jpg'\n      }\n   },\n   files: [{\n      attachment: 'entire/path/to/file.jpg',\n      name: 'file.jpg'\n   }]\n})\n  .then(console.log)\n  .catch(console.error);"],"params":[{"name":"content","description":"The content to send","optional":true,"default":"''","type":[[["StringResolvable"]],[["APIMessage"]]]},{"name":"options","description":"The options to provide","optional":true,"default":"{}","type":[[["MessageOptions"]],[["MessageAdditions"]]]}],"async":true,"returns":[[["Promise","<("],["Message","|"],["Array","<"],["Message",">)>"]]],"meta":{"line":127,"file":"TextBasedChannel.js","path":"src/structures/interfaces"}},{"name":"startTyping","description":"Starts a typing indicator in the channel.","implements":["TextBasedChannel#startTyping"],"examples":["// Start typing in a channel, or increase the typing count by one\nchannel.startTyping();","// Start typing in a channel with a typing count of five, or set it to five\nchannel.startTyping(5);"],"params":[{"name":"count","description":"The number of times startTyping should be considered to have been called","optional":true,"default":1,"type":[[["number"]]]}],"returns":{"types":[[["Promise"]]],"description":"Resolves once the bot stops typing gracefully, or rejects when an error occurs"},"meta":{"line":162,"file":"TextBasedChannel.js","path":"src/structures/interfaces"}},{"name":"stopTyping","description":"Stops the typing indicator in the channel.\nThe indicator will only stop if this is called as many times as startTyping().\n<info>It can take a few seconds for the client user to stop typing.</info>","implements":["TextBasedChannel#stopTyping"],"examples":["// Reduce the typing count by one and stop typing if it reached 0\nchannel.stopTyping();","// Force typing to fully stop regardless of typing count\nchannel.stopTyping(true);"],"params":[{"name":"force","description":"Whether or not to reset the call count and force the indicator to stop","optional":true,"default":false,"type":[[["boolean"]]]}],"meta":{"line":206,"file":"TextBasedChannel.js","path":"src/structures/interfaces"}},{"name":"createMessageCollector","description":"Creates a Message Collector.","implements":["TextBasedChannel#createMessageCollector"],"examples":["// Create a message collector\nconst filter = m => m.content.includes('discord');\nconst collector = channel.createMessageCollector(filter, { time: 15000 });\ncollector.on('collect', m => console.log(`Collected ${m.content}`));\ncollector.on('end', collected => console.log(`Collected ${collected.size} items`));"],"params":[{"name":"filter","description":"The filter to create the collector with","type":[[["CollectorFilter"]]]},{"name":"options","description":"The options to pass to the collector","optional":true,"default":"{}","type":[[["MessageCollectorOptions"]]]}],"returns":[[["MessageCollector"]]],"meta":{"line":249,"file":"TextBasedChannel.js","path":"src/structures/interfaces"}},{"name":"awaitMessages","description":"Similar to createMessageCollector but in promise form.\nResolves with a collection of messages that pass the specified filter.","implements":["TextBasedChannel#awaitMessages"],"examples":["// Await !vote messages\nconst filter = m => m.content.startsWith('!vote');\n// Errors: ['time'] treats ending because of the time limit as an error\nchannel.awaitMessages(filter, { max: 4, time: 60000, errors: ['time'] })\n  .then(collected => console.log(collected.size))\n  .catch(collected => console.log(`After a minute, only ${collected.size} out of 4 voted.`));"],"params":[{"name":"filter","description":"The filter function to use","type":[[["CollectorFilter"]]]},{"name":"options","description":"Optional options to pass to the internal collector","optional":true,"default":"{}","type":[[["AwaitMessagesOptions"]]]}],"returns":[[["Promise","<"],["Collection","<"],["Snowflake",", "],["Message",">>"]]],"meta":{"line":273,"file":"TextBasedChannel.js","path":"src/structures/interfaces"}},{"name":"bulkDelete","description":"Bulk deletes given messages that are newer than two weeks.","implements":["TextBasedChannel#bulkDelete"],"examples":["// Bulk delete messages\nchannel.bulkDelete(5)\n  .then(messages => console.log(`Bulk deleted ${messages.size} messages`))\n  .catch(console.error);"],"params":[{"name":"messages","description":"Messages or number of messages to delete","type":[[["Collection","<"],["Snowflake",", "],["Message",">"]],[["Array","<"],["Message",">"]],[["Array","<"],["Snowflake",">"]],[["number"]]]},{"name":"filterOld","description":"Filter messages to remove those which are older than two weeks automatically","optional":true,"default":false,"type":[[["boolean"]]]}],"async":true,"returns":{"types":[[["Promise","<"],["Collection","<"],["Snowflake",", "],["Message",">>"]]],"description":"Deleted messages"},"meta":{"line":298,"file":"TextBasedChannel.js","path":"src/structures/interfaces"}},{"name":"permissionsFor","description":"Gets the overall set of permissions for a member or role in this channel, taking into account channel overwrites.","inherits":"GuildChannel#permissionsFor","inherited":true,"params":[{"name":"memberOrRole","description":"The member or role to obtain the overall permissions for","type":[[["GuildMemberResolvable"]],[["RoleResolvable"]]]}],"returns":{"types":[[["Readonly","<"],["Permissions",">"]]],"nullable":true},"meta":{"line":109,"file":"GuildChannel.js","path":"src/structures"}},{"name":"memberPermissions","description":"Gets the overall set of permissions for a member in this channel, taking into account channel overwrites.","access":"private","inherits":"GuildChannel#memberPermissions","inherited":true,"params":[{"name":"member","description":"The member to obtain the overall permissions for","type":[[["GuildMember"]]]}],"returns":[[["Readonly","<"],["Permissions",">"]]],"meta":{"line":149,"file":"GuildChannel.js","path":"src/structures"}},{"name":"rolePermissions","description":"Gets the overall set of permissions for a role in this channel, taking into account channel overwrites.","access":"private","inherits":"GuildChannel#rolePermissions","inherited":true,"params":[{"name":"role","description":"The role to obtain the overall permissions for","type":[[["Role"]]]}],"returns":[[["Readonly","<"],["Permissions",">"]]],"meta":{"line":175,"file":"GuildChannel.js","path":"src/structures"}},{"name":"overwritePermissions","description":"Replaces the permission overwrites in this channel.","inherits":"GuildChannel#overwritePermissions","inherited":true,"examples":["channel.overwritePermissions({\npermissionOverwrites: [\n  {\n     id: message.author.id,\n     deny: ['VIEW_CHANNEL'],\n  },\n],\n  reason: 'Needed to change permissions'\n});"],"params":[{"name":"options","description":"Options","optional":true,"type":[[["Object"]]]},{"name":"options.permissionOverwrites","description":"Permission overwrites the channel gets updated with","optional":true,"type":[[["Array","<"],["OverwriteResolvable",">"]],[["Collection","<"],["Snowflake",", "],["OverwriteResolvable",">"]]]},{"name":"options.reason","description":"Reason for updating the channel overwrites","optional":true,"type":[[["string"]]]}],"returns":[[["Promise","<"],["GuildChannel",">"]]],"meta":{"line":207,"file":"GuildChannel.js","path":"src/structures"}},{"name":"updateOverwrite","description":"Updates Overwrites for a user or role in this channel. (creates if non-existent)","inherits":"GuildChannel#updateOverwrite","inherited":true,"examples":["// Update or Create permission overwrites for a message author\nmessage.channel.updateOverwrite(message.author, {\n  SEND_MESSAGES: false\n})\n  .then(channel => console.log(channel.permissionOverwrites.get(message.author.id)))\n  .catch(console.error);"],"params":[{"name":"userOrRole","description":"The user or role to update","type":[[["RoleResolvable"]],[["UserResolvable"]]]},{"name":"options","description":"The options for the update","type":[[["PermissionOverwriteOption"]]]},{"name":"reason","description":"Reason for creating/editing this overwrite","optional":true,"type":[[["string"]]]}],"returns":[[["Promise","<"],["GuildChannel",">"]]],"meta":{"line":225,"file":"GuildChannel.js","path":"src/structures"}},{"name":"createOverwrite","description":"Overwrites the permissions for a user or role in this channel. (replaces if existent)","inherits":"GuildChannel#createOverwrite","inherited":true,"examples":["// Create or Replace permissions overwrites for a message author\nmessage.channel.createOverwrite(message.author, {\n  SEND_MESSAGES: false\n})\n  .then(channel => console.log(channel.permissionOverwrites.get(message.author.id)))\n  .catch(console.error);"],"params":[{"name":"userOrRole","description":"The user or role to update","type":[[["RoleResolvable"]],[["UserResolvable"]]]},{"name":"options","description":"The options for the update","type":[[["PermissionOverwriteOption"]]]},{"name":"reason","description":"Reason for creating/editing this overwrite","optional":true,"type":[[["string"]]]}],"returns":[[["Promise","<"],["GuildChannel",">"]]],"meta":{"line":248,"file":"GuildChannel.js","path":"src/structures"}},{"name":"lockPermissions","description":"Locks in the permission overwrites from the parent channel.","inherits":"GuildChannel#lockPermissions","inherited":true,"returns":[[["Promise","<"],["GuildChannel",">"]]],"meta":{"line":264,"file":"GuildChannel.js","path":"src/structures"}},{"name":"edit","description":"Edits the channel.","inherits":"GuildChannel#edit","inherited":true,"examples":["// Edit a channel\nchannel.edit({ name: 'new-channel' })\n  .then(console.log)\n  .catch(console.error);"],"params":[{"name":"data","description":"The new data for the channel","type":[[["ChannelData"]]]},{"name":"reason","description":"Reason for editing this channel","optional":true,"type":[[["string"]]]}],"async":true,"returns":[[["Promise","<"],["GuildChannel",">"]]],"meta":{"line":313,"file":"GuildChannel.js","path":"src/structures"}},{"name":"setName","description":"Sets a new name for the guild channel.","inherits":"GuildChannel#setName","inherited":true,"examples":["// Set a new channel name\nchannel.setName('not_general')\n  .then(newChannel => console.log(`Channel's new name is ${newChannel.name}`))\n  .catch(console.error);"],"params":[{"name":"name","description":"The new name for the guild channel","type":[[["string"]]]},{"name":"reason","description":"Reason for changing the guild channel's name","optional":true,"type":[[["string"]]]}],"returns":[[["Promise","<"],["GuildChannel",">"]]],"meta":{"line":359,"file":"GuildChannel.js","path":"src/structures"}},{"name":"setParent","description":"Sets the category parent of this channel.","inherits":"GuildChannel#setParent","inherited":true,"examples":["// Add a parent to a channel\nmessage.channel.setParent('355908108431917066', { lockPermissions: false })\n  .then(channel => console.log(`New parent of ${message.channel.name}: ${channel.name}`))\n  .catch(console.error);"],"params":[{"name":"channel","description":"Parent channel","type":[[["CategoryChannel"]],[["Snowflake"]]]},{"name":"options","description":"Options to pass","optional":true,"default":"{}","type":[[["Object"]]]},{"name":"options.lockPermissions","description":"Lock the permissions to what the parent's permissions are","optional":true,"default":true,"type":[[["boolean"]]]},{"name":"options.reason","description":"Reason for modifying the parent of this channel","optional":true,"type":[[["string"]]]}],"returns":[[["Promise","<"],["GuildChannel",">"]]],"meta":{"line":376,"file":"GuildChannel.js","path":"src/structures"}},{"name":"setTopic","description":"Sets a new topic for the guild channel.","inherits":"GuildChannel#setTopic","inherited":true,"examples":["// Set a new channel topic\nchannel.setTopic('needs more rate limiting')\n  .then(newChannel => console.log(`Channel's new topic is ${newChannel.topic}`))\n  .catch(console.error);"],"params":[{"name":"topic","description":"The new topic for the guild channel","type":[[["string"]]]},{"name":"reason","description":"Reason for changing the guild channel's topic","optional":true,"type":[[["string"]]]}],"returns":[[["Promise","<"],["GuildChannel",">"]]],"meta":{"line":394,"file":"GuildChannel.js","path":"src/structures"}},{"name":"setPosition","description":"Sets a new position for the guild channel.","inherits":"GuildChannel#setPosition","inherited":true,"examples":["// Set a new channel position\nchannel.setPosition(2)\n  .then(newChannel => console.log(`Channel's new position is ${newChannel.position}`))\n  .catch(console.error);"],"params":[{"name":"position","description":"The new position for the guild channel","type":[[["number"]]]},{"name":"options","description":"Options for setting position","optional":true,"type":[[["Object"]]]},{"name":"options.relative","description":"Change the position relative to its current value","optional":true,"default":false,"type":[[["boolean"]]]},{"name":"options.reason","description":"Reason for changing the position","optional":true,"type":[[["string"]]]}],"returns":[[["Promise","<"],["GuildChannel",">"]]],"meta":{"line":411,"file":"GuildChannel.js","path":"src/structures"}},{"name":"createInvite","description":"Creates an invite to this guild channel.","inherits":"GuildChannel#createInvite","inherited":true,"examples":["// Create an invite to a channel\nchannel.createInvite()\n  .then(invite => console.log(`Created an invite with a code of ${invite.code}`))\n  .catch(console.error);"],"params":[{"name":"options","description":"Options for the invite","optional":true,"default":"{}","type":[[["Object"]]]},{"name":"options.temporary","description":"Whether members that joined via the invite should be automatically\nkicked after 24 hours if they have not yet received a role","optional":true,"default":false,"type":[[["boolean"]]]},{"name":"options.maxAge","description":"How long the invite should last (in seconds, 0 for forever)","optional":true,"default":86400,"type":[[["number"]]]},{"name":"options.maxUses","description":"Maximum number of uses","optional":true,"default":0,"type":[[["number"]]]},{"name":"options.unique","description":"Create a unique invite, or use an existing one with similar settings","optional":true,"default":false,"type":[[["boolean"]]]},{"name":"options.reason","description":"Reason for creating this","optional":true,"type":[[["string"]]]}],"returns":[[["Promise","<"],["Invite",">"]]],"meta":{"line":439,"file":"GuildChannel.js","path":"src/structures"}},{"name":"fetchInvites","description":"Fetches a collection of invites to this guild channel.\nResolves with a collection mapping invites by their codes.","inherits":"GuildChannel#fetchInvites","inherited":true,"async":true,"returns":[[["Promise","<"],["Collection","<"],["string",", "],["Invite",">>"]]],"meta":{"line":451,"file":"GuildChannel.js","path":"src/structures"}},{"name":"clone","description":"Clones this channel.","inherits":"GuildChannel#clone","inherited":true,"params":[{"name":"options","description":"The options","optional":true,"type":[[["Object"]]]},{"name":"options.name","description":"Name of the new channel","optional":true,"default":"this.name","type":[[["string"]]]},{"name":"options.permissionOverwrites","description":"Permission overwrites of the new channel","optional":true,"default":"this.permissionOverwrites","type":[[["Array","<"],["OverwriteResolvable",">"]],[["Collection","<"],["Snowflake",", "],["OverwriteResolvable",">"]]]},{"name":"options.type","description":"Type of the new channel","optional":true,"default":"this.type","type":[[["string"]]]},{"name":"options.topic","description":"Topic of the new channel (only text)","optional":true,"default":"this.topic","type":[[["string"]]]},{"name":"options.nsfw","description":"Whether the new channel is nsfw (only text)","optional":true,"default":"this.nsfw","type":[[["boolean"]]]},{"name":"options.bitrate","description":"Bitrate of the new channel in bits (only voice)","optional":true,"default":"this.bitrate","type":[[["number"]]]},{"name":"options.userLimit","description":"Maximum amount of users allowed in the new channel (only voice)","optional":true,"default":"this.userLimit","type":[[["number"]]]},{"name":"options.rateLimitPerUser","description":"Ratelimit per user for the new channel (only text)","optional":true,"default":"ThisType.rateLimitPerUser","type":[[["number"]]]},{"name":"options.parent","description":"Parent of the new channel","optional":true,"default":"this.parent","type":[[["ChannelResolvable"]]]},{"name":"options.reason","description":"Reason for cloning this channel","optional":true,"type":[[["string"]]]}],"returns":[[["Promise","<"],["GuildChannel",">"]]],"meta":{"line":478,"file":"GuildChannel.js","path":"src/structures"}},{"name":"equals","description":"Checks if this channel has the same type, topic, position, name, overwrites and ID as another channel.\nIn most cases, a simple `channel.id === channel2.id` will do, and is much faster too.","inherits":"GuildChannel#equals","inherited":true,"params":[{"name":"channel","description":"Channel to compare with","type":[[["GuildChannel"]]]}],"returns":[[["boolean"]]],"meta":{"line":501,"file":"GuildChannel.js","path":"src/structures"}},{"name":"delete","description":"Deletes this channel.","inherits":"GuildChannel#delete","inherited":true,"examples":["// Delete the channel\nchannel.delete('making room for new channels')\n  .then(console.log)\n  .catch(console.error);"],"params":[{"name":"reason","description":"Reason for deleting this channel","optional":true,"type":[[["string"]]]}],"returns":[[["Promise","<"],["GuildChannel",">"]]],"meta":{"line":562,"file":"GuildChannel.js","path":"src/structures"}},{"name":"toString","description":"When concatenated with a string, this automatically returns the channel's mention instead of the Channel object.","inherits":"Channel#toString","inherited":true,"examples":["// Logs: Hello from <#123456789012345678>!\nconsole.log(`Hello from ${channel}!`);"],"returns":[[["string"]]],"meta":{"line":71,"file":"Channel.js","path":"src/structures"}},{"name":"fetch","description":"Fetches this channel.","inherits":"Channel#fetch","inherited":true,"returns":[[["Promise","<"],["Channel",">"]]],"meta":{"line":92,"file":"Channel.js","path":"src/structures"}}],"meta":{"line":20,"file":"TextChannel.js","path":"src/structures"}},{"name":"User","description":"Represents a user on Discord.","extends":[[["Base"]]],"implements":[[["TextBasedChannel"]]],"construct":{"name":"User","params":[{"name":"client","description":"The instantiating client","type":[[["Client"]]]},{"name":"data","description":"The data for the user","type":[[["Object"]]]}]},"props":[{"name":"id","description":"The ID of the user","type":[[["Snowflake"]]],"meta":{"line":26,"file":"User.js","path":"src/structures"}},{"name":"bot","description":"Whether or not the user is a bot","type":[[["boolean"]]],"meta":{"line":28,"file":"User.js","path":"src/structures"}},{"name":"username","description":"The username of the user","type":[[["string"]]],"meta":{"line":39,"file":"User.js","path":"src/structures"}},{"name":"discriminator","description":"A discriminator based on username for the user","type":[[["string"]]],"meta":{"line":46,"file":"User.js","path":"src/structures"}},{"name":"avatar","description":"The ID of the user's avatar","nullable":true,"type":[[["string"]]],"meta":{"line":53,"file":"User.js","path":"src/structures"}},{"name":"system","description":"Whether the user is an Official Discord System user (part of the urgent message system)","nullable":true,"type":[[["boolean"]]],"meta":{"line":62,"file":"User.js","path":"src/structures"}},{"name":"locale","description":"The locale of the user's client (ISO 639-1)","nullable":true,"type":[[["string"]]],"meta":{"line":69,"file":"User.js","path":"src/structures"}},{"name":"lastMessageID","description":"The ID of the last message sent by the user, if one was sent","nullable":true,"type":[[["Snowflake"]]],"meta":{"line":80,"file":"User.js","path":"src/structures"}},{"name":"lastMessageChannelID","description":"The ID of the channel for the last message sent by the user, if one was sent","nullable":true,"type":[[["Snowflake"]]],"meta":{"line":86,"file":"User.js","path":"src/structures"}},{"name":"partial","description":"Whether this User is a partial","readonly":true,"type":[[["boolean"]]],"meta":{"line":94,"file":"User.js","path":"src/structures"}},{"name":"createdTimestamp","description":"The timestamp the user was created at","readonly":true,"type":[[["number"]]],"meta":{"line":103,"file":"User.js","path":"src/structures"}},{"name":"createdAt","description":"The time the user was created at","readonly":true,"type":[[["Date"]]],"meta":{"line":112,"file":"User.js","path":"src/structures"}},{"name":"lastMessage","description":"The Message object of the last message sent by the user, if one was sent","readonly":true,"nullable":true,"type":[[["Message"]]],"meta":{"line":121,"file":"User.js","path":"src/structures"}},{"name":"presence","description":"The presence of this user","readonly":true,"type":[[["Presence"]]],"meta":{"line":131,"file":"User.js","path":"src/structures"}},{"name":"defaultAvatarURL","description":"A link to the user's default avatar","readonly":true,"type":[[["string"]]],"meta":{"line":153,"file":"User.js","path":"src/structures"}},{"name":"tag","description":"The Discord \"tag\" (e.g. `hydrabolt#0001`) for this user","readonly":true,"type":[[["string"]]],"meta":{"line":172,"file":"User.js","path":"src/structures"}},{"name":"dmChannel","description":"The DM between the client's user and this user","readonly":true,"nullable":true,"type":[[["DMChannel"]]],"meta":{"line":211,"file":"User.js","path":"src/structures"}},{"name":"client","description":"The client that instantiated this","readonly":true,"type":[[["Client"]]],"meta":{"line":10,"file":"Base.js","path":"src/structures"}}],"methods":[{"name":"avatarURL","description":"A link to the user's avatar.","params":[{"name":"options","description":"Options for the Image URL","optional":true,"default":"{}","type":[[["ImageURLOptions"]]]}],"returns":{"types":[[["string"]]],"nullable":true},"meta":{"line":143,"file":"User.js","path":"src/structures"}},{"name":"displayAvatarURL","description":"A link to the user's avatar if they have one.\nOtherwise a link to their default avatar will be returned.","params":[{"name":"options","description":"Options for the Image URL","optional":true,"default":"{}","type":[[["ImageURLOptions"]]]}],"returns":[[["string"]]],"meta":{"line":163,"file":"User.js","path":"src/structures"}},{"name":"typingIn","description":"Checks whether the user is typing in a channel.","params":[{"name":"channel","description":"The channel to check in","type":[[["ChannelResolvable"]]]}],"returns":[[["boolean"]]],"meta":{"line":181,"file":"User.js","path":"src/structures"}},{"name":"typingSinceIn","description":"Gets the time that the user started typing.","params":[{"name":"channel","description":"The channel to get the time in","type":[[["ChannelResolvable"]]]}],"returns":{"types":[[["Date"]]],"nullable":true},"meta":{"line":191,"file":"User.js","path":"src/structures"}},{"name":"typingDurationIn","description":"Gets the amount of time the user has been typing in a channel for (in milliseconds), or -1 if they're not typing.","params":[{"name":"channel","description":"The channel to get the time in","type":[[["ChannelResolvable"]]]}],"returns":[[["number"]]],"meta":{"line":201,"file":"User.js","path":"src/structures"}},{"name":"createDM","description":"Creates a DM channel between the client and the user.","async":true,"returns":[[["Promise","<"],["DMChannel",">"]]],"meta":{"line":219,"file":"User.js","path":"src/structures"}},{"name":"deleteDM","description":"Deletes a DM channel (if one exists) between the client and the user. Resolves with the channel if successful.","async":true,"returns":[[["Promise","<"],["DMChannel",">"]]],"meta":{"line":232,"file":"User.js","path":"src/structures"}},{"name":"equals","description":"Checks if the user is equal to another. It compares ID, username, discriminator, avatar, and bot flags.\nIt is recommended to compare equality by using `user.id === user2.id` unless you want to compare all properties.","params":[{"name":"user","description":"User to compare with","type":[[["User"]]]}],"returns":[[["boolean"]]],"meta":{"line":245,"file":"User.js","path":"src/structures"}},{"name":"fetch","description":"Fetches this user.","returns":[[["Promise","<"],["User",">"]]],"meta":{"line":259,"file":"User.js","path":"src/structures"}},{"name":"toString","description":"When concatenated with a string, this automatically returns the user's mention instead of the User object.","examples":["// Logs: Hello from <@123456789012345678>!\nconsole.log(`Hello from ${user}!`);"],"returns":[[["string"]]],"meta":{"line":270,"file":"User.js","path":"src/structures"}},{"name":"send","description":"Sends a message to this channel.","implements":["TextBasedChannel#send"],"examples":["// Send a basic message\nchannel.send('hello!')\n  .then(message => console.log(`Sent message: ${message.content}`))\n  .catch(console.error);","// Send a remote file\nchannel.send({\n  files: ['https://cdn.discordapp.com/icons/222078108977594368/6e1019b3179d71046e463a75915e7244.png?size=2048']\n})\n  .then(console.log)\n  .catch(console.error);","// Send a local file\nchannel.send({\n  files: [{\n    attachment: 'entire/path/to/file.jpg',\n    name: 'file.jpg'\n  }]\n})\n  .then(console.log)\n  .catch(console.error);","// Send an embed with a local image inside\nchannel.send('This is an embed', {\n  embed: {\n    thumbnail: {\n         url: 'attachment://file.jpg'\n      }\n   },\n   files: [{\n      attachment: 'entire/path/to/file.jpg',\n      name: 'file.jpg'\n   }]\n})\n  .then(console.log)\n  .catch(console.error);"],"params":[{"name":"content","description":"The content to send","optional":true,"default":"''","type":[[["StringResolvable"]],[["APIMessage"]]]},{"name":"options","description":"The options to provide","optional":true,"default":"{}","type":[[["MessageOptions"]],[["MessageAdditions"]]]}],"async":true,"returns":[[["Promise","<("],["Message","|"],["Array","<"],["Message",">)>"]]],"meta":{"line":127,"file":"TextBasedChannel.js","path":"src/structures/interfaces"}}],"meta":{"line":19,"file":"User.js","path":"src/structures"}},{"name":"VoiceChannel","description":"Represents a guild voice channel on Discord.","extends":[[["GuildChannel"]]],"props":[{"name":"bitrate","description":"The bitrate of this voice channel","type":[[["number"]]],"meta":{"line":20,"file":"VoiceChannel.js","path":"src/structures"}},{"name":"userLimit","description":"The maximum amount of users allowed in this channel - 0 means unlimited.","type":[[["number"]]],"meta":{"line":26,"file":"VoiceChannel.js","path":"src/structures"}},{"name":"members","description":"The members in this voice channel","readonly":true,"type":[[["Collection","<"],["Snowflake",", "],["GuildMember",">"]]],"meta":{"line":29,"file":"VoiceChannel.js","path":"src/structures"}},{"name":"full","description":"Checks if the voice channel is full","readonly":true,"type":[[["boolean"]]],"meta":{"line":50,"file":"VoiceChannel.js","path":"src/structures"}},{"name":"deletable","description":"Whether the channel is deletable by the client user","readonly":true,"type":[[["boolean"]]],"meta":{"line":59,"file":"VoiceChannel.js","path":"src/structures"}},{"name":"editable","description":"Whether the channel is editable by the client user","readonly":true,"type":[[["boolean"]]],"meta":{"line":68,"file":"VoiceChannel.js","path":"src/structures"}},{"name":"joinable","description":"Whether the channel is joinable by the client user","readonly":true,"type":[[["boolean"]]],"meta":{"line":77,"file":"VoiceChannel.js","path":"src/structures"}},{"name":"speakable","description":"Checks if the client has permission to send audio to the voice channel","readonly":true,"type":[[["boolean"]]],"meta":{"line":90,"file":"VoiceChannel.js","path":"src/structures"}},{"name":"guild","description":"The guild the channel is in","type":[[["Guild"]]],"meta":{"line":33,"file":"GuildChannel.js","path":"src/structures"}},{"name":"name","description":"The name of the guild channel","type":[[["string"]]],"meta":{"line":43,"file":"GuildChannel.js","path":"src/structures"}},{"name":"rawPosition","description":"The raw position of the channel from discord","type":[[["number"]]],"meta":{"line":49,"file":"GuildChannel.js","path":"src/structures"}},{"name":"parentID","description":"The ID of the category parent of this channel","nullable":true,"type":[[["Snowflake"]]],"meta":{"line":55,"file":"GuildChannel.js","path":"src/structures"}},{"name":"permissionOverwrites","description":"A map of permission overwrites in this channel for roles and users","type":[[["Collection","<"],["Snowflake",", "],["PermissionOverwrites",">"]]],"meta":{"line":61,"file":"GuildChannel.js","path":"src/structures"}},{"name":"parent","description":"The category parent of this channel","readonly":true,"nullable":true,"type":[[["CategoryChannel"]]],"meta":{"line":74,"file":"GuildChannel.js","path":"src/structures"}},{"name":"permissionsLocked","description":"If the permissionOverwrites match the parent channel, null if no parent","readonly":true,"nullable":true,"type":[[["boolean"]]],"meta":{"line":83,"file":"GuildChannel.js","path":"src/structures"}},{"name":"position","description":"The position of the channel","readonly":true,"type":[[["number"]]],"meta":{"line":99,"file":"GuildChannel.js","path":"src/structures"}},{"name":"manageable","description":"Whether the channel is manageable by the client user","readonly":true,"type":[[["boolean"]]],"meta":{"line":534,"file":"GuildChannel.js","path":"src/structures"}},{"name":"viewable","description":"Whether the channel is viewable by the client user","readonly":true,"type":[[["boolean"]]],"meta":{"line":545,"file":"GuildChannel.js","path":"src/structures"}},{"name":"type","description":"The type of the channel, either:\n* `dm` - a DM channel\n* `text` - a guild text channel\n* `voice` - a guild voice channel\n* `category` - a guild category channel\n* `news` - a guild news channel\n* `store` - a guild store channel\n* `unknown` - a generic channel of unknown type, could be Channel or GuildChannel","type":[[["string"]]],"meta":{"line":27,"file":"Channel.js","path":"src/structures"}},{"name":"deleted","description":"Whether the channel has been deleted","type":[[["boolean"]]],"meta":{"line":33,"file":"Channel.js","path":"src/structures"}},{"name":"id","description":"The unique ID of the channel","type":[[["Snowflake"]]],"meta":{"line":43,"file":"Channel.js","path":"src/structures"}},{"name":"createdTimestamp","description":"The timestamp the channel was created at","readonly":true,"type":[[["number"]]],"meta":{"line":51,"file":"Channel.js","path":"src/structures"}},{"name":"createdAt","description":"The time the channel was created at","readonly":true,"type":[[["Date"]]],"meta":{"line":60,"file":"Channel.js","path":"src/structures"}},{"name":"client","description":"The client that instantiated this","readonly":true,"type":[[["Client"]]],"meta":{"line":10,"file":"Base.js","path":"src/structures"}}],"methods":[{"name":"setBitrate","description":"Sets the bitrate of the channel.","examples":["// Set the bitrate of a voice channel\nvoiceChannel.setBitrate(48000)\n  .then(vc => console.log(`Set bitrate to ${vc.bitrate}bps for ${vc.name}`))\n  .catch(console.error);"],"params":[{"name":"bitrate","description":"The new bitrate","type":[[["number"]]]},{"name":"reason","description":"Reason for changing the channel's bitrate","optional":true,"type":[[["string"]]]}],"returns":[[["Promise","<"],["VoiceChannel",">"]]],"meta":{"line":105,"file":"VoiceChannel.js","path":"src/structures"}},{"name":"setUserLimit","description":"Sets the user limit of the channel.","examples":["// Set the user limit of a voice channel\nvoiceChannel.setUserLimit(42)\n  .then(vc => console.log(`Set user limit to ${vc.userLimit} for ${vc.name}`))\n  .catch(console.error);"],"params":[{"name":"userLimit","description":"The new user limit","type":[[["number"]]]},{"name":"reason","description":"Reason for changing the user limit","optional":true,"type":[[["string"]]]}],"returns":[[["Promise","<"],["VoiceChannel",">"]]],"meta":{"line":120,"file":"VoiceChannel.js","path":"src/structures"}},{"name":"join","description":"Attempts to join this voice channel.","examples":["// Join a voice channel\nvoiceChannel.join()\n  .then(connection => console.log('Connected!'))\n  .catch(console.error);"],"returns":[[["Promise","<"],["VoiceConnection",">"]]],"meta":{"line":133,"file":"VoiceChannel.js","path":"src/structures"}},{"name":"leave","description":"Leaves this voice channel.","examples":["// Leave a voice channel\nvoiceChannel.leave();"],"meta":{"line":144,"file":"VoiceChannel.js","path":"src/structures"}},{"name":"permissionsFor","description":"Gets the overall set of permissions for a member or role in this channel, taking into account channel overwrites.","inherits":"GuildChannel#permissionsFor","inherited":true,"params":[{"name":"memberOrRole","description":"The member or role to obtain the overall permissions for","type":[[["GuildMemberResolvable"]],[["RoleResolvable"]]]}],"returns":{"types":[[["Readonly","<"],["Permissions",">"]]],"nullable":true},"meta":{"line":109,"file":"GuildChannel.js","path":"src/structures"}},{"name":"memberPermissions","description":"Gets the overall set of permissions for a member in this channel, taking into account channel overwrites.","access":"private","inherits":"GuildChannel#memberPermissions","inherited":true,"params":[{"name":"member","description":"The member to obtain the overall permissions for","type":[[["GuildMember"]]]}],"returns":[[["Readonly","<"],["Permissions",">"]]],"meta":{"line":149,"file":"GuildChannel.js","path":"src/structures"}},{"name":"rolePermissions","description":"Gets the overall set of permissions for a role in this channel, taking into account channel overwrites.","access":"private","inherits":"GuildChannel#rolePermissions","inherited":true,"params":[{"name":"role","description":"The role to obtain the overall permissions for","type":[[["Role"]]]}],"returns":[[["Readonly","<"],["Permissions",">"]]],"meta":{"line":175,"file":"GuildChannel.js","path":"src/structures"}},{"name":"overwritePermissions","description":"Replaces the permission overwrites in this channel.","inherits":"GuildChannel#overwritePermissions","inherited":true,"examples":["channel.overwritePermissions({\npermissionOverwrites: [\n  {\n     id: message.author.id,\n     deny: ['VIEW_CHANNEL'],\n  },\n],\n  reason: 'Needed to change permissions'\n});"],"params":[{"name":"options","description":"Options","optional":true,"type":[[["Object"]]]},{"name":"options.permissionOverwrites","description":"Permission overwrites the channel gets updated with","optional":true,"type":[[["Array","<"],["OverwriteResolvable",">"]],[["Collection","<"],["Snowflake",", "],["OverwriteResolvable",">"]]]},{"name":"options.reason","description":"Reason for updating the channel overwrites","optional":true,"type":[[["string"]]]}],"returns":[[["Promise","<"],["GuildChannel",">"]]],"meta":{"line":207,"file":"GuildChannel.js","path":"src/structures"}},{"name":"updateOverwrite","description":"Updates Overwrites for a user or role in this channel. (creates if non-existent)","inherits":"GuildChannel#updateOverwrite","inherited":true,"examples":["// Update or Create permission overwrites for a message author\nmessage.channel.updateOverwrite(message.author, {\n  SEND_MESSAGES: false\n})\n  .then(channel => console.log(channel.permissionOverwrites.get(message.author.id)))\n  .catch(console.error);"],"params":[{"name":"userOrRole","description":"The user or role to update","type":[[["RoleResolvable"]],[["UserResolvable"]]]},{"name":"options","description":"The options for the update","type":[[["PermissionOverwriteOption"]]]},{"name":"reason","description":"Reason for creating/editing this overwrite","optional":true,"type":[[["string"]]]}],"returns":[[["Promise","<"],["GuildChannel",">"]]],"meta":{"line":225,"file":"GuildChannel.js","path":"src/structures"}},{"name":"createOverwrite","description":"Overwrites the permissions for a user or role in this channel. (replaces if existent)","inherits":"GuildChannel#createOverwrite","inherited":true,"examples":["// Create or Replace permissions overwrites for a message author\nmessage.channel.createOverwrite(message.author, {\n  SEND_MESSAGES: false\n})\n  .then(channel => console.log(channel.permissionOverwrites.get(message.author.id)))\n  .catch(console.error);"],"params":[{"name":"userOrRole","description":"The user or role to update","type":[[["RoleResolvable"]],[["UserResolvable"]]]},{"name":"options","description":"The options for the update","type":[[["PermissionOverwriteOption"]]]},{"name":"reason","description":"Reason for creating/editing this overwrite","optional":true,"type":[[["string"]]]}],"returns":[[["Promise","<"],["GuildChannel",">"]]],"meta":{"line":248,"file":"GuildChannel.js","path":"src/structures"}},{"name":"lockPermissions","description":"Locks in the permission overwrites from the parent channel.","inherits":"GuildChannel#lockPermissions","inherited":true,"returns":[[["Promise","<"],["GuildChannel",">"]]],"meta":{"line":264,"file":"GuildChannel.js","path":"src/structures"}},{"name":"edit","description":"Edits the channel.","inherits":"GuildChannel#edit","inherited":true,"examples":["// Edit a channel\nchannel.edit({ name: 'new-channel' })\n  .then(console.log)\n  .catch(console.error);"],"params":[{"name":"data","description":"The new data for the channel","type":[[["ChannelData"]]]},{"name":"reason","description":"Reason for editing this channel","optional":true,"type":[[["string"]]]}],"async":true,"returns":[[["Promise","<"],["GuildChannel",">"]]],"meta":{"line":313,"file":"GuildChannel.js","path":"src/structures"}},{"name":"setName","description":"Sets a new name for the guild channel.","inherits":"GuildChannel#setName","inherited":true,"examples":["// Set a new channel name\nchannel.setName('not_general')\n  .then(newChannel => console.log(`Channel's new name is ${newChannel.name}`))\n  .catch(console.error);"],"params":[{"name":"name","description":"The new name for the guild channel","type":[[["string"]]]},{"name":"reason","description":"Reason for changing the guild channel's name","optional":true,"type":[[["string"]]]}],"returns":[[["Promise","<"],["GuildChannel",">"]]],"meta":{"line":359,"file":"GuildChannel.js","path":"src/structures"}},{"name":"setParent","description":"Sets the category parent of this channel.","inherits":"GuildChannel#setParent","inherited":true,"examples":["// Add a parent to a channel\nmessage.channel.setParent('355908108431917066', { lockPermissions: false })\n  .then(channel => console.log(`New parent of ${message.channel.name}: ${channel.name}`))\n  .catch(console.error);"],"params":[{"name":"channel","description":"Parent channel","type":[[["CategoryChannel"]],[["Snowflake"]]]},{"name":"options","description":"Options to pass","optional":true,"default":"{}","type":[[["Object"]]]},{"name":"options.lockPermissions","description":"Lock the permissions to what the parent's permissions are","optional":true,"default":true,"type":[[["boolean"]]]},{"name":"options.reason","description":"Reason for modifying the parent of this channel","optional":true,"type":[[["string"]]]}],"returns":[[["Promise","<"],["GuildChannel",">"]]],"meta":{"line":376,"file":"GuildChannel.js","path":"src/structures"}},{"name":"setTopic","description":"Sets a new topic for the guild channel.","inherits":"GuildChannel#setTopic","inherited":true,"examples":["// Set a new channel topic\nchannel.setTopic('needs more rate limiting')\n  .then(newChannel => console.log(`Channel's new topic is ${newChannel.topic}`))\n  .catch(console.error);"],"params":[{"name":"topic","description":"The new topic for the guild channel","type":[[["string"]]]},{"name":"reason","description":"Reason for changing the guild channel's topic","optional":true,"type":[[["string"]]]}],"returns":[[["Promise","<"],["GuildChannel",">"]]],"meta":{"line":394,"file":"GuildChannel.js","path":"src/structures"}},{"name":"setPosition","description":"Sets a new position for the guild channel.","inherits":"GuildChannel#setPosition","inherited":true,"examples":["// Set a new channel position\nchannel.setPosition(2)\n  .then(newChannel => console.log(`Channel's new position is ${newChannel.position}`))\n  .catch(console.error);"],"params":[{"name":"position","description":"The new position for the guild channel","type":[[["number"]]]},{"name":"options","description":"Options for setting position","optional":true,"type":[[["Object"]]]},{"name":"options.relative","description":"Change the position relative to its current value","optional":true,"default":false,"type":[[["boolean"]]]},{"name":"options.reason","description":"Reason for changing the position","optional":true,"type":[[["string"]]]}],"returns":[[["Promise","<"],["GuildChannel",">"]]],"meta":{"line":411,"file":"GuildChannel.js","path":"src/structures"}},{"name":"createInvite","description":"Creates an invite to this guild channel.","inherits":"GuildChannel#createInvite","inherited":true,"examples":["// Create an invite to a channel\nchannel.createInvite()\n  .then(invite => console.log(`Created an invite with a code of ${invite.code}`))\n  .catch(console.error);"],"params":[{"name":"options","description":"Options for the invite","optional":true,"default":"{}","type":[[["Object"]]]},{"name":"options.temporary","description":"Whether members that joined via the invite should be automatically\nkicked after 24 hours if they have not yet received a role","optional":true,"default":false,"type":[[["boolean"]]]},{"name":"options.maxAge","description":"How long the invite should last (in seconds, 0 for forever)","optional":true,"default":86400,"type":[[["number"]]]},{"name":"options.maxUses","description":"Maximum number of uses","optional":true,"default":0,"type":[[["number"]]]},{"name":"options.unique","description":"Create a unique invite, or use an existing one with similar settings","optional":true,"default":false,"type":[[["boolean"]]]},{"name":"options.reason","description":"Reason for creating this","optional":true,"type":[[["string"]]]}],"returns":[[["Promise","<"],["Invite",">"]]],"meta":{"line":439,"file":"GuildChannel.js","path":"src/structures"}},{"name":"fetchInvites","description":"Fetches a collection of invites to this guild channel.\nResolves with a collection mapping invites by their codes.","inherits":"GuildChannel#fetchInvites","inherited":true,"async":true,"returns":[[["Promise","<"],["Collection","<"],["string",", "],["Invite",">>"]]],"meta":{"line":451,"file":"GuildChannel.js","path":"src/structures"}},{"name":"clone","description":"Clones this channel.","inherits":"GuildChannel#clone","inherited":true,"params":[{"name":"options","description":"The options","optional":true,"type":[[["Object"]]]},{"name":"options.name","description":"Name of the new channel","optional":true,"default":"this.name","type":[[["string"]]]},{"name":"options.permissionOverwrites","description":"Permission overwrites of the new channel","optional":true,"default":"this.permissionOverwrites","type":[[["Array","<"],["OverwriteResolvable",">"]],[["Collection","<"],["Snowflake",", "],["OverwriteResolvable",">"]]]},{"name":"options.type","description":"Type of the new channel","optional":true,"default":"this.type","type":[[["string"]]]},{"name":"options.topic","description":"Topic of the new channel (only text)","optional":true,"default":"this.topic","type":[[["string"]]]},{"name":"options.nsfw","description":"Whether the new channel is nsfw (only text)","optional":true,"default":"this.nsfw","type":[[["boolean"]]]},{"name":"options.bitrate","description":"Bitrate of the new channel in bits (only voice)","optional":true,"default":"this.bitrate","type":[[["number"]]]},{"name":"options.userLimit","description":"Maximum amount of users allowed in the new channel (only voice)","optional":true,"default":"this.userLimit","type":[[["number"]]]},{"name":"options.rateLimitPerUser","description":"Ratelimit per user for the new channel (only text)","optional":true,"default":"ThisType.rateLimitPerUser","type":[[["number"]]]},{"name":"options.parent","description":"Parent of the new channel","optional":true,"default":"this.parent","type":[[["ChannelResolvable"]]]},{"name":"options.reason","description":"Reason for cloning this channel","optional":true,"type":[[["string"]]]}],"returns":[[["Promise","<"],["GuildChannel",">"]]],"meta":{"line":478,"file":"GuildChannel.js","path":"src/structures"}},{"name":"equals","description":"Checks if this channel has the same type, topic, position, name, overwrites and ID as another channel.\nIn most cases, a simple `channel.id === channel2.id` will do, and is much faster too.","inherits":"GuildChannel#equals","inherited":true,"params":[{"name":"channel","description":"Channel to compare with","type":[[["GuildChannel"]]]}],"returns":[[["boolean"]]],"meta":{"line":501,"file":"GuildChannel.js","path":"src/structures"}},{"name":"delete","description":"Deletes this channel.","inherits":"GuildChannel#delete","inherited":true,"examples":["// Delete the channel\nchannel.delete('making room for new channels')\n  .then(console.log)\n  .catch(console.error);"],"params":[{"name":"reason","description":"Reason for deleting this channel","optional":true,"type":[[["string"]]]}],"returns":[[["Promise","<"],["GuildChannel",">"]]],"meta":{"line":562,"file":"GuildChannel.js","path":"src/structures"}},{"name":"toString","description":"When concatenated with a string, this automatically returns the channel's mention instead of the Channel object.","inherits":"Channel#toString","inherited":true,"examples":["// Logs: Hello from <#123456789012345678>!\nconsole.log(`Hello from ${channel}!`);"],"returns":[[["string"]]],"meta":{"line":71,"file":"Channel.js","path":"src/structures"}},{"name":"fetch","description":"Fetches this channel.","inherits":"Channel#fetch","inherited":true,"returns":[[["Promise","<"],["Channel",">"]]],"meta":{"line":92,"file":"Channel.js","path":"src/structures"}}],"meta":{"line":13,"file":"VoiceChannel.js","path":"src/structures"}},{"name":"VoiceRegion","description":"Represents a Discord voice region for guilds.","props":[{"name":"id","description":"The ID of the region","type":[[["string"]]],"meta":{"line":14,"file":"VoiceRegion.js","path":"src/structures"}},{"name":"name","description":"Name of the region","type":[[["string"]]],"meta":{"line":20,"file":"VoiceRegion.js","path":"src/structures"}},{"name":"vip","description":"Whether the region is VIP-only","type":[[["boolean"]]],"meta":{"line":26,"file":"VoiceRegion.js","path":"src/structures"}},{"name":"deprecated","description":"Whether the region is deprecated","type":[[["boolean"]]],"meta":{"line":32,"file":"VoiceRegion.js","path":"src/structures"}},{"name":"optimal","description":"Whether the region is optimal","type":[[["boolean"]]],"meta":{"line":38,"file":"VoiceRegion.js","path":"src/structures"}},{"name":"custom","description":"Whether the region is custom","type":[[["boolean"]]],"meta":{"line":44,"file":"VoiceRegion.js","path":"src/structures"}}],"meta":{"line":9,"file":"VoiceRegion.js","path":"src/structures"}},{"name":"VoiceState","description":"Represents the voice state for a Guild Member.","construct":{"name":"VoiceState","params":[{"name":"guild","description":"The guild the voice state is part of","type":[[["Guild"]]]},{"name":"data","description":"The data for the voice state","type":[[["Object"]]]}]},"props":[{"name":"guild","description":"The guild of this voice state","type":[[["Guild"]]],"meta":{"line":21,"file":"VoiceState.js","path":"src/structures"}},{"name":"id","description":"The ID of the member of this voice state","type":[[["Snowflake"]]],"meta":{"line":26,"file":"VoiceState.js","path":"src/structures"}},{"name":"serverDeaf","description":"Whether this member is deafened server-wide","nullable":true,"type":[[["boolean"]]],"meta":{"line":35,"file":"VoiceState.js","path":"src/structures"}},{"name":"serverMute","description":"Whether this member is muted server-wide","nullable":true,"type":[[["boolean"]]],"meta":{"line":40,"file":"VoiceState.js","path":"src/structures"}},{"name":"selfDeaf","description":"Whether this member is self-deafened","nullable":true,"type":[[["boolean"]]],"meta":{"line":45,"file":"VoiceState.js","path":"src/structures"}},{"name":"selfMute","description":"Whether this member is self-muted","nullable":true,"type":[[["boolean"]]],"meta":{"line":50,"file":"VoiceState.js","path":"src/structures"}},{"name":"sessionID","description":"The session ID of this member's connection","nullable":true,"type":[[["string"]]],"meta":{"line":55,"file":"VoiceState.js","path":"src/structures"}},{"name":"streaming","description":"Whether this member is streaming using \"Go Live\"","type":[[["boolean"]]],"meta":{"line":60,"file":"VoiceState.js","path":"src/structures"}},{"name":"channelID","description":"The ID of the voice channel that this member is in","nullable":true,"type":[[["Snowflake"]]],"meta":{"line":65,"file":"VoiceState.js","path":"src/structures"}},{"name":"member","description":"The member that this voice state belongs to","readonly":true,"nullable":true,"type":[[["GuildMember"]]],"meta":{"line":74,"file":"VoiceState.js","path":"src/structures"}},{"name":"channel","description":"The channel that the member is connected to","readonly":true,"nullable":true,"type":[[["VoiceChannel"]]],"meta":{"line":83,"file":"VoiceState.js","path":"src/structures"}},{"name":"connection","description":"If this is a voice state of the client user, then this will refer to the active VoiceConnection for this guild","readonly":true,"nullable":true,"type":[[["VoiceConnection"]]],"meta":{"line":92,"file":"VoiceState.js","path":"src/structures"}},{"name":"deaf","description":"Whether this member is either self-deafened or server-deafened","readonly":true,"nullable":true,"type":[[["boolean"]]],"meta":{"line":102,"file":"VoiceState.js","path":"src/structures"}},{"name":"mute","description":"Whether this member is either self-muted or server-muted","readonly":true,"nullable":true,"type":[[["boolean"]]],"meta":{"line":111,"file":"VoiceState.js","path":"src/structures"}},{"name":"speaking","description":"Whether this member is currently speaking. A boolean if the information is available (aka\nthe bot is connected to any voice channel in the guild), otherwise this is null","readonly":true,"nullable":true,"type":[[["boolean"]]],"meta":{"line":121,"file":"VoiceState.js","path":"src/structures"}}],"methods":[{"name":"setMute","description":"Mutes/unmutes the member of this voice state.","params":[{"name":"mute","description":"Whether or not the member should be muted","type":[[["boolean"]]]},{"name":"reason","description":"Reason for muting or unmuting","optional":true,"type":[[["string"]]]}],"returns":[[["Promise","<"],["GuildMember",">"]]],"meta":{"line":133,"file":"VoiceState.js","path":"src/structures"}},{"name":"setDeaf","description":"Deafens/undeafens the member of this voice state.","params":[{"name":"deaf","description":"Whether or not the member should be deafened","type":[[["boolean"]]]},{"name":"reason","description":"Reason for deafening or undeafening","optional":true,"type":[[["string"]]]}],"returns":[[["Promise","<"],["GuildMember",">"]]],"meta":{"line":143,"file":"VoiceState.js","path":"src/structures"}},{"name":"kick","description":"Kicks the member from the voice channel.","params":[{"name":"reason","description":"Reason for kicking member from the channel","optional":true,"type":[[["string"]]]}],"returns":[[["Promise","<"],["GuildMember",">"]]],"meta":{"line":152,"file":"VoiceState.js","path":"src/structures"}},{"name":"setChannel","description":"Moves the member to a different channel, or kick them from the one they're in.","params":[{"name":"channel","description":"Channel to move the member to, or `null` if you want to kick them from\nvoice","optional":true,"type":[[["ChannelResolvable"]],[["null"]]]},{"name":"reason","description":"Reason for moving member to another channel or kicking","optional":true,"type":[[["string"]]]}],"returns":[[["Promise","<"],["GuildMember",">"]]],"meta":{"line":163,"file":"VoiceState.js","path":"src/structures"}},{"name":"setSelfMute","description":"Self-mutes/unmutes the bot for this voice state.","params":[{"name":"mute","description":"Whether or not the bot should be self-muted","type":[[["boolean"]]]}],"async":true,"returns":{"types":[[["Promise","<"],["boolean",">"]]],"description":"true if the voice state was successfully updated, otherwise false"},"meta":{"line":174,"file":"VoiceState.js","path":"src/structures"}},{"name":"setSelfDeaf","description":"Self-deafens/undeafens the bot for this voice state.","params":[{"name":"deaf","description":"Whether or not the bot should be self-deafened","type":[[["boolean"]]]}],"async":true,"returns":{"types":[[["Promise","<"],["boolean",">"]]],"description":"true if the voice state was successfully updated, otherwise false"},"meta":{"line":188,"file":"VoiceState.js","path":"src/structures"}}],"meta":{"line":15,"file":"VoiceState.js","path":"src/structures"}},{"name":"Webhook","description":"Represents a webhook.","props":[{"name":"client","description":"The client that instantiated the webhook","readonly":true,"type":[[["Client"]]],"meta":{"line":14,"file":"Webhook.js","path":"src/structures"}},{"name":"name","description":"The name of the webhook","type":[[["string"]]],"meta":{"line":29,"file":"Webhook.js","path":"src/structures"}},{"name":"token","description":"The token for the webhook","nullable":true,"type":[[["string"]]],"meta":{"line":31,"file":"Webhook.js","path":"src/structures"}},{"name":"avatar","description":"The avatar for the webhook","nullable":true,"type":[[["string"]]],"meta":{"line":42,"file":"Webhook.js","path":"src/structures"}},{"name":"id","description":"The ID of the webhook","type":[[["Snowflake"]]],"meta":{"line":48,"file":"Webhook.js","path":"src/structures"}},{"name":"type","description":"The type of the webhook","type":[[["WebhookTypes"]]],"meta":{"line":54,"file":"Webhook.js","path":"src/structures"}},{"name":"guildID","description":"The guild the webhook belongs to","type":[[["Snowflake"]]],"meta":{"line":60,"file":"Webhook.js","path":"src/structures"}},{"name":"channelID","description":"The channel the webhook belongs to","type":[[["Snowflake"]]],"meta":{"line":66,"file":"Webhook.js","path":"src/structures"}},{"name":"owner","description":"The owner of the webhook","type":[[["User"]],[["Object"]]],"meta":{"line":73,"file":"Webhook.js","path":"src/structures"}},{"name":"createdTimestamp","description":"The timestamp the webhook was created at","readonly":true,"type":[[["number"]]],"meta":{"line":226,"file":"Webhook.js","path":"src/structures"}},{"name":"createdAt","description":"The time the webhook was created at","readonly":true,"type":[[["Date"]]],"meta":{"line":235,"file":"Webhook.js","path":"src/structures"}},{"name":"url","description":"The url of this webhook","readonly":true,"type":[[["string"]]],"meta":{"line":244,"file":"Webhook.js","path":"src/structures"}}],"methods":[{"name":"send","description":"Sends a message with this webhook.","examples":["// Send a basic message\nwebhook.send('hello!')\n  .then(message => console.log(`Sent message: ${message.content}`))\n  .catch(console.error);","// Send a remote file\nwebhook.send({\n  files: ['https://cdn.discordapp.com/icons/222078108977594368/6e1019b3179d71046e463a75915e7244.png?size=2048']\n})\n  .then(console.log)\n  .catch(console.error);","// Send a local file\nwebhook.send({\n  files: [{\n    attachment: 'entire/path/to/file.jpg',\n    name: 'file.jpg'\n  }]\n})\n  .then(console.log)\n  .catch(console.error);","// Send an embed with a local image inside\nwebhook.send('This is an embed', {\n  embeds: [{\n    thumbnail: {\n         url: 'attachment://file.jpg'\n      }\n   }],\n   files: [{\n      attachment: 'entire/path/to/file.jpg',\n      name: 'file.jpg'\n   }]\n})\n  .then(console.log)\n  .catch(console.error);"],"params":[{"name":"content","description":"The content to send","optional":true,"default":"''","type":[[["StringResolvable"]],[["APIMessage"]]]},{"name":"options","description":"The options to provide","optional":true,"default":"{}","type":[[["WebhookMessageOptions"]],[["MessageAdditions"]]]}],"async":true,"returns":[[["Promise","<("],["Message","|"],["Object",")>"]]],"meta":{"line":139,"file":"Webhook.js","path":"src/structures"}},{"name":"sendSlackMessage","description":"Sends a raw slack message with this webhook.","examples":["// Send a slack message\nwebhook.sendSlackMessage({\n  'username': 'Wumpus',\n  'attachments': [{\n    'pretext': 'this looks pretty cool',\n    'color': '#F0F',\n    'footer_icon': 'http://snek.s3.amazonaws.com/topSnek.png',\n    'footer': 'Powered by sneks',\n    'ts': Date.now() / 1000\n  }]\n}).catch(console.error);"],"params":[{"name":"body","description":"The raw body to send","type":[[["Object"]]]}],"returns":[[["Promise","<"],["boolean",">"]]],"meta":{"line":180,"file":"Webhook.js","path":"src/structures"}},{"name":"edit","description":"Edits the webhook.","params":[{"name":"options","description":"Options","type":[[["Object"]]]},{"name":"options.name","description":"New name for this webhook","optional":true,"default":"this.name","type":[[["string"]]]},{"name":"options.avatar","description":"New avatar for this webhook","optional":true,"type":[[["BufferResolvable"]]]},{"name":"options.channel","description":"New channel for this webhook","optional":true,"type":[[["ChannelResolvable"]]]},{"name":"reason","description":"Reason for editing this webhook","optional":true,"type":[[["string"]]]}],"async":true,"returns":[[["Promise","<"],["Webhook",">"]]],"meta":{"line":197,"file":"Webhook.js","path":"src/structures"}},{"name":"delete","description":"Deletes the webhook.","params":[{"name":"reason","description":"Reason for deleting this webhook","optional":true,"type":[[["string"]]]}],"returns":[[["Promise"]]],"meta":{"line":218,"file":"Webhook.js","path":"src/structures"}},{"name":"avatarURL","description":"A link to the webhook's avatar.","params":[{"name":"options","description":"Options for the Image URL","optional":true,"default":"{}","type":[[["ImageURLOptions"]]]}],"returns":{"types":[[["string"]]],"nullable":true},"meta":{"line":253,"file":"Webhook.js","path":"src/structures"}}],"meta":{"line":13,"file":"Webhook.js","path":"src/structures"}},{"name":"ActivityFlags","description":"Data structure that makes it easy to interact with an {@link Activity#flags} bitfield.","extends":[[["BitField"]]],"props":[{"name":"bitfield","description":"Bitfield of the packed bits","type":[[["number"]]],"meta":{"line":17,"file":"BitField.js","path":"src/util"}},{"name":"FLAGS","description":"Numeric activity flags. All available properties:\n* `INSTANCE`\n* `JOIN`\n* `SPECTATE`\n* `JOIN_REQUEST`\n* `SYNC`\n* `PLAY`","see":["{@link https://discordapp.com/developers/docs/topics/gateway#activity-object-activity-flags}"],"scope":"static","type":[[["Object"]]],"meta":{"line":22,"file":"ActivityFlags.js","path":"src/util"}}],"methods":[{"name":"any","description":"Checks whether the bitfield has a bit, or any of multiple bits.","inherits":"BitField#any","inherited":true,"params":[{"name":"bit","description":"Bit(s) to check for","type":[[["BitFieldResolvable"]]]}],"returns":[[["boolean"]]],"meta":{"line":25,"file":"BitField.js","path":"src/util"}},{"name":"equals","description":"Checks if this bitfield equals another","inherits":"BitField#equals","inherited":true,"params":[{"name":"bit","description":"Bit(s) to check for","type":[[["BitFieldResolvable"]]]}],"returns":[[["boolean"]]],"meta":{"line":34,"file":"BitField.js","path":"src/util"}},{"name":"has","description":"Checks whether the bitfield has a bit, or multiple bits.","inherits":"BitField#has","inherited":true,"params":[{"name":"bit","description":"Bit(s) to check for","type":[[["BitFieldResolvable"]]]}],"returns":[[["boolean"]]],"meta":{"line":43,"file":"BitField.js","path":"src/util"}},{"name":"missing","description":"Gets all given bits that are missing from the bitfield.","inherits":"BitField#missing","inherited":true,"params":[{"name":"bits","description":"Bits(s) to check for","type":[[["BitFieldResolvable"]]]},{"name":"hasParams","description":"Additional parameters for the has method, if any","variable":true,"type":[["*"]]}],"returns":[[["Array","<"],["string",">"]]],"meta":{"line":55,"file":"BitField.js","path":"src/util"}},{"name":"freeze","description":"Freezes these bits, making them immutable.","inherits":"BitField#freeze","inherited":true,"returns":{"types":[[["Readonly","<"],["BitField",">"]]],"description":"These bits"},"meta":{"line":64,"file":"BitField.js","path":"src/util"}},{"name":"add","description":"Adds bits to these ones.","inherits":"BitField#add","inherited":true,"params":[{"name":"bits","description":"Bits to add","optional":true,"variable":true,"type":[[["BitFieldResolvable"]]]}],"returns":{"types":[[["BitField"]]],"description":"These bits or new BitField if the instance is frozen."},"meta":{"line":73,"file":"BitField.js","path":"src/util"}},{"name":"remove","description":"Removes bits from these.","inherits":"BitField#remove","inherited":true,"params":[{"name":"bits","description":"Bits to remove","optional":true,"variable":true,"type":[[["BitFieldResolvable"]]]}],"returns":{"types":[[["BitField"]]],"description":"These bits or new BitField if the instance is frozen."},"meta":{"line":88,"file":"BitField.js","path":"src/util"}},{"name":"serialize","description":"Gets an object mapping field names to a {@link boolean} indicating whether the\nbit is available.","inherits":"BitField#serialize","inherited":true,"params":[{"name":"hasParams","description":"Additional parameters for the has method, if any","variable":true,"type":[["*"]]}],"returns":[[["Object"]]],"meta":{"line":104,"file":"BitField.js","path":"src/util"}},{"name":"toArray","description":"Gets an {@link Array} of bitfield names based on the bits available.","inherits":"BitField#toArray","inherited":true,"params":[{"name":"hasParams","description":"Additional parameters for the has method, if any","variable":true,"type":[["*"]]}],"returns":[[["Array","<"],["string",">"]]],"meta":{"line":115,"file":"BitField.js","path":"src/util"}}],"meta":{"line":9,"file":"ActivityFlags.js","path":"src/util"}},{"name":"BitField","description":"Data structure that makes it easy to interact with a bitfield.","construct":{"name":"BitField","params":[{"name":"bits","description":"Bits(s) to read from","optional":true,"default":0,"type":[[["BitFieldResolvable"]]]}]},"props":[{"name":"bitfield","description":"Bitfield of the packed bits","type":[[["number"]]],"meta":{"line":17,"file":"BitField.js","path":"src/util"}},{"name":"FLAGS","description":"Numeric bitfield flags.\n<info>Defined in extension classes</info>","scope":"static","abstract":true,"type":[[["Object"]]],"meta":{"line":160,"file":"BitField.js","path":"src/util"}}],"methods":[{"name":"any","description":"Checks whether the bitfield has a bit, or any of multiple bits.","params":[{"name":"bit","description":"Bit(s) to check for","type":[[["BitFieldResolvable"]]]}],"returns":[[["boolean"]]],"meta":{"line":25,"file":"BitField.js","path":"src/util"}},{"name":"equals","description":"Checks if this bitfield equals another","params":[{"name":"bit","description":"Bit(s) to check for","type":[[["BitFieldResolvable"]]]}],"returns":[[["boolean"]]],"meta":{"line":34,"file":"BitField.js","path":"src/util"}},{"name":"has","description":"Checks whether the bitfield has a bit, or multiple bits.","params":[{"name":"bit","description":"Bit(s) to check for","type":[[["BitFieldResolvable"]]]}],"returns":[[["boolean"]]],"meta":{"line":43,"file":"BitField.js","path":"src/util"}},{"name":"missing","description":"Gets all given bits that are missing from the bitfield.","params":[{"name":"bits","description":"Bits(s) to check for","type":[[["BitFieldResolvable"]]]},{"name":"hasParams","description":"Additional parameters for the has method, if any","variable":true,"type":[["*"]]}],"returns":[[["Array","<"],["string",">"]]],"meta":{"line":55,"file":"BitField.js","path":"src/util"}},{"name":"freeze","description":"Freezes these bits, making them immutable.","returns":{"types":[[["Readonly","<"],["BitField",">"]]],"description":"These bits"},"meta":{"line":64,"file":"BitField.js","path":"src/util"}},{"name":"add","description":"Adds bits to these ones.","params":[{"name":"bits","description":"Bits to add","optional":true,"variable":true,"type":[[["BitFieldResolvable"]]]}],"returns":{"types":[[["BitField"]]],"description":"These bits or new BitField if the instance is frozen."},"meta":{"line":73,"file":"BitField.js","path":"src/util"}},{"name":"remove","description":"Removes bits from these.","params":[{"name":"bits","description":"Bits to remove","optional":true,"variable":true,"type":[[["BitFieldResolvable"]]]}],"returns":{"types":[[["BitField"]]],"description":"These bits or new BitField if the instance is frozen."},"meta":{"line":88,"file":"BitField.js","path":"src/util"}},{"name":"serialize","description":"Gets an object mapping field names to a {@link boolean} indicating whether the\nbit is available.","params":[{"name":"hasParams","description":"Additional parameters for the has method, if any","variable":true,"type":[["*"]]}],"returns":[[["Object"]]],"meta":{"line":104,"file":"BitField.js","path":"src/util"}},{"name":"toArray","description":"Gets an {@link Array} of bitfield names based on the bits available.","params":[{"name":"hasParams","description":"Additional parameters for the has method, if any","variable":true,"type":[["*"]]}],"returns":[[["Array","<"],["string",">"]]],"meta":{"line":115,"file":"BitField.js","path":"src/util"}},{"name":"resolve","description":"Resolves bitfields to their numeric form.","scope":"static","params":[{"name":"bit","description":"bit(s) to resolve","optional":true,"default":0,"type":[[["BitFieldResolvable"]]]}],"returns":[[["number"]]],"meta":{"line":145,"file":"BitField.js","path":"src/util"}}],"meta":{"line":12,"file":"BitField.js","path":"src/util"}},{"name":"Collection","description":"A Map with additional utility methods. This is used throughout discord.js rather than Arrays for anything that has\nan ID, for significantly improved performance and ease-of-use.","extends":[[["BaseCollection"]]],"meta":{"line":11,"file":"Collection.js","path":"src/util"}},{"name":"DataResolver","description":"The DataResolver identifies different objects and tries to resolve a specific piece of information from them.","access":"private","methods":[{"name":"resolveInviteCode","description":"Resolves InviteResolvable to an invite code.","scope":"static","params":[{"name":"data","description":"The invite resolvable to resolve","type":[[["InviteResolvable"]]]}],"returns":[[["string"]]],"meta":{"line":31,"file":"DataResolver.js","path":"src/util"}},{"name":"resolveImage","description":"Resolves a Base64Resolvable, a string, or a BufferResolvable to a Base 64 image.","scope":"static","params":[{"name":"image","description":"The image to be resolved","type":[[["BufferResolvable"]],[["Base64Resolvable"]]]}],"async":true,"returns":[[["Promise","<?"],["string",">"]]],"meta":{"line":43,"file":"DataResolver.js","path":"src/util"}},{"name":"resolveBase64","description":"Resolves a Base64Resolvable to a Base 64 image.","scope":"static","params":[{"name":"data","description":"The base 64 resolvable you want to resolve","type":[[["Base64Resolvable"]]]}],"returns":{"types":[[["string"]]],"nullable":true},"meta":{"line":64,"file":"DataResolver.js","path":"src/util"}},{"name":"resolveFile","description":"Resolves a BufferResolvable to a Buffer.","scope":"static","params":[{"name":"resource","description":"The buffer or stream resolvable to resolve","type":[[["BufferResolvable"]],[["Stream"]]]}],"returns":[[["Promise","<"],["Buffer",">"]]],"meta":{"line":87,"file":"DataResolver.js","path":"src/util"}}],"meta":{"line":15,"file":"DataResolver.js","path":"src/util"}},{"name":"MessageFlags","description":"Data structure that makes it easy to interact with an {@link Message#flags} bitfield.","extends":[[["BitField"]]],"props":[{"name":"bitfield","description":"Bitfield of the packed bits","type":[[["number"]]],"meta":{"line":17,"file":"BitField.js","path":"src/util"}},{"name":"FLAGS","description":"Numeric message flags. All available properties:\n* `CROSSPOSTED`\n* `IS_CROSSPOST`\n* `SUPPRESS_EMBEDS`\n* `SOURCE_MESSAGE_DELETED`\n* `URGENT`","see":["{@link https://discordapp.com/developers/docs/resources/channel#message-object-message-flags}"],"scope":"static","type":[[["Object"]]],"meta":{"line":21,"file":"MessageFlags.js","path":"src/util"}}],"methods":[{"name":"any","description":"Checks whether the bitfield has a bit, or any of multiple bits.","inherits":"BitField#any","inherited":true,"params":[{"name":"bit","description":"Bit(s) to check for","type":[[["BitFieldResolvable"]]]}],"returns":[[["boolean"]]],"meta":{"line":25,"file":"BitField.js","path":"src/util"}},{"name":"equals","description":"Checks if this bitfield equals another","inherits":"BitField#equals","inherited":true,"params":[{"name":"bit","description":"Bit(s) to check for","type":[[["BitFieldResolvable"]]]}],"returns":[[["boolean"]]],"meta":{"line":34,"file":"BitField.js","path":"src/util"}},{"name":"has","description":"Checks whether the bitfield has a bit, or multiple bits.","inherits":"BitField#has","inherited":true,"params":[{"name":"bit","description":"Bit(s) to check for","type":[[["BitFieldResolvable"]]]}],"returns":[[["boolean"]]],"meta":{"line":43,"file":"BitField.js","path":"src/util"}},{"name":"missing","description":"Gets all given bits that are missing from the bitfield.","inherits":"BitField#missing","inherited":true,"params":[{"name":"bits","description":"Bits(s) to check for","type":[[["BitFieldResolvable"]]]},{"name":"hasParams","description":"Additional parameters for the has method, if any","variable":true,"type":[["*"]]}],"returns":[[["Array","<"],["string",">"]]],"meta":{"line":55,"file":"BitField.js","path":"src/util"}},{"name":"freeze","description":"Freezes these bits, making them immutable.","inherits":"BitField#freeze","inherited":true,"returns":{"types":[[["Readonly","<"],["BitField",">"]]],"description":"These bits"},"meta":{"line":64,"file":"BitField.js","path":"src/util"}},{"name":"add","description":"Adds bits to these ones.","inherits":"BitField#add","inherited":true,"params":[{"name":"bits","description":"Bits to add","optional":true,"variable":true,"type":[[["BitFieldResolvable"]]]}],"returns":{"types":[[["BitField"]]],"description":"These bits or new BitField if the instance is frozen."},"meta":{"line":73,"file":"BitField.js","path":"src/util"}},{"name":"remove","description":"Removes bits from these.","inherits":"BitField#remove","inherited":true,"params":[{"name":"bits","description":"Bits to remove","optional":true,"variable":true,"type":[[["BitFieldResolvable"]]]}],"returns":{"types":[[["BitField"]]],"description":"These bits or new BitField if the instance is frozen."},"meta":{"line":88,"file":"BitField.js","path":"src/util"}},{"name":"serialize","description":"Gets an object mapping field names to a {@link boolean} indicating whether the\nbit is available.","inherits":"BitField#serialize","inherited":true,"params":[{"name":"hasParams","description":"Additional parameters for the has method, if any","variable":true,"type":[["*"]]}],"returns":[[["Object"]]],"meta":{"line":104,"file":"BitField.js","path":"src/util"}},{"name":"toArray","description":"Gets an {@link Array} of bitfield names based on the bits available.","inherits":"BitField#toArray","inherited":true,"params":[{"name":"hasParams","description":"Additional parameters for the has method, if any","variable":true,"type":[["*"]]}],"returns":[[["Array","<"],["string",">"]]],"meta":{"line":115,"file":"BitField.js","path":"src/util"}}],"meta":{"line":9,"file":"MessageFlags.js","path":"src/util"}},{"name":"Permissions","description":"Data structure that makes it easy to interact with a permission bitfield. All {@link GuildMember}s have a set of\npermissions in their guild, and each channel in the guild may also have {@link PermissionOverwrites} for the member\nthat override their default permissions.","extends":[[["BitField"]]],"props":[{"name":"bitfield","description":"Bitfield of the packed bits","type":[[["number"]]],"meta":{"line":17,"file":"BitField.js","path":"src/util"}},{"name":"FLAGS","description":"Numeric permission flags. All available properties:\n* `ADMINISTRATOR` (implicitly has *all* permissions, and bypasses all channel overwrites)\n* `CREATE_INSTANT_INVITE` (create invitations to the guild)\n* `KICK_MEMBERS`\n* `BAN_MEMBERS`\n* `MANAGE_CHANNELS` (edit and reorder channels)\n* `MANAGE_GUILD` (edit the guild information, region, etc.)\n* `ADD_REACTIONS` (add new reactions to messages)\n* `VIEW_AUDIT_LOG`\n* `PRIORITY_SPEAKER`\n* `STREAM`\n* `VIEW_CHANNEL`\n* `SEND_MESSAGES`\n* `SEND_TTS_MESSAGES`\n* `MANAGE_MESSAGES` (delete messages and reactions)\n* `EMBED_LINKS` (links posted will have a preview embedded)\n* `ATTACH_FILES`\n* `READ_MESSAGE_HISTORY` (view messages that were posted prior to opening Discord)\n* `MENTION_EVERYONE`\n* `USE_EXTERNAL_EMOJIS` (use emojis from different guilds)\n* `CONNECT` (connect to a voice channel)\n* `SPEAK` (speak in a voice channel)\n* `MUTE_MEMBERS` (mute members across all voice channels)\n* `DEAFEN_MEMBERS` (deafen members across all voice channels)\n* `MOVE_MEMBERS` (move members between voice channels)\n* `USE_VAD` (use voice activity detection)\n* `CHANGE_NICKNAME`\n* `MANAGE_NICKNAMES` (change other members' nicknames)\n* `MANAGE_ROLES`\n* `MANAGE_WEBHOOKS`\n* `MANAGE_EMOJIS`","see":["{@link https://discordapp.com/developers/docs/topics/permissions}"],"scope":"static","type":[[["Object"]]],"meta":{"line":77,"file":"Permissions.js","path":"src/util"}},{"name":"ALL","description":"Bitfield representing every permission combined","scope":"static","type":[[["number"]]],"meta":{"line":116,"file":"Permissions.js","path":"src/util"}},{"name":"DEFAULT","description":"Bitfield representing the default permissions for users","scope":"static","type":[[["number"]]],"meta":{"line":122,"file":"Permissions.js","path":"src/util"}}],"methods":[{"name":"any","description":"Checks whether the bitfield has a permission, or any of multiple permissions.","params":[{"name":"permission","description":"Permission(s) to check for","type":[[["PermissionResolvable"]]]},{"name":"checkAdmin","description":"Whether to allow the administrator permission to override","optional":true,"default":true,"type":[[["boolean"]]]}],"returns":[[["boolean"]]],"meta":{"line":27,"file":"Permissions.js","path":"src/util"}},{"name":"has","description":"Checks whether the bitfield has a permission, or multiple permissions.","params":[{"name":"permission","description":"Permission(s) to check for","type":[[["PermissionResolvable"]]]},{"name":"checkAdmin","description":"Whether to allow the administrator permission to override","optional":true,"default":true,"type":[[["boolean"]]]}],"returns":[[["boolean"]]],"meta":{"line":37,"file":"Permissions.js","path":"src/util"}},{"name":"equals","description":"Checks if this bitfield equals another","inherits":"BitField#equals","inherited":true,"params":[{"name":"bit","description":"Bit(s) to check for","type":[[["BitFieldResolvable"]]]}],"returns":[[["boolean"]]],"meta":{"line":34,"file":"BitField.js","path":"src/util"}},{"name":"missing","description":"Gets all given bits that are missing from the bitfield.","inherits":"BitField#missing","inherited":true,"params":[{"name":"bits","description":"Bits(s) to check for","type":[[["BitFieldResolvable"]]]},{"name":"hasParams","description":"Additional parameters for the has method, if any","variable":true,"type":[["*"]]}],"returns":[[["Array","<"],["string",">"]]],"meta":{"line":55,"file":"BitField.js","path":"src/util"}},{"name":"freeze","description":"Freezes these bits, making them immutable.","inherits":"BitField#freeze","inherited":true,"returns":{"types":[[["Readonly","<"],["BitField",">"]]],"description":"These bits"},"meta":{"line":64,"file":"BitField.js","path":"src/util"}},{"name":"add","description":"Adds bits to these ones.","inherits":"BitField#add","inherited":true,"params":[{"name":"bits","description":"Bits to add","optional":true,"variable":true,"type":[[["BitFieldResolvable"]]]}],"returns":{"types":[[["BitField"]]],"description":"These bits or new BitField if the instance is frozen."},"meta":{"line":73,"file":"BitField.js","path":"src/util"}},{"name":"remove","description":"Removes bits from these.","inherits":"BitField#remove","inherited":true,"params":[{"name":"bits","description":"Bits to remove","optional":true,"variable":true,"type":[[["BitFieldResolvable"]]]}],"returns":{"types":[[["BitField"]]],"description":"These bits or new BitField if the instance is frozen."},"meta":{"line":88,"file":"BitField.js","path":"src/util"}},{"name":"serialize","description":"Gets an object mapping field names to a {@link boolean} indicating whether the\nbit is available.","inherits":"BitField#serialize","inherited":true,"params":[{"name":"hasParams","description":"Additional parameters for the has method, if any","variable":true,"type":[["*"]]}],"returns":[[["Object"]]],"meta":{"line":104,"file":"BitField.js","path":"src/util"}},{"name":"toArray","description":"Gets an {@link Array} of bitfield names based on the bits available.","inherits":"BitField#toArray","inherited":true,"params":[{"name":"hasParams","description":"Additional parameters for the has method, if any","variable":true,"type":[["*"]]}],"returns":[[["Array","<"],["string",">"]]],"meta":{"line":115,"file":"BitField.js","path":"src/util"}}],"meta":{"line":11,"file":"Permissions.js","path":"src/util"}},{"name":"SnowflakeUtil","description":"A container for useful snowflake-related methods.","methods":[{"name":"generate","description":"Generates a Discord snowflake.\n<info>This hardcodes the worker ID as 1 and the process ID as 0.</info>","scope":"static","params":[{"name":"timestamp","description":"Timestamp or date of the snowflake to generate","optional":true,"default":"Date.now()","type":[[["number"]],[["Date"]]]}],"returns":{"types":[[["Snowflake"]]],"description":"The generated snowflake"},"meta":{"line":35,"file":"Snowflake.js","path":"src/util"}},{"name":"deconstruct","description":"Deconstructs a Discord snowflake.","scope":"static","params":[{"name":"snowflake","description":"Snowflake to deconstruct","type":[[["Snowflake"]]]}],"returns":{"types":[[["DeconstructedSnowflake"]]],"description":"Deconstructed snowflake"},"meta":{"line":64,"file":"Snowflake.js","path":"src/util"}}],"meta":{"line":13,"file":"Snowflake.js","path":"src/util"}},{"name":"Speaking","description":"Data structure that makes it easy to interact with a {@link VoiceConnection#speaking}\nand {@link guildMemberSpeaking} event bitfields.","extends":[[["BitField"]]],"props":[{"name":"bitfield","description":"Bitfield of the packed bits","type":[[["number"]]],"meta":{"line":17,"file":"BitField.js","path":"src/util"}},{"name":"FLAGS","description":"Numeric speaking flags. All available properties:\n* `SPEAKING`\n* `SOUNDSHARE`","see":["{@link https://discordapp.com/developers/docs/topics/voice-connections#speaking}"],"scope":"static","type":[[["Object"]]],"meta":{"line":19,"file":"Speaking.js","path":"src/util"}}],"methods":[{"name":"any","description":"Checks whether the bitfield has a bit, or any of multiple bits.","inherits":"BitField#any","inherited":true,"params":[{"name":"bit","description":"Bit(s) to check for","type":[[["BitFieldResolvable"]]]}],"returns":[[["boolean"]]],"meta":{"line":25,"file":"BitField.js","path":"src/util"}},{"name":"equals","description":"Checks if this bitfield equals another","inherits":"BitField#equals","inherited":true,"params":[{"name":"bit","description":"Bit(s) to check for","type":[[["BitFieldResolvable"]]]}],"returns":[[["boolean"]]],"meta":{"line":34,"file":"BitField.js","path":"src/util"}},{"name":"has","description":"Checks whether the bitfield has a bit, or multiple bits.","inherits":"BitField#has","inherited":true,"params":[{"name":"bit","description":"Bit(s) to check for","type":[[["BitFieldResolvable"]]]}],"returns":[[["boolean"]]],"meta":{"line":43,"file":"BitField.js","path":"src/util"}},{"name":"missing","description":"Gets all given bits that are missing from the bitfield.","inherits":"BitField#missing","inherited":true,"params":[{"name":"bits","description":"Bits(s) to check for","type":[[["BitFieldResolvable"]]]},{"name":"hasParams","description":"Additional parameters for the has method, if any","variable":true,"type":[["*"]]}],"returns":[[["Array","<"],["string",">"]]],"meta":{"line":55,"file":"BitField.js","path":"src/util"}},{"name":"freeze","description":"Freezes these bits, making them immutable.","inherits":"BitField#freeze","inherited":true,"returns":{"types":[[["Readonly","<"],["BitField",">"]]],"description":"These bits"},"meta":{"line":64,"file":"BitField.js","path":"src/util"}},{"name":"add","description":"Adds bits to these ones.","inherits":"BitField#add","inherited":true,"params":[{"name":"bits","description":"Bits to add","optional":true,"variable":true,"type":[[["BitFieldResolvable"]]]}],"returns":{"types":[[["BitField"]]],"description":"These bits or new BitField if the instance is frozen."},"meta":{"line":73,"file":"BitField.js","path":"src/util"}},{"name":"remove","description":"Removes bits from these.","inherits":"BitField#remove","inherited":true,"params":[{"name":"bits","description":"Bits to remove","optional":true,"variable":true,"type":[[["BitFieldResolvable"]]]}],"returns":{"types":[[["BitField"]]],"description":"These bits or new BitField if the instance is frozen."},"meta":{"line":88,"file":"BitField.js","path":"src/util"}},{"name":"serialize","description":"Gets an object mapping field names to a {@link boolean} indicating whether the\nbit is available.","inherits":"BitField#serialize","inherited":true,"params":[{"name":"hasParams","description":"Additional parameters for the has method, if any","variable":true,"type":[["*"]]}],"returns":[[["Object"]]],"meta":{"line":104,"file":"BitField.js","path":"src/util"}},{"name":"toArray","description":"Gets an {@link Array} of bitfield names based on the bits available.","inherits":"BitField#toArray","inherited":true,"params":[{"name":"hasParams","description":"Additional parameters for the has method, if any","variable":true,"type":[["*"]]}],"returns":[[["Array","<"],["string",">"]]],"meta":{"line":115,"file":"BitField.js","path":"src/util"}}],"meta":{"line":10,"file":"Speaking.js","path":"src/util"}},{"name":"Structures","description":"Allows for the extension of built-in Discord.js structures that are instantiated by {@link DataStore DataStores}.","methods":[{"name":"get","description":"Retrieves a structure class.","scope":"static","params":[{"name":"structure","description":"Name of the structure to retrieve","type":[[["string"]]]}],"returns":[[["function"]]],"meta":{"line":16,"file":"Structures.js","path":"src/util"}},{"name":"extend","description":"Extends a structure.\n<warn> Make sure to extend all structures before instantiating your client.\nExtending after doing so may not work as expected. </warn>","scope":"static","examples":["const { Structures } = require('discord.js');\n\nStructures.extend('Guild', Guild => {\n  class CoolGuild extends Guild {\n    constructor(client, data) {\n      super(client, data);\n      this.cool = true;\n    }\n  }\n\n  return CoolGuild;\n});"],"params":[{"name":"structure","description":"Name of the structure class to extend","type":[[["string"]]]},{"name":"extender","description":"Function that takes the base class to extend as its only parameter and returns the\nextended class/prototype","type":[[["function"]]]}],"returns":{"types":[[["function"]]],"description":"Extended class/prototype returned from the extender"},"meta":{"line":43,"file":"Structures.js","path":"src/util"}}],"meta":{"line":7,"file":"Structures.js","path":"src/util"}},{"name":"SystemChannelFlags","description":"Data structure that makes it easy to interact with a {@link Guild#systemChannelFlags} bitfield.\n<info>Note that all event message types are enabled by default,\nand by setting their corresponding flags you are disabling them</info>","extends":[[["BitField"]]],"props":[{"name":"bitfield","description":"Bitfield of the packed bits","type":[[["number"]]],"meta":{"line":17,"file":"BitField.js","path":"src/util"}},{"name":"FLAGS","description":"Numeric system channel flags. All available properties:\n* `WELCOME_MESSAGE_DISABLED`\n* `BOOST_MESSAGE_DISABLED`","scope":"static","type":[[["Object"]]],"meta":{"line":28,"file":"SystemChannelFlags.js","path":"src/util"}}],"methods":[{"name":"any","description":"Checks whether the bitfield has a bit, or any of multiple bits.","inherits":"BitField#any","inherited":true,"params":[{"name":"bit","description":"Bit(s) to check for","type":[[["BitFieldResolvable"]]]}],"returns":[[["boolean"]]],"meta":{"line":25,"file":"BitField.js","path":"src/util"}},{"name":"equals","description":"Checks if this bitfield equals another","inherits":"BitField#equals","inherited":true,"params":[{"name":"bit","description":"Bit(s) to check for","type":[[["BitFieldResolvable"]]]}],"returns":[[["boolean"]]],"meta":{"line":34,"file":"BitField.js","path":"src/util"}},{"name":"has","description":"Checks whether the bitfield has a bit, or multiple bits.","inherits":"BitField#has","inherited":true,"params":[{"name":"bit","description":"Bit(s) to check for","type":[[["BitFieldResolvable"]]]}],"returns":[[["boolean"]]],"meta":{"line":43,"file":"BitField.js","path":"src/util"}},{"name":"missing","description":"Gets all given bits that are missing from the bitfield.","inherits":"BitField#missing","inherited":true,"params":[{"name":"bits","description":"Bits(s) to check for","type":[[["BitFieldResolvable"]]]},{"name":"hasParams","description":"Additional parameters for the has method, if any","variable":true,"type":[["*"]]}],"returns":[[["Array","<"],["string",">"]]],"meta":{"line":55,"file":"BitField.js","path":"src/util"}},{"name":"freeze","description":"Freezes these bits, making them immutable.","inherits":"BitField#freeze","inherited":true,"returns":{"types":[[["Readonly","<"],["BitField",">"]]],"description":"These bits"},"meta":{"line":64,"file":"BitField.js","path":"src/util"}},{"name":"add","description":"Adds bits to these ones.","inherits":"BitField#add","inherited":true,"params":[{"name":"bits","description":"Bits to add","optional":true,"variable":true,"type":[[["BitFieldResolvable"]]]}],"returns":{"types":[[["BitField"]]],"description":"These bits or new BitField if the instance is frozen."},"meta":{"line":73,"file":"BitField.js","path":"src/util"}},{"name":"remove","description":"Removes bits from these.","inherits":"BitField#remove","inherited":true,"params":[{"name":"bits","description":"Bits to remove","optional":true,"variable":true,"type":[[["BitFieldResolvable"]]]}],"returns":{"types":[[["BitField"]]],"description":"These bits or new BitField if the instance is frozen."},"meta":{"line":88,"file":"BitField.js","path":"src/util"}},{"name":"serialize","description":"Gets an object mapping field names to a {@link boolean} indicating whether the\nbit is available.","inherits":"BitField#serialize","inherited":true,"params":[{"name":"hasParams","description":"Additional parameters for the has method, if any","variable":true,"type":[["*"]]}],"returns":[[["Object"]]],"meta":{"line":104,"file":"BitField.js","path":"src/util"}},{"name":"toArray","description":"Gets an {@link Array} of bitfield names based on the bits available.","inherits":"BitField#toArray","inherited":true,"params":[{"name":"hasParams","description":"Additional parameters for the has method, if any","variable":true,"type":[["*"]]}],"returns":[[["Array","<"],["string",">"]]],"meta":{"line":115,"file":"BitField.js","path":"src/util"}}],"meta":{"line":11,"file":"SystemChannelFlags.js","path":"src/util"}},{"name":"Util","description":"Contains various general-purpose utility methods. These functions are also available on the base `Discord` object.","methods":[{"name":"flatten","description":"Flatten an object. Any properties that are collections will get converted to an array of keys.","scope":"static","params":[{"name":"obj","description":"The object to flatten.","type":[[["Object"]]]},{"name":"props","description":"Specific properties to include/exclude.","optional":true,"variable":true,"type":[[["Object","<"],["string",", ("],["boolean","|"],["string",")>"]]]}],"returns":[[["Object"]]],"meta":{"line":24,"file":"Util.js","path":"src/util"}},{"name":"splitMessage","description":"Splits a string into multiple chunks at a designated character that do not exceed a specific length.","scope":"static","params":[{"name":"text","description":"Content to split","type":[[["StringResolvable"]]]},{"name":"options","description":"Options controlling the behavior of the split","optional":true,"type":[[["SplitOptions"]]]}],"returns":[[["Array","<"],["string",">"]]],"meta":{"line":58,"file":"Util.js","path":"src/util"}},{"name":"escapeMarkdown","description":"Escapes any Discord-flavour markdown in a string.","scope":"static","params":[{"name":"text","description":"Content to escape","type":[[["string"]]]},{"name":"options","description":"What types of markdown to escape","optional":true,"default":"{}","type":[[["Object"]]]},{"name":"options.codeBlock","description":"Whether to escape code blocks or not","optional":true,"default":true,"type":[[["boolean"]]]},{"name":"options.inlineCode","description":"Whether to escape inline code or not","optional":true,"default":true,"type":[[["boolean"]]]},{"name":"options.bold","description":"Whether to escape bolds or not","optional":true,"default":true,"type":[[["boolean"]]]},{"name":"options.italic","description":"Whether to escape italics or not","optional":true,"default":true,"type":[[["boolean"]]]},{"name":"options.underline","description":"Whether to escape underlines or not","optional":true,"default":true,"type":[[["boolean"]]]},{"name":"options.strikethrough","description":"Whether to escape strikethroughs or not","optional":true,"default":true,"type":[[["boolean"]]]},{"name":"options.spoiler","description":"Whether to escape spoilers or not","optional":true,"default":true,"type":[[["boolean"]]]},{"name":"options.codeBlockContent","description":"Whether to escape text inside code blocks or not","optional":true,"default":true,"type":[[["boolean"]]]},{"name":"options.inlineCodeContent","description":"Whether to escape text inside inline code or not","optional":true,"default":true,"type":[[["boolean"]]]}],"returns":[[["string"]]],"meta":{"line":90,"file":"Util.js","path":"src/util"}},{"name":"escapeCodeBlock","description":"Escapes code block markdown in a string.","scope":"static","params":[{"name":"text","description":"Content to escape","type":[[["string"]]]}],"returns":[[["string"]]],"meta":{"line":143,"file":"Util.js","path":"src/util"}},{"name":"escapeInlineCode","description":"Escapes inline code markdown in a string.","scope":"static","params":[{"name":"text","description":"Content to escape","type":[[["string"]]]}],"returns":[[["string"]]],"meta":{"line":152,"file":"Util.js","path":"src/util"}},{"name":"escapeItalic","description":"Escapes italic markdown in a string.","scope":"static","params":[{"name":"text","description":"Content to escape","type":[[["string"]]]}],"returns":[[["string"]]],"meta":{"line":161,"file":"Util.js","path":"src/util"}},{"name":"escapeBold","description":"Escapes bold markdown in a string.","scope":"static","params":[{"name":"text","description":"Content to escape","type":[[["string"]]]}],"returns":[[["string"]]],"meta":{"line":179,"file":"Util.js","path":"src/util"}},{"name":"escapeUnderline","description":"Escapes underline markdown in a string.","scope":"static","params":[{"name":"text","description":"Content to escape","type":[[["string"]]]}],"returns":[[["string"]]],"meta":{"line":192,"file":"Util.js","path":"src/util"}},{"name":"escapeStrikethrough","description":"Escapes strikethrough markdown in a string.","scope":"static","params":[{"name":"text","description":"Content to escape","type":[[["string"]]]}],"returns":[[["string"]]],"meta":{"line":205,"file":"Util.js","path":"src/util"}},{"name":"escapeSpoiler","description":"Escapes spoiler markdown in a string.","scope":"static","params":[{"name":"text","description":"Content to escape","type":[[["string"]]]}],"returns":[[["string"]]],"meta":{"line":214,"file":"Util.js","path":"src/util"}},{"name":"fetchRecommendedShards","description":"Gets the recommended shard count from Discord.","scope":"static","params":[{"name":"token","description":"Discord auth token","type":[[["string"]]]},{"name":"guildsPerShard","description":"Number of guilds per shard","optional":true,"default":1000,"type":[[["number"]]]}],"returns":{"types":[[["Promise","<"],["number",">"]]],"description":"The recommended number of shards"},"meta":{"line":224,"file":"Util.js","path":"src/util"}},{"name":"parseEmoji","description":"Parses emoji info out of a string. The string must be one of:\n* A UTF-8 emoji (no ID)\n* A URL-encoded UTF-8 emoji (no ID)\n* A Discord custom emoji (`<:name:id>` or `<a:name:id>`)","scope":"static","access":"private","params":[{"name":"text","description":"Emoji string to parse","type":[[["string"]]]}],"returns":{"types":[[["Object"]]],"description":"Object with `animated`, `name`, and `id` properties"},"meta":{"line":244,"file":"Util.js","path":"src/util"}},{"name":"cloneObject","description":"Shallow-copies an object with its class/prototype intact.","scope":"static","access":"private","params":[{"name":"obj","description":"Object to clone","type":[[["Object"]]]}],"returns":[[["Object"]]],"meta":{"line":258,"file":"Util.js","path":"src/util"}},{"name":"mergeDefault","description":"Sets default properties on an object that aren't already specified.","scope":"static","access":"private","params":[{"name":"def","description":"Default properties","type":[[["Object"]]]},{"name":"given","description":"Object to assign defaults to","type":[[["Object"]]]}],"returns":[[["Object"]]],"meta":{"line":269,"file":"Util.js","path":"src/util"}},{"name":"convertToBuffer","description":"Converts an ArrayBuffer or string to a Buffer.","scope":"static","access":"private","params":[{"name":"ab","description":"ArrayBuffer to convert","type":[[["ArrayBuffer"]],[["string"]]]}],"returns":[[["Buffer"]]],"meta":{"line":288,"file":"Util.js","path":"src/util"}},{"name":"str2ab","description":"Converts a string to an ArrayBuffer.","scope":"static","access":"private","params":[{"name":"str","description":"String to convert","type":[[["string"]]]}],"returns":[[["ArrayBuffer"]]],"meta":{"line":299,"file":"Util.js","path":"src/util"}},{"name":"makeError","description":"Makes an Error from a plain info object.","scope":"static","access":"private","params":[{"name":"obj","description":"Error info","type":[[["Object"]]]},{"name":"obj.name","description":"Error type","type":[[["string"]]]},{"name":"obj.message","description":"Message for the error","type":[[["string"]]]},{"name":"obj.stack","description":"Stack for the error","type":[[["string"]]]}],"returns":[[["Error"]]],"meta":{"line":315,"file":"Util.js","path":"src/util"}},{"name":"makePlainError","description":"Makes a plain error info object from an Error.","scope":"static","access":"private","params":[{"name":"err","description":"Error to get info from","type":[[["Error"]]]}],"returns":[[["Object"]]],"meta":{"line":328,"file":"Util.js","path":"src/util"}},{"name":"moveElementInArray","description":"Moves an element in an array *in place*.","scope":"static","access":"private","params":[{"name":"array","description":"Array to modify","type":[[["Array","<"],["*",">"]]]},{"name":"element","description":"Element to move","type":[["*"]]},{"name":"newIndex","description":"Index or offset to move the element to","type":[[["number"]]]},{"name":"offset","description":"Move the element by an offset amount rather than to a set index","optional":true,"default":false,"type":[[["boolean"]]]}],"returns":[[["number"]]],"meta":{"line":345,"file":"Util.js","path":"src/util"}},{"name":"resolveString","description":"Resolves a StringResolvable to a string.","scope":"static","params":[{"name":"data","description":"The string resolvable to resolve","type":[[["StringResolvable"]]]}],"returns":[[["string"]]],"meta":{"line":368,"file":"Util.js","path":"src/util"}},{"name":"resolveColor","description":"Resolves a ColorResolvable into a color number.","scope":"static","params":[{"name":"color","description":"Color to resolve","type":[[["ColorResolvable"]]]}],"returns":{"types":[[["number"]]],"description":"A color"},"meta":{"line":414,"file":"Util.js","path":"src/util"}},{"name":"discordSort","description":"Sorts by Discord's position and ID.","scope":"static","params":[{"name":"collection","description":"Collection of objects to sort","type":[[["Collection"]]]}],"returns":[[["Collection"]]],"meta":{"line":434,"file":"Util.js","path":"src/util"}},{"name":"setPosition","description":"Sets the position of a Channel or Role.","scope":"static","access":"private","params":[{"name":"item","description":"Object to set the position of","type":[[["Channel"]],[["Role"]]]},{"name":"position","description":"New position for the object","type":[[["number"]]]},{"name":"relative","description":"Whether `position` is relative to its current position","type":[[["boolean"]]]},{"name":"sorted","description":"A collection of the objects sorted properly","type":[[["Collection","<"],["string",", ("],["Channel","|"],["Role",")>"]]]},{"name":"route","description":"Route to call PATCH on","type":[[["APIRouter"]]]},{"name":"reason","description":"Reason for the change","optional":true,"type":[[["string"]]]}],"returns":{"types":[[["Promise","<"],["Array","<"],["Object",">>"]]],"description":"Updated item list, with `id` and `position` properties"},"meta":{"line":453,"file":"Util.js","path":"src/util"}},{"name":"basename","description":"Alternative to Node's `path.basename`, removing query string after the extension if it exists.","scope":"static","access":"private","params":[{"name":"path","description":"Path to get the basename of","type":[[["string"]]]},{"name":"ext","description":"File extension to remove","optional":true,"type":[[["string"]]]}],"returns":{"types":[[["string"]]],"description":"Basename of the path"},"meta":{"line":467,"file":"Util.js","path":"src/util"}},{"name":"idToBinary","description":"Transforms a snowflake from a decimal string to a bit string.","scope":"static","access":"private","params":[{"name":"num","description":"Snowflake to be transformed","type":[[["Snowflake"]]]}],"returns":[[["string"]]],"meta":{"line":478,"file":"Util.js","path":"src/util"}},{"name":"binaryToID","description":"Transforms a snowflake from a bit string to a decimal string.","scope":"static","access":"private","params":[{"name":"num","description":"Bit string to be transformed","type":[[["string"]]]}],"returns":[[["Snowflake"]]],"meta":{"line":499,"file":"Util.js","path":"src/util"}},{"name":"cleanContent","description":"The content to have all mentions replaced by the equivalent text.","scope":"static","params":[{"name":"str","description":"The string to be converted","type":[[["string"]]]},{"name":"message","description":"The message object to reference","type":[[["Message"]]]}],"returns":[[["string"]]],"meta":{"line":525,"file":"Util.js","path":"src/util"}},{"name":"cleanCodeBlockContent","description":"The content to put in a codeblock with all codeblock fences replaced by the equivalent backticks.","scope":"static","params":[{"name":"text","description":"The string to be converted","type":[[["string"]]]}],"returns":[[["string"]]],"meta":{"line":559,"file":"Util.js","path":"src/util"}},{"name":"delayFor","description":"Creates a Promise that resolves after a specified duration.","scope":"static","access":"private","params":[{"name":"ms","description":"How long to wait before resolving (in milliseconds)","type":[[["number"]]]}],"returns":[[["Promise","<"],["void",">"]]],"meta":{"line":569,"file":"Util.js","path":"src/util"}}],"meta":{"line":14,"file":"Util.js","path":"src/util"}}],"interfaces":[],"typedefs":[{"name":"ReceiveStreamOptions","description":"Options passed to `VoiceReceiver#createStream`.","type":[[["Object"]]],"props":[{"name":"mode","description":"The mode for audio output. This defaults to opus, meaning discord.js won't decode\nthe packets for you. You can set this to 'pcm' so that the stream's output will be 16-bit little-endian stereo\naudio","optional":true,"default":"'opus'","type":[[["string"]]]},{"name":"end","description":"When the stream should be destroyed. If `silence`, this will be when the user\nstops talking. Otherwise, if `manual`, this should be handled by you.","optional":true,"default":"'silence'","type":[[["string"]]]}],"meta":{"line":28,"file":"Receiver.js","path":"src/client/voice/receiver"}},{"name":"StreamOptions","description":"Options that can be passed to stream-playing methods:","type":[[["Object"]]],"props":[{"name":"type","description":"The type of stream.","optional":true,"default":"'unknown'","type":[[["StreamType"]]]},{"name":"seek","description":"The time to seek to, will be ignored when playing `ogg/opus` or `webm/opus` streams","optional":true,"default":0,"type":[[["number"]]]},{"name":"volume","description":"The volume to play at. Set this to false to disable volume transforms for\nthis stream to improve performance.","optional":true,"default":1,"type":[[["number"]],[["boolean"]]]},{"name":"plp","description":"Expected packet loss percentage","optional":true,"type":[[["number"]]]},{"name":"fec","description":"Enabled forward error correction","optional":true,"type":[[["boolean"]]]},{"name":"bitrate","description":"The bitrate (quality) of the audio in kbps.\nIf set to 'auto', the voice channel's bitrate will be used","optional":true,"default":96,"type":[[["number"]],[["string"]]]},{"name":"highWaterMark","description":"The maximum number of opus packets to make and store before they are\nactually needed. See https://nodejs.org/en/docs/guides/backpressuring-in-streams/. Setting this value to\n1 means that changes in volume will be more instant.","optional":true,"default":12,"type":[[["number"]]]}],"meta":{"line":7,"file":"PlayInterface.js","path":"src/client/voice/util"}},{"name":"StreamType","description":"An option passed as part of `StreamOptions` specifying the type of the stream.\n* `unknown`: The default type, streams/input will be passed through to ffmpeg before encoding.\nWill play most streams.\n* `converted`: Play a stream of 16bit signed stereo PCM data, skipping ffmpeg.\n* `opus`: Play a stream of opus packets, skipping ffmpeg. You lose the ability to alter volume.\n* `ogg/opus`: Play an ogg file with the opus encoding, skipping ffmpeg. You lose the ability to alter volume.\n* `webm/opus`: Play a webm file with opus audio, skipping ffmpeg. You lose the ability to alter volume.","type":[[["string"]]],"meta":{"line":23,"file":"PlayInterface.js","path":"src/client/voice/util"}},{"name":"ShardingManagerMode","description":"The mode to spawn shards with for a {@link ShardingManager}: either \"process\" to use child processes, or\n\"worker\" to use workers. The \"worker\" mode relies on the experimental\n[Worker threads](https://nodejs.org/api/worker_threads.html) functionality that is present in Node v10.5.0 or\nnewer. Node must be started with the `--experimental-worker` flag to expose it.","type":[[["Object"]]],"meta":{"line":21,"file":"ShardingManager.js","path":"src/sharding"}},{"name":"ChannelResolvable","description":"Data that can be resolved to give a Channel object. This can be:\n* A Channel object\n* A Snowflake","type":[[["Channel"]],[["Snowflake"]]],"meta":{"line":81,"file":"ChannelStore.js","path":"src/stores"}},{"name":"GuildChannelResolvable","description":"Data that can be resolved to give a Guild Channel object. This can be:\n* A GuildChannel object\n* A Snowflake","type":[[["GuildChannel"]],[["Snowflake"]]],"meta":{"line":25,"file":"GuildChannelStore.js","path":"src/stores"}},{"name":"EmojiResolvable","description":"Data that can be resolved into an GuildEmoji object. This can be:\n* A custom emoji ID\n* A GuildEmoji object\n* A ReactionEmoji object","type":[[["Snowflake"]],[["GuildEmoji"]],[["ReactionEmoji"]]],"meta":{"line":65,"file":"GuildEmojiStore.js","path":"src/stores"}},{"name":"EmojiIdentifierResolvable","description":"Data that can be resolved to give an emoji identifier. This can be:\n* The unicode representation of an emoji\n* An EmojiResolvable","type":[[["string"]],[["EmojiResolvable"]]],"meta":{"line":93,"file":"GuildEmojiStore.js","path":"src/stores"}},{"name":"GuildMemberResolvable","description":"Data that resolves to give a GuildMember object. This can be:\n* A GuildMember object\n* A User resolvable","type":[[["GuildMember"]],[["UserResolvable"]]],"meta":{"line":23,"file":"GuildMemberStore.js","path":"src/stores"}},{"name":"FetchMemberOptions","description":"Options used to fetch a single member from a guild.","type":[[["Object"]]],"props":[{"name":"user","description":"The user to fetch","type":[[["UserResolvable"]]]},{"name":"cache","description":"Whether or not to cache the fetched member","optional":true,"default":true,"type":[[["boolean"]]]}],"meta":{"line":55,"file":"GuildMemberStore.js","path":"src/stores"}},{"name":"FetchMembersOptions","description":"Options used to fetch multiple members from a guild.","type":[[["Object"]]],"props":[{"name":"query","description":"Limit fetch to members with similar usernames","optional":true,"default":"''","type":[[["string"]]]},{"name":"limit","description":"Maximum number of members to request","optional":true,"default":0,"type":[[["number"]]]}],"meta":{"line":62,"file":"GuildMemberStore.js","path":"src/stores"}},{"name":"GuildResolvable","description":"Data that resolves to give a Guild object. This can be:\n* A Guild object\n* A GuildChannel object\n* A Role object\n* A Snowflake","type":[[["Guild"]],[["GuildChannel"]],[["GuildMember"]],[["Role"]],[["Snowflake"]]],"meta":{"line":20,"file":"GuildStore.js","path":"src/stores"}},{"name":"ChannelLogsQueryOptions","description":"The parameters to pass in when requesting previous messages from a channel. `around`, `before` and\n`after` are mutually exclusive. All the parameters are optional.","type":[[["Object"]]],"props":[{"name":"limit","description":"Number of messages to acquire","optional":true,"default":50,"type":[[["number"]]]},{"name":"before","description":"ID of a message to get the messages that were posted before it","optional":true,"type":[[["Snowflake"]]]},{"name":"after","description":"ID of a message to get the messages that were posted after it","optional":true,"type":[[["Snowflake"]]]},{"name":"around","description":"ID of a message to get the messages that were posted around it","optional":true,"type":[[["Snowflake"]]]}],"meta":{"line":28,"file":"MessageStore.js","path":"src/stores"}},{"name":"MessageResolvable","description":"Data that can be resolved to a Message object. This can be:\n* A Message\n* A Snowflake","type":[[["Message"]],[["Snowflake"]]],"meta":{"line":85,"file":"MessageStore.js","path":"src/stores"}},{"name":"PresenceResolvable","description":"Data that can be resolved to a Presence object. This can be:\n* A Presence\n* A UserResolvable\n* A Snowflake","type":[[["Presence"]],[["UserResolvable"]],[["Snowflake"]]],"meta":{"line":20,"file":"PresenceStore.js","path":"src/stores"}},{"name":"MessageReactionResolvable","description":"Data that can be resolved to a MessageReaction object. This can be:\n* A MessageReaction\n* A Snowflake","type":[[["MessageReaction"]],[["Snowflake"]]],"meta":{"line":20,"file":"ReactionStore.js","path":"src/stores"}},{"name":"RoleResolvable","description":"Data that can be resolved to a Role object. This can be:\n* A Role\n* A Snowflake","type":[[["Role"]],[["Snowflake"]]],"meta":{"line":50,"file":"RoleStore.js","path":"src/stores"}},{"name":"UserResolvable","description":"Data that resolves to give a User object. This can be:\n* A User object\n* A Snowflake\n* A Message object (resolves to the message author)\n* A GuildMember object","type":[[["User"]],[["Snowflake"]],[["Message"]],[["GuildMember"]]],"meta":{"line":17,"file":"UserStore.js","path":"src/stores"}},{"name":"MessageTarget","description":"A target for a message.","type":[[["TextChannel"]],[["DMChannel"]],[["User"]],[["GuildMember"]],[["Webhook"]],[["WebhookClient"]]],"meta":{"line":336,"file":"APIMessage.js","path":"src/structures"}},{"name":"MessageAdditions","description":"Additional items that can be sent with a message.","type":[[["MessageEmbed"]],[["MessageAttachment"]],[["Array","<("],["MessageEmbed","|"],["MessageAttachment",")>"]]],"meta":{"line":341,"file":"APIMessage.js","path":"src/structures"}},{"name":"ClientAsset","description":"Asset data.","type":[[["Object"]]],"props":[{"name":"id","description":"The asset ID","type":[[["Snowflake"]]]},{"name":"name","description":"The asset name","type":[[["string"]]]},{"name":"type","description":"The asset type","type":[[["string"]]]}],"meta":{"line":120,"file":"ClientApplication.js","path":"src/structures"}},{"name":"PresenceData","description":"Data resembling a raw Discord presence.","type":[[["Object"]]],"props":[{"name":"status","description":"Status of the user","optional":true,"type":[[["PresenceStatusData"]]]},{"name":"afk","description":"Whether the user is AFK","optional":true,"type":[[["boolean"]]]},{"name":"activity","description":"Activity the user is playing","optional":true,"type":[[["Object"]]]},{"name":"activity.application","description":"An application object or application id","optional":true,"type":[[["Object"]],[["string"]]]},{"name":"activity.application.id","description":"The id of the application","optional":true,"type":[[["string"]]]},{"name":"activity.name","description":"Name of the activity","optional":true,"type":[[["string"]]]},{"name":"activity.type","description":"Type of the activity","optional":true,"type":[[["ActivityType"]],[["number"]]]},{"name":"activity.url","description":"Stream url","optional":true,"type":[[["string"]]]},{"name":"shardID","description":"Shard Id(s) to have the activity set on","optional":true,"type":[[["number"]],[["Array","<"],["number",">"]]]}],"meta":{"line":83,"file":"ClientUser.js","path":"src/structures"}},{"name":"PresenceStatusData","description":"A user's status. Must be one of:\n* `online`\n* `idle`\n* `invisible`\n* `dnd` (do not disturb)","type":[[["string"]]],"meta":{"line":111,"file":"ClientUser.js","path":"src/structures"}},{"name":"ActivityOptions","description":"Options for setting an activity","type":[[["Object"]]],"props":[{"name":"url","description":"Twitch stream URL","optional":true,"type":[[["string"]]]},{"name":"type","description":"Type of the activity","optional":true,"type":[[["ActivityType"]],[["number"]]]},{"name":"shardID","description":"Shard Id(s) to have the activity set on","optional":true,"type":[[["number"]],[["Array","<"],["number",">"]]]}],"meta":{"line":135,"file":"ClientUser.js","path":"src/structures"}},{"name":"Features","description":"An array of enabled guild features, here are the possible values:\n* ANIMATED_ICON\n<<<<<<< HEAD\n* COMMERCE\n* DISCOVERABLE\n* FEATURABLE\n* LURKABLE\n* PARTNERED\n* NEWS\n=======\n>>>>>>> upstream/master\n* BANNER\n* COMMERCE\n* DISCOVERABLE\n* FEATURABLE\n* INVITE_SPLASH\n* PUBLIC\n* NEWS\n* PARTNERED\n* VANITY_URL\n* VERIFIED\n* VIP_REGIONS","type":[[["string"]]],"meta":{"line":150,"file":"Guild.js","path":"src/structures"}},{"name":"PremiumTier","description":"The type of premium tier:\n* 0: NONE\n* 1: TIER_1\n* 2: TIER_2\n* 3: TIER_3","type":[[["number"]]],"meta":{"line":212,"file":"Guild.js","path":"src/structures"}},{"name":"BanInfo","description":"An object containing information about a guild member's ban.","type":[[["Object"]]],"props":[{"name":"user","description":"User that was banned","type":[[["User"]]]},{"name":"reason","description":"Reason the user was banned","nullable":true,"type":[[["string"]]]}],"meta":{"line":559,"file":"Guild.js","path":"src/structures"}},{"name":"IntegrationData","description":"The data for creating an integration.","type":[[["Object"]]],"props":[{"name":"id","description":"The integration id","type":[[["string"]]]},{"name":"type","description":"The integration type","type":[[["string"]]]}],"meta":{"line":600,"file":"Guild.js","path":"src/structures"}},{"name":"GuildEmbedData","description":"The Guild Embed object","type":[[["Object"]]],"props":[{"name":"enabled","description":"Whether the embed is enabled","type":[[["boolean"]]]},{"name":"channel","description":"The embed channel","nullable":true,"type":[[["GuildChannel"]]]}],"meta":{"line":694,"file":"Guild.js","path":"src/structures"}},{"name":"GuildEditData","description":"The data for editing a guild.","type":[[["Object"]]],"props":[{"name":"name","description":"The name of the guild","optional":true,"type":[[["string"]]]},{"name":"region","description":"The region of the guild","optional":true,"type":[[["string"]]]},{"name":"verificationLevel","description":"The verification level of the guild","optional":true,"type":[[["number"]]]},{"name":"explicitContentFilter","description":"The level of the explicit content filter","optional":true,"type":[[["number"]]]},{"name":"afkChannel","description":"The AFK channel of the guild","optional":true,"type":[[["ChannelResolvable"]]]},{"name":"systemChannel","description":"The system channel of the guild","optional":true,"type":[[["ChannelResolvable"]]]},{"name":"afkTimeout","description":"The AFK timeout of the guild","optional":true,"type":[[["number"]]]},{"name":"icon","description":"The icon of the guild","optional":true,"type":[[["Base64Resolvable"]]]},{"name":"owner","description":"The owner of the guild","optional":true,"type":[[["GuildMemberResolvable"]]]},{"name":"splash","description":"The splash screen of the guild","optional":true,"type":[[["Base64Resolvable"]]]},{"name":"banner","description":"The banner of the guild","optional":true,"type":[[["Base64Resolvable"]]]},{"name":"defaultMessageNotifications","description":"The default message notifications","optional":true,"type":[[["DefaultMessageNotifications"]],[["number"]]]},{"name":"systemChannelFlags","description":"The system channel flags of the guild","optional":true,"type":[[["SystemChannelFlagsResolvable"]]]}],"meta":{"line":777,"file":"Guild.js","path":"src/structures"}},{"name":"ChannelPosition","description":"The data needed for updating a channel's position.","type":[[["Object"]]],"props":[{"name":"channel","description":"Channel to update","type":[[["ChannelResolvable"]]]},{"name":"position","description":"New position for the channel","type":[[["number"]]]}],"meta":{"line":1021,"file":"Guild.js","path":"src/structures"}},{"name":"GuildRolePosition","description":"The data needed for updating a guild role's position","type":[[["Object"]]],"props":[{"name":"role","description":"The ID of the role","type":[[["RoleResolveable"]]]},{"name":"position","description":"The position to update","type":[[["number"]]]}],"meta":{"line":1051,"file":"Guild.js","path":"src/structures"}},{"name":"AuditLogTargetType","description":"The target type of an entry, e.g. `GUILD`. Here are the available types:\n* GUILD\n* CHANNEL\n* USER\n* ROLE\n* INVITE\n* WEBHOOK\n* EMOJI\n* MESSAGE","type":[[["string"]]],"meta":{"line":9,"file":"GuildAuditLogs.js","path":"src/structures"}},{"name":"AuditLogAction","description":"The action of an entry. Here are the available actions:\n* ALL: null\n* GUILD_UPDATE: 1\n* CHANNEL_CREATE: 10\n* CHANNEL_UPDATE: 11\n* CHANNEL_DELETE: 12\n* CHANNEL_OVERWRITE_CREATE: 13\n* CHANNEL_OVERWRITE_UPDATE: 14\n* CHANNEL_OVERWRITE_DELETE: 15\n* MEMBER_KICK: 20\n* MEMBER_PRUNE: 21\n* MEMBER_BAN_ADD: 22\n* MEMBER_BAN_REMOVE: 23\n* MEMBER_UPDATE: 24\n* MEMBER_ROLE_UPDATE: 25\n* MEMBER_MOVE: 26\n* MEMBER_DISCONNECT: 27\n* BOT_ADD: 28,\n* ROLE_CREATE: 30\n* ROLE_UPDATE: 31\n* ROLE_DELETE: 32\n* INVITE_CREATE: 40\n* INVITE_UPDATE: 41\n* INVITE_DELETE: 42\n* WEBHOOK_CREATE: 50\n* WEBHOOK_UPDATE: 51\n* WEBHOOK_DELETE: 52\n* EMOJI_CREATE: 60\n* EMOJI_UPDATE: 61\n* EMOJI_DELETE: 62\n* MESSAGE_DELETE: 72\n* MESSAGE_BULK_DELETE: 73\n* MESSAGE_PIN: 74\n* MESSAGE_UNPIN: 75\n* INTEGRATION_CREATE: 80\n* INTEGRATION_UPDATE: 81\n* INTEGRATION_DELETE: 82","type":[[["number"]],[["string"]]],"meta":{"line":40,"file":"GuildAuditLogs.js","path":"src/structures"}},{"name":"AuditLogEntryTarget","description":"The target of an entry. It can be one of:\n* A guild\n* A user\n* A role\n* An emoji\n* An invite\n* A webhook\n* An object with an id key if target was deleted\n* An object where the keys represent either the new value or the old value","type":[[["Object"]],[["Guild"]],[["User"]],[["Role"]],[["GuildEmoji"]],[["Invite"]],[["Webhook"]]],"meta":{"line":164,"file":"GuildAuditLogs.js","path":"src/structures"}},{"name":"AuditLogActionType","description":"The action type of an entry, e.g. `CREATE`. Here are the available types:\n* CREATE\n* DELETE\n* UPDATE\n* ALL","type":[[["string"]]],"meta":{"line":194,"file":"GuildAuditLogs.js","path":"src/structures"}},{"name":"AuditLogChange","description":"An entry in the audit log representing a specific change.","type":[[["object"]]],"props":[{"name":"key","description":"The property that was changed, e.g. `nick` for nickname changes","type":[[["string"]]]},{"name":"old","description":"The old value of the change, e.g. for nicknames, the old nickname","optional":true,"type":[["*"]]},{"name":"new","description":"The new value of the change, e.g. for nicknames, the new nickname","optional":true,"type":[["*"]]}],"meta":{"line":290,"file":"GuildAuditLogs.js","path":"src/structures"}},{"name":"ChannelData","description":"The data for a guild channel.","type":[[["Object"]]],"props":[{"name":"name","description":"The name of the channel","optional":true,"type":[[["string"]]]},{"name":"position","description":"The position of the channel","optional":true,"type":[[["number"]]]},{"name":"topic","description":"The topic of the text channel","optional":true,"type":[[["string"]]]},{"name":"nsfw","description":"Whether the channel is NSFW","optional":true,"type":[[["boolean"]]]},{"name":"bitrate","description":"The bitrate of the voice channel","optional":true,"type":[[["number"]]]},{"name":"userLimit","description":"The user limit of the voice channel","optional":true,"type":[[["number"]]]},{"name":"parentID","description":"The parent ID of the channel","optional":true,"type":[[["Snowflake"]]]},{"name":"lockPermissions","description":"Lock the permissions of the channel to what the parent's permissions are","optional":true,"type":[[["boolean"]]]},{"name":"permissionOverwrites","description":"Permission overwrites for the channel","optional":true,"type":[[["Array","<"],["OverwriteResolvable",">"]],[["Collection","<"],["Snowflake",", "],["OverwriteResolvable",">"]]]},{"name":"rateLimitPerUser","description":"The ratelimit per user for the channel in seconds","optional":true,"type":[[["number"]]]}],"meta":{"line":285,"file":"GuildChannel.js","path":"src/structures"}},{"name":"GuildEmojiEditData","description":"Data for editing an emoji.","type":[[["Object"]]],"props":[{"name":"name","description":"The name of the emoji","optional":true,"type":[[["string"]]]},{"name":"roles","description":"Roles to restrict emoji to","optional":true,"type":[[["Collection","<"],["Snowflake",", "],["Role",">"]],[["Array","<"],["RoleResolvable",">"]]]}],"meta":{"line":101,"file":"GuildEmoji.js","path":"src/structures"}},{"name":"GuildMemberEditData","description":"The data for editing a guild member.","type":[[["Object"]]],"props":[{"name":"nick","description":"The nickname to set for the member","optional":true,"type":[[["string"]]]},{"name":"roles","description":"The roles or role IDs to apply","optional":true,"type":[[["Collection","<"],["Snowflake",", "],["Role",">"]],[["Array","<"],["RoleResolvable",">"]]]},{"name":"mute","description":"Whether or not the member should be muted","optional":true,"type":[[["boolean"]]]},{"name":"deaf","description":"Whether or not the member should be deafened","optional":true,"type":[[["boolean"]]]},{"name":"channel","description":"Channel to move member to (if they are connected to voice), or `null`\nif you want to kick them from voice","optional":true,"type":[[["ChannelResolvable"]],[["null"]]]}],"meta":{"line":266,"file":"GuildMember.js","path":"src/structures"}},{"name":"IntegrationAccount","description":"The information account for an integration","type":[[["Object"]]],"props":[{"name":"id","description":"The id of the account","type":[[["string"]]]},{"name":"name","description":"The name of the account","type":[[["string"]]]}],"meta":{"line":5,"file":"Integration.js","path":"src/structures"}},{"name":"IntegrationEditData","description":"The data for editing an integration.","type":[[["Object"]]],"props":[{"name":"expireBehavior","description":"The new behaviour of expiring subscribers","optional":true,"type":[[["number"]]]},{"name":"expireGracePeriod","description":"The new grace period before expiring subscribers","optional":true,"type":[[["number"]]]}],"meta":{"line":109,"file":"Integration.js","path":"src/structures"}},{"name":"CollectorFilter","description":"Filter to be applied to the collector.","type":[[["function"]]],"params":[{"name":"args","description":"Any arguments received by the listener","variable":true,"type":[["*"]]},{"name":"collection","description":"The items collected by this collector","type":[[["Collection"]]]}],"returns":[[["boolean"]]],"meta":{"line":7,"file":"Collector.js","path":"src/structures/interfaces"}},{"name":"CollectorOptions","description":"Options to be applied to the collector.","type":[[["Object"]]],"props":[{"name":"time","description":"How long to run the collector for in milliseconds","optional":true,"type":[[["number"]]]},{"name":"idle","description":"How long to stop the collector after inactivity in milliseconds","optional":true,"type":[[["number"]]]},{"name":"dispose","description":"Whether to dispose data when it's deleted","optional":true,"default":false,"type":[[["boolean"]]]}],"meta":{"line":15,"file":"Collector.js","path":"src/structures/interfaces"}},{"name":"MessageOptions","description":"Options provided when sending or editing a message.","type":[[["Object"]]],"props":[{"name":"tts","description":"Whether or not the message should be spoken aloud","optional":true,"default":false,"type":[[["boolean"]]]},{"name":"nonce","description":"The nonce for the message","optional":true,"default":"''","type":[[["string"]]]},{"name":"content","description":"The content for the message","optional":true,"default":"''","type":[[["string"]]]},{"name":"embed","description":"An embed for the message\n(see [here](https://discordapp.com/developers/docs/resources/channel#embed-object) for more details)","optional":true,"type":[[["MessageEmbed"]],[["Object"]]]},{"name":"disableEveryone","description":"Whether or not @everyone and @here\nshould be replaced with plain-text","optional":true,"default":"this.client.options.disableEveryone","type":[[["boolean"]]]},{"name":"files","description":"Files to send with the message","optional":true,"type":[[["Array","<"],["FileOptions",">"]],[["Array","<"],["BufferResolvable",">"]]]},{"name":"code","description":"Language for optional codeblock formatting to apply","optional":true,"type":[[["string"]],[["boolean"]]]},{"name":"split","description":"Whether or not the message should be split into multiple messages if\nit exceeds the character limit. If an object is provided, these are the options for splitting the message","optional":true,"default":false,"type":[[["boolean"]],[["SplitOptions"]]]},{"name":"reply","description":"User to reply to (prefixes the message with a mention, except in DMs)","optional":true,"type":[[["UserResolvable"]]]}],"meta":{"line":52,"file":"TextBasedChannel.js","path":"src/structures/interfaces"}},{"name":"FileOptions","type":[[["Object"]]],"props":[{"name":"attachment","description":"File to attach","type":[[["BufferResolvable"]]]},{"name":"name","description":"Filename of the attachment","optional":true,"default":"'file.jpg'","type":[[["string"]]]}],"meta":{"line":69,"file":"TextBasedChannel.js","path":"src/structures/interfaces"}},{"name":"SplitOptions","description":"Options for splitting a message.","type":[[["Object"]]],"props":[{"name":"maxLength","description":"Maximum character length per message piece","optional":true,"default":2000,"type":[[["number"]]]},{"name":"char","description":"Character to split the message with","optional":true,"default":"'\\n'","type":[[["string"]]]},{"name":"prepend","description":"Text to prepend to every piece except the first","optional":true,"default":"''","type":[[["string"]]]},{"name":"append","description":"Text to append to every piece except the last","optional":true,"default":"''","type":[[["string"]]]}],"meta":{"line":75,"file":"TextBasedChannel.js","path":"src/structures/interfaces"}},{"name":"AwaitMessagesOptions","description":"An object containing the same properties as CollectorOptions, but a few more:","type":[[["MessageCollectorOptions"]]],"props":[{"name":"errors","description":"Stop/end reasons that cause the promise to reject","optional":true,"type":[[["Array","<"],["string",">"]]]}],"meta":{"line":253,"file":"TextBasedChannel.js","path":"src/structures/interfaces"}},{"name":"TargetUser","description":"The type of the target user:\n* 1: STREAM","type":[[["number"]]],"meta":{"line":79,"file":"Invite.js","path":"src/structures"}},{"name":"MessageReference","description":"Reference data sent in a crossposted message.","type":[[["Object"]]],"props":[{"name":"channelID","description":"ID of the channel the message was crossposted from","type":[[["string"]]]},{"name":"guildID","description":"ID of the guild the message was crossposted from","nullable":true,"type":[[["string"]]]},{"name":"messageID","description":"ID of the message that was crossposted","nullable":true,"type":[[["string"]]]}],"meta":{"line":185,"file":"Message.js","path":"src/structures"}},{"name":"AwaitReactionsOptions","description":"An object containing the same properties as CollectorOptions, but a few more:","type":[[["ReactionCollectorOptions"]]],"props":[{"name":"errors","description":"Stop/end reasons that cause the promise to reject","optional":true,"type":[[["Array","<"],["string",">"]]]}],"meta":{"line":323,"file":"Message.js","path":"src/structures"}},{"name":"MessageEditOptions","description":"Options that can be passed into editMessage.","type":[[["Object"]]],"props":[{"name":"content","description":"Content to be edited","optional":true,"type":[[["string"]]]},{"name":"embed","description":"An embed to be added/edited","optional":true,"type":[[["Object"]]]},{"name":"code","description":"Language for optional codeblock formatting to apply","optional":true,"type":[[["string"]],[["boolean"]]]}],"meta":{"line":394,"file":"Message.js","path":"src/structures"}},{"name":"MessageCollectorOptions","type":[[["CollectorOptions"]]],"props":[{"name":"max","description":"The maximum amount of messages to collect","type":[[["number"]]]},{"name":"maxProcessed","description":"The maximum amount of messages to process","type":[[["number"]]]}],"meta":{"line":6,"file":"MessageCollector.js","path":"src/structures"}},{"name":"EmbedField","type":[[["Object"]]],"props":[{"name":"name","description":"The name of this field","type":[[["string"]]]},{"name":"value","description":"The value of this field","type":[[["string"]]]},{"name":"inline","description":"If this field will be displayed inline","type":[[["boolean"]]]}],"meta":{"line":56,"file":"MessageEmbed.js","path":"src/structures"}},{"name":"CrosspostedChannel","description":"Crossposted channel data.","type":[[["Object"]]],"props":[{"name":"channelID","description":"ID of the mentioned channel","type":[[["string"]]]},{"name":"guildID","description":"ID of the guild that has the channel","type":[[["string"]]]},{"name":"type","description":"Type of the channel","type":[[["string"]]]},{"name":"name","description":"The name of the channel","type":[[["string"]]]}],"meta":{"line":94,"file":"MessageMentions.js","path":"src/structures"}},{"name":"OverwriteType","description":"The type of a permission overwrite. It can be one of:\n* member\n* role","type":[[["string"]]],"meta":{"line":31,"file":"PermissionOverwrites.js","path":"src/structures"}},{"name":"PermissionOverwriteOption","description":"An object mapping permission flags to `true` (enabled), `null` (unset) or `false` (disabled).\n```js\n{\n 'SEND_MESSAGES': true,\n 'EMBED_LINKS': null,\n 'ATTACH_FILES': false,\n}\n```","type":[[["Object"]]],"meta":{"line":93,"file":"PermissionOverwrites.js","path":"src/structures"}},{"name":"ResolvedOverwriteOptions","type":[[["object"]]],"props":[{"name":"allow","description":"The allowed permissions","type":[[["Permissions"]]]},{"name":"deny","description":"The denied permissions","type":[[["Permissions"]]]}],"meta":{"line":105,"file":"PermissionOverwrites.js","path":"src/structures"}},{"name":"RawOverwriteData","description":"The raw data for a permission overwrite","type":[[["Object"]]],"props":[{"name":"id","description":"The id of the overwrite","type":[[["Snowflake"]]]},{"name":"allow","description":"The permissions to allow","type":[[["number"]]]},{"name":"deny","description":"The permissions to deny","type":[[["number"]]]},{"name":"type","description":"The type of this OverwriteData","type":[[["OverwriteType"]]]}],"meta":{"line":139,"file":"PermissionOverwrites.js","path":"src/structures"}},{"name":"OverwriteResolvable","description":"Data that can be resolved into {@link RawOverwriteData}","type":[[["PermissionOverwrites"]],[["OverwriteData"]]],"meta":{"line":148,"file":"PermissionOverwrites.js","path":"src/structures"}},{"name":"OverwriteData","description":"Data that can be used for a permission overwrite","type":[[["Object"]]],"props":[{"name":"id","description":"Member or role this overwrite is for","type":[[["GuildMemberResolvable"]],[["RoleResolvable"]]]},{"name":"allow","description":"The permissions to allow","optional":true,"type":[[["PermissionResolvable"]]]},{"name":"deny","description":"The permissions to deny","optional":true,"type":[[["PermissionResolvable"]]]},{"name":"type","description":"The type of this OverwriteData","optional":true,"type":[[["OverwriteType"]]]}],"meta":{"line":153,"file":"PermissionOverwrites.js","path":"src/structures"}},{"name":"MessageActivity","description":"Activity sent in a message.","type":[[["Object"]]],"props":[{"name":"partyID","description":"Id of the party represented in activity","optional":true,"type":[[["string"]]]},{"name":"type","description":"Type of activity sent","optional":true,"type":[[["number"]]]}],"meta":{"line":8,"file":"Presence.js","path":"src/structures"}},{"name":"PresenceStatus","description":"The status of this presence:\n* **`online`** - user is online\n* **`idle`** - user is AFK\n* **`offline`** - user is offline or invisible\n* **`dnd`** - user is in Do Not Disturb","type":[[["string"]]],"meta":{"line":15,"file":"Presence.js","path":"src/structures"}},{"name":"ClientPresenceStatus","description":"The status of this presence:\n* **`online`** - user is online\n* **`idle`** - user is AFK\n* **`dnd`** - user is in Do Not Disturb","type":[[["string"]]],"meta":{"line":24,"file":"Presence.js","path":"src/structures"}},{"name":"ReactionCollectorOptions","type":[[["CollectorOptions"]]],"props":[{"name":"max","description":"The maximum total amount of reactions to collect","type":[[["number"]]]},{"name":"maxEmojis","description":"The maximum number of emojis to collect","type":[[["number"]]]},{"name":"maxUsers","description":"The maximum number of users to react","type":[[["number"]]]}],"meta":{"line":7,"file":"ReactionCollector.js","path":"src/structures"}},{"name":"RoleData","description":"The data for a role.","type":[[["Object"]]],"props":[{"name":"name","description":"The name of the role","optional":true,"type":[[["string"]]]},{"name":"color","description":"The color of the role, either a hex string or a base 10 number","optional":true,"type":[[["ColorResolvable"]]]},{"name":"hoist","description":"Whether or not the role should be hoisted","optional":true,"type":[[["boolean"]]]},{"name":"position","description":"The position of the role","optional":true,"type":[[["number"]]]},{"name":"permissions","description":"The permissions of the role","optional":true,"type":[[["PermissionResolvable"]]]},{"name":"mentionable","description":"Whether or not the role should be mentionable","optional":true,"type":[[["boolean"]]]}],"meta":{"line":157,"file":"Role.js","path":"src/structures"}},{"name":"WebhookMessageOptions","description":"Options that can be passed into send.","type":[[["Object"]]],"props":[{"name":"username","description":"Username override for the message","optional":true,"default":"this.name","type":[[["string"]]]},{"name":"avatarURL","description":"Avatar URL override for the message","optional":true,"type":[[["string"]]]},{"name":"tts","description":"Whether or not the message should be spoken aloud","optional":true,"default":false,"type":[[["boolean"]]]},{"name":"nonce","description":"The nonce for the message","optional":true,"default":"''","type":[[["string"]]]},{"name":"embeds","description":"An array of embeds for the message\n(see [here](https://discordapp.com/developers/docs/resources/channel#embed-object) for more details)","optional":true,"type":[[["Array","<"],["Object",">"]]]},{"name":"disableEveryone","description":"Whether or not @everyone and @here\nshould be replaced with plain-text","optional":true,"default":"this.client.options.disableEveryone","type":[[["boolean"]]]},{"name":"files","description":"Files to send with the message","optional":true,"type":[[["Array","<"],["FileOptions",">"]],[["Array","<"],["string",">"]]]},{"name":"code","description":"Language for optional codeblock formatting to apply","optional":true,"type":[[["string"]],[["boolean"]]]},{"name":"split","description":"Whether or not the message should be split into multiple messages if\nit exceeds the character limit. If an object is provided, these are the options for splitting the message.","optional":true,"default":false,"type":[[["boolean"]],[["SplitOptions"]]]}],"meta":{"line":79,"file":"Webhook.js","path":"src/structures"}},{"name":"BitFieldResolvable","description":"Data that can be resolved to give a bitfield. This can be:\n* A string (see {@link BitField.FLAGS})\n* A bit number\n* An instance of BitField\n* An Array of BitFieldResolvable","type":[[["string"]],[["number"]],[["BitField"]],[["Array","<"],["BitFieldResolvable",">"]]],"meta":{"line":131,"file":"BitField.js","path":"src/util"}},{"name":"ClientOptions","description":"Options for a client.","type":[[["Object"]]],"props":[{"name":"shards","description":"ID of the shard to run, or an array of shard IDs. If not specified,\nthe client will spawn {@link ClientOptions#shardCount} shards. If set to `auto`, it will fetch the\nrecommended amount of shards from Discord and spawn that amount","optional":true,"type":[[["number"]],[["Array","<"],["number",">"]],[["string"]]]},{"name":"shardCount","description":"The total amount of shards used by all processes of this bot\n(e.g. recommended shard count, shard count of the ShardingManager)","optional":true,"default":1,"type":[[["number"]]]},{"name":"messageCacheMaxSize","description":"Maximum number of messages to cache per channel\n(-1 or Infinity for unlimited - don't do this without message sweeping, otherwise memory usage will climb\nindefinitely)","optional":true,"default":200,"type":[[["number"]]]},{"name":"messageCacheLifetime","description":"How long a message should stay in the cache until it is considered\nsweepable (in seconds, 0 for forever)","optional":true,"default":0,"type":[[["number"]]]},{"name":"messageSweepInterval","description":"How frequently to remove messages from the cache that are older than\nthe message cache lifetime (in seconds, 0 for never)","optional":true,"default":0,"type":[[["number"]]]},{"name":"fetchAllMembers","description":"Whether to cache all guild members and users upon startup, as well as\nupon joining a guild (should be avoided whenever possible)","optional":true,"default":false,"type":[[["boolean"]]]},{"name":"disableEveryone","description":"Default value for {@link MessageOptions#disableEveryone}","optional":true,"default":false,"type":[[["boolean"]]]},{"name":"partials","description":"Structures allowed to be partial. This means events can be emitted even when\nthey're missing all the data for a particular structure. See the \"Partials\" topic listed in the sidebar for some\nimportant usage information, as partials require you to put checks in place when handling data.","optional":true,"type":[[["Array","<"],["PartialType",">"]]]},{"name":"restWsBridgeTimeout","description":"Maximum time permitted between REST responses and their\ncorresponding websocket events","optional":true,"default":5000,"type":[[["number"]]]},{"name":"restTimeOffset","description":"Extra time in millseconds to wait before continuing to make REST\nrequests (higher values will reduce rate-limiting errors on bad connections)","optional":true,"default":500,"type":[[["number"]]]},{"name":"restRequestTimeout","description":"Time to wait before cancelling a REST request, in milliseconds","optional":true,"default":15000,"type":[[["number"]]]},{"name":"restSweepInterval","description":"How frequently to delete inactive request buckets, in seconds\n(or 0 for never)","optional":true,"default":60,"type":[[["number"]]]},{"name":"retryLimit","description":"How many times to retry on 5XX errors (Infinity for indefinite amount of retries)","optional":true,"default":1,"type":[[["number"]]]},{"name":"presence","description":"Presence data to use upon login","optional":true,"type":[[["PresenceData"]]]},{"name":"disabledEvents","description":"An array of disabled websocket events. Events in this array will not be\nprocessed, potentially resulting in performance improvements for larger bots. Only disable events you are\n100% certain you don't need, as many are important, but not obviously so. The safest one to disable with the\nmost impact is typically `TYPING_START`.","optional":true,"type":[[["Array","<"],["WSEventType",">"]]]},{"name":"ws","description":"Options for the WebSocket","optional":true,"type":[[["WebsocketOptions"]]]},{"name":"http","description":"HTTP options","optional":true,"type":[[["HTTPOptions"]]]}],"meta":{"line":7,"file":"Constants.js","path":"src/util"}},{"name":"WebsocketOptions","description":"WebSocket options (these are left as snake_case to match the API)","type":[[["Object"]]],"props":[{"name":"large_threshold","description":"Number of members in a guild to be considered large","optional":true,"default":250,"type":[[["number"]]]},{"name":"compress","description":"Whether to compress data sent on the connection\n(defaults to `false` for browsers)","optional":true,"default":false,"type":[[["boolean"]]]}],"meta":{"line":60,"file":"Constants.js","path":"src/util"}},{"name":"HTTPOptions","description":"HTTP options","type":[[["Object"]]],"props":[{"name":"version","description":"API version to use","optional":true,"default":7,"type":[[["number"]]]},{"name":"api","description":"Base url of the API","optional":true,"default":"'https://discordapp.com/api'","type":[[["string"]]]},{"name":"cdn","description":"Base url of the CDN","optional":true,"default":"'https://cdn.discordapp.com'","type":[[["string"]]]},{"name":"invite","description":"Base url of invites","optional":true,"default":"'https://discord.gg'","type":[[["string"]]]}],"meta":{"line":78,"file":"Constants.js","path":"src/util"}},{"name":"ImageURLOptions","description":"Options for Image URLs.","type":[[["Object"]]],"props":[{"name":"format","description":"One of `webp`, `png`, `jpg`, `gif`. If no format is provided,\nit will be `gif` for animated avatars or otherwise `webp`","optional":true,"type":[[["string"]]]},{"name":"size","description":"One of `16`, `32`, `64`, `128`, `256`, `512`, `1024`, `2048`","optional":true,"type":[[["number"]]]}],"meta":{"line":118,"file":"Constants.js","path":"src/util"}},{"name":"Status","description":"The current status of the client. Here are the available statuses:\n* READY: 0\n* CONNECTING: 1\n* RECONNECTING: 2\n* IDLE: 3\n* NEARLY: 4\n* DISCONNECTED: 5\n* WAITING_FOR_GUILDS: 6\n* IDENTIFYING: 7\n* RESUMING: 8","type":[[["number"]]],"meta":{"line":158,"file":"Constants.js","path":"src/util"}},{"name":"VoiceStatus","description":"The current status of a voice connection. Here are the available statuses:\n* CONNECTED: 0\n* CONNECTING: 1\n* AUTHENTICATING: 2\n* RECONNECTING: 3\n* DISCONNECTED: 4","type":[[["number"]]],"meta":{"line":183,"file":"Constants.js","path":"src/util"}},{"name":"PartialType","description":"The type of Structure allowed to be a partial:\n* USER\n* CHANNEL (only affects DMChannels)\n* GUILD_MEMBER\n* MESSAGE\n<warn>Partials require you to put checks in place when handling data, read the Partials topic listed in the\nsidebar for more information.</warn>","type":[[["string"]]],"meta":{"line":291,"file":"Constants.js","path":"src/util"}},{"name":"WSEventType","description":"The type of a websocket message event, e.g. `MESSAGE_CREATE`. Here are the available events:\n* READY\n* RESUMED\n* GUILD_CREATE\n* GUILD_DELETE\n* GUILD_UPDATE\n* GUILD_MEMBER_ADD\n* GUILD_MEMBER_REMOVE\n* GUILD_MEMBER_UPDATE\n* GUILD_MEMBERS_CHUNK\n* GUILD_INTEGRATIONS_UPDATE\n* GUILD_ROLE_CREATE\n* GUILD_ROLE_DELETE\n* GUILD_ROLE_UPDATE\n* GUILD_BAN_ADD\n* GUILD_BAN_REMOVE\n* GUILD_EMOJIS_UPDATE\n* CHANNEL_CREATE\n* CHANNEL_DELETE\n* CHANNEL_UPDATE\n* CHANNEL_PINS_UPDATE\n* MESSAGE_CREATE\n* MESSAGE_DELETE\n* MESSAGE_UPDATE\n* MESSAGE_DELETE_BULK\n* MESSAGE_REACTION_ADD\n* MESSAGE_REACTION_REMOVE\n* MESSAGE_REACTION_REMOVE_ALL\n* USER_UPDATE\n* USER_SETTINGS_UPDATE\n* PRESENCE_UPDATE\n* TYPING_START\n* VOICE_STATE_UPDATE\n* VOICE_SERVER_UPDATE\n* WEBHOOKS_UPDATE","type":[[["string"]]],"meta":{"line":308,"file":"Constants.js","path":"src/util"}},{"name":"MessageType","description":"The type of a message, e.g. `DEFAULT`. Here are the available types:\n* DEFAULT\n* RECIPIENT_ADD\n* RECIPIENT_REMOVE\n* CALL\n* CHANNEL_NAME_CHANGE\n* CHANNEL_ICON_CHANGE\n* PINS_ADD\n* GUILD_MEMBER_JOIN\n* USER_PREMIUM_GUILD_SUBSCRIPTION\n* USER_PREMIUM_GUILD_SUBSCRIPTION_TIER_1\n* USER_PREMIUM_GUILD_SUBSCRIPTION_TIER_2\n* USER_PREMIUM_GUILD_SUBSCRIPTION_TIER_3\n* CHANNEL_FOLLOW_ADD","type":[[["string"]]],"meta":{"line":382,"file":"Constants.js","path":"src/util"}},{"name":"ActivityType","description":"The type of an activity of a users presence, e.g. `PLAYING`. Here are the available types:\n* PLAYING\n* STREAMING\n* LISTENING\n* WATCHING\n* CUSTOM_STATUS","type":[[["string"]]],"meta":{"line":415,"file":"Constants.js","path":"src/util"}},{"name":"VerificationLevel","description":"The value set for the verification levels for a guild:\n* None\n* Low\n* Medium\n* (╯°□°）╯︵ ┻━┻\n* ┻━┻ ﾐヽ(ಠ益ಠ)ノ彡┻━┻","type":[[["string"]]],"meta":{"line":479,"file":"Constants.js","path":"src/util"}},{"name":"APIError","description":"An error encountered while performing an API request. Here are the potential errors:\n* UNKNOWN_ACCOUNT\n* UNKNOWN_APPLICATION\n* UNKNOWN_CHANNEL\n* UNKNOWN_GUILD\n* UNKNOWN_INTEGRATION\n* UNKNOWN_INVITE\n* UNKNOWN_MEMBER\n* UNKNOWN_MESSAGE\n* UNKNOWN_OVERWRITE\n* UNKNOWN_PROVIDER\n* UNKNOWN_ROLE\n* UNKNOWN_TOKEN\n* UNKNOWN_USER\n* UNKNOWN_EMOJI\n* UNKNOWN_WEBHOOK\n* BOT_PROHIBITED_ENDPOINT\n* BOT_ONLY_ENDPOINT\n* MAXIMUM_GUILDS\n* MAXIMUM_FRIENDS\n* MAXIMUM_PINS\n* MAXIMUM_ROLES\n* MAXIMUM_REACTIONS\n* MAXIMUM_CHANNELS\n* MAXIMUM_INVITES\n* UNAUTHORIZED\n* USER_BANNED\n* MISSING_ACCESS\n* INVALID_ACCOUNT_TYPE\n* CANNOT_EXECUTE_ON_DM\n* EMBED_DISABLED\n* CANNOT_EDIT_MESSAGE_BY_OTHER\n* CANNOT_SEND_EMPTY_MESSAGE\n* CANNOT_MESSAGE_USER\n* CANNOT_SEND_MESSAGES_IN_VOICE_CHANNEL\n* CHANNEL_VERIFICATION_LEVEL_TOO_HIGH\n* OAUTH2_APPLICATION_BOT_ABSENT\n* MAXIMUM_OAUTH2_APPLICATIONS\n* INVALID_OAUTH_STATE\n* MISSING_PERMISSIONS\n* INVALID_AUTHENTICATION_TOKEN\n* NOTE_TOO_LONG\n* INVALID_BULK_DELETE_QUANTITY\n* CANNOT_PIN_MESSAGE_IN_OTHER_CHANNEL\n* INVALID_OR_TAKEN_INVITE_CODE\n* CANNOT_EXECUTE_ON_SYSTEM_MESSAGE\n* INVALID_OAUTH_TOKEN\n* BULK_DELETE_MESSAGE_TOO_OLD\n* INVALID_FORM_BODY\n* INVITE_ACCEPTED_TO_GUILD_NOT_CONTAINING_BOT\n* INVALID_API_VERSION\n* REACTION_BLOCKED\n* RESOURCE_OVERLOADED","type":[[["string"]]],"meta":{"line":496,"file":"Constants.js","path":"src/util"}},{"name":"DefaultMessageNotifications","description":"The value set for a guild's default message notifications, e.g. `ALL`. Here are the available types:\n* ALL\n* MENTIONS","type":[[["string"]]],"meta":{"line":607,"file":"Constants.js","path":"src/util"}},{"name":"MembershipStates","description":"The value set for a team members's membership state:\n* INVITED\n* ACCEPTED","type":[[["string"]]],"meta":{"line":618,"file":"Constants.js","path":"src/util"}},{"name":"WebhookTypes","description":"The value set for a webhook's type:\n* Incoming\n* Channel Follower","type":[[["string"]]],"meta":{"line":631,"file":"Constants.js","path":"src/util"}},{"name":"InviteResolvable","description":"Data that can be resolved to give an invite code. This can be:\n* An invite code\n* An invite URL","type":[[["string"]]],"meta":{"line":19,"file":"DataResolver.js","path":"src/util"}},{"name":"Base64Resolvable","description":"Data that resolves to give a Base64 string, typically for image uploading. This can be:\n* A Buffer\n* A base64 string","type":[[["Buffer"]],[["string"]]],"meta":{"line":52,"file":"DataResolver.js","path":"src/util"}},{"name":"BufferResolvable","description":"Data that can be resolved to give a Buffer. This can be:\n* A Buffer\n* The path to a local file\n* A URL","type":[[["string"]],[["Buffer"]]],"meta":{"line":69,"file":"DataResolver.js","path":"src/util"}},{"name":"PermissionResolvable","description":"Data that can be resolved to give a permission number. This can be:\n* A string (see {@link Permissions.FLAGS})\n* A permission number\n* An instance of Permissions\n* An Array of PermissionResolvable","type":[[["string"]],[["number"]],[["Permissions"]],[["Array","<"],["PermissionResolvable",">"]]],"meta":{"line":12,"file":"Permissions.js","path":"src/util"}},{"name":"Snowflake","description":"A Twitter snowflake, except the epoch is 2015-01-01T00:00:00.000Z\n```\nIf we have a snowflake '266241948824764416' we can represent it as binary:\n\n64                                          22     17     12          0\n 000000111011000111100001101001000101000000  00001  00000  000000000000\n      number of ms since Discord epoch       worker  pid    increment\n```","type":[[["string"]]],"meta":{"line":17,"file":"Snowflake.js","path":"src/util"}},{"name":"DeconstructedSnowflake","description":"A deconstructed snowflake.","type":[[["Object"]]],"props":[{"name":"timestamp","description":"Timestamp the snowflake was created","type":[[["number"]]]},{"name":"date","description":"Date the snowflake was created","type":[[["Date"]]]},{"name":"workerID","description":"Worker ID in the snowflake","type":[[["number"]]]},{"name":"processID","description":"Process ID in the snowflake","type":[[["number"]]]},{"name":"increment","description":"Increment in the snowflake","type":[[["number"]]]},{"name":"binary","description":"Binary representation of the snowflake","type":[[["string"]]]}],"meta":{"line":48,"file":"Snowflake.js","path":"src/util"}},{"name":"StringResolvable","description":"Data that can be resolved to give a string. This can be:\n* A string\n* An array (joined with a new line delimiter to give a string)\n* Any value","type":[[["string"]],[["Array"]],["*"]],"meta":{"line":355,"file":"Util.js","path":"src/util"}},{"name":"ColorResolvable","description":"Can be a number, hex string, an RGB array like:\n```js\n[255, 0, 255] // purple\n```\nor one of the following strings:\n- `DEFAULT`\n- `WHITE`\n- `AQUA`\n- `GREEN`\n- `BLUE`\n- `YELLOW`\n- `PURPLE`\n- `LUMINOUS_VIVID_PINK`\n- `GOLD`\n- `ORANGE`\n- `RED`\n- `GREY`\n- `DARKER_GREY`\n- `NAVY`\n- `DARK_AQUA`\n- `DARK_GREEN`\n- `DARK_BLUE`\n- `DARK_PURPLE`\n- `DARK_VIVID_PINK`\n- `DARK_GOLD`\n- `DARK_ORANGE`\n- `DARK_RED`\n- `DARK_GREY`\n- `LIGHT_GREY`\n- `DARK_NAVY`\n- `RANDOM`","type":[[["string"]],[["number"]],[["Array","<"],["number",">"]]],"meta":{"line":374,"file":"Util.js","path":"src/util"}}],"externals":[{"name":"WritableStream","see":["{@link https://nodejs.org/api/stream.html#stream_class_stream_writable}"],"meta":{"line":16,"file":"StreamDispatcher.js","path":"src/client/voice/dispatcher"}},{"name":"Inflate","see":["{@link https://www.npmjs.com/package/zlib-sync}"],"meta":{"line":106,"file":"WebSocketShard.js","path":"src/client/websocket"}},{"name":"CloseEvent","see":["{@link https://developer.mozilla.org/en-US/docs/Web/API/CloseEvent}"],"meta":{"line":308,"file":"WebSocketShard.js","path":"src/client/websocket"}},{"name":"ErrorEvent","see":["{@link https://developer.mozilla.org/en-US/docs/Web/API/ErrorEvent}"],"meta":{"line":313,"file":"WebSocketShard.js","path":"src/client/websocket"}},{"name":"MessageEvent","see":["{@link https://developer.mozilla.org/en-US/docs/Web/API/MessageEvent}"],"meta":{"line":318,"file":"WebSocketShard.js","path":"src/client/websocket"}},{"name":"BaseCollection","see":["{@link https://discord.js.org/#/docs/collection/}"],"meta":{"line":19,"file":"Collection.js","path":"src/util"}},{"name":"Stream","see":["{@link https://nodejs.org/api/stream.html}"],"meta":{"line":77,"file":"DataResolver.js","path":"src/util"}}]}